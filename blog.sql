/*
SQLyog Trial v13.1.8 (64 bit)
MySQL - 8.0.30 : Database - blog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`blog` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `blog`;

/*Table structure for table `tb_article` */

DROP TABLE IF EXISTS `tb_article`;

CREATE TABLE `tb_article` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int NOT NULL COMMENT '作者',
  `category_id` int DEFAULT NULL COMMENT '文章分类',
  `article_cover` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '文章缩略图',
  `article_title` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标题',
  `article_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '内容',
  `type` tinyint(1) NOT NULL DEFAULT '0' COMMENT '文章类型 1原创 2转载 3翻译',
  `original_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '原文链接',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶 0否 1是',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除  0否 1是',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态值 1公开 2私密 3评论可见',
  `create_time` datetime NOT NULL COMMENT '发表时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=68 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_article` */

insert  into `tb_article`(`id`,`user_id`,`category_id`,`article_cover`,`article_title`,`article_content`,`type`,`original_url`,`is_top`,`is_delete`,`status`,`create_time`,`update_time`) values 
(54,1,187,'https://static.talkxj.com/articles/3dffb2fcbd541886616ab54c92570de3.jpg','测试文章','恭喜你成功运行博客，开启你的文章之旅吧。',1,'',0,0,1,'2022-01-24 23:33:56',NULL),
(55,1,188,'http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg','2022-08-11 重新部署','2333333![封面.jpg](http://121.89.232.237:83/articles/23f1f18b7c9c41426ccf26692b3233ad.jpg)\n\n<font size=4>今天在朋友的帮助下终于解决了网站图片上传问题,\n问题就出在了后端启动脚本上：\n```bash\n我原本使用的命令：\ndocker build -t blog .  \ndocker run --name blog --restart=always -p 8080:8080 -d blog  \n\nsh脚本中对应的命令：\ndocker build -t $SERVER_NAME:$TAG .\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\n\n```\n\n对应的sh脚本编写：\n```shell\n#源jar路径  \nSOURCE_PATH=/usr/local/docker\n#docker 镜像/容器名字或者jar名字 这里都命名为这个\nSERVER_NAME=blog-springboot-0.0.1.jar\nTAG=latest\nSERVER_PORT=8080\n#容器id\nCID=$(docker ps | grep \"$SERVER_NAME\" | awk \'{print $1}\')\n#镜像id\nIID=$(docker images | grep \"$SERVER_NAME:$TAG\" | awk \'{print $3}\')\nif [ -n \"$CID\" ]; then\n  echo \"存在容器$SERVER_NAME, CID-$CID\"\n  docker stop $CID\n  docker rm $CID\nfi\n# 构建docker镜像\nif [ -n \"$IID\" ]; then\n  echo \"存在$SERVER_NAME:$TAG镜像，IID=$IID\"\n  docker rmi $IID\nelse\n  echo \"不存在$SERVER_NAME:$TAG镜像，开始构建镜像\"\n  cd $SOURCE_PATH\n  docker build -t $SERVER_NAME:$TAG .\nfi\n# 运行docker容器\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\necho \"$SERVER_NAME容器创建完成\"\n```\n\n对此，部署成功~\n\n</font>\n',1,'',0,0,1,'2022-08-11 10:14:04','2022-08-31 08:05:48'),
(56,1,189,'http://121.89.232.237:83/articles/3065741dd3beb39304f40b7b47d6cf3a.jpg','2022-08-30 大二所写的图书管理系统的编写日志..','4/18\nC类题:\n添加冻结用户功能√——>添加注销用户功能√——>添加修改密码功能√——>管理员用户界面设计\n ——>管理图书界面设计、功能实现（增删改查）——>管理用户功能(增删改查)——>读者界面/读者借\n书界面设计——>借书功能实现（是否借阅图书、是否归还、日期类、）\n\n去重：目标：防止出现用户名一样或者ID一样的用户 今日已完成√\n\n\n4/27\n\nC类题：功能模块化：DAO、interface、implement(实现主要的功能-增删改查询图书、用户) \n查询多条记录：运用泛型、哈希表的数据结构\ndbutils:做新的功能界面时用，如update、query....\n\nDAO:通用的增删改方法、查询方法-获取一条或多条记录\nBooksDAO:\naddBook():增加一本书\n\n5.1\n实现增添书籍\n实现将数据库中所有书籍罗列到表格中，选中表格中的一条则可以进行删除、修改  \n\n增添图书√\n罗列√\n选中表格中的记录进行删除，修改\n\n读取书本类型，并根据不同字段进行分类\nSELECT  DISTINCT TYPE 种类 FROM `books_info` √\n\n\n5/5\n```java\npublic void checkAndAddNewType() {\n		String s = typetextField.getText();\n		int co = comboBox.getItemCount();\n		for(int i=0;i<co;i++) {\n			String item = comboBox.getItemAt(i).toString();\n			if(s.equalsIgnoreCase(item)) {\n				break;\n			}else {\n				if(i==(co-1)) {\n					System.out.println(\"新增图书类型为：\"+s);\n					comboBox.addItem(s);\n				}\n			}\n		}\n	}\n```\n\n\n提升了新增图书种类的便捷性\n\n删除图书：当连续使用删除功能两次时只删掉了一本？ 已解决√\n\n5/9\n\n```Java\nif(!(as.equals(\"\"))) {\n			amount = Integer.parseInt(as);\n		}else {\n			amount = 0;\n		}\n```\n\n\n查询书籍：可根据书本类型进行分类\n已修正√\n目前问题：分类后选择修改删除仍然是第一条的记录\n已修正 √	\n\n```Java\nList listSel;\n	if(!(comboBox.getSelectedItem().toString().equalsIgnoreCase(\"全部书籍\"))) {\n		listSel = typeColList;\n}else {\n		listSel = list;\n			}\n```\n\n\n设计普通用户的界面：\n\n5/11\n\n正在实现：选中一个图书节点时，显示出该节点信息 已实现√\n已实现：读者基本查书栏\n\n\n5/16\n15:43 搜索功能终于完善......\n\n\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\"\\n\",\"呵1\") WHERE `user_Name`=\"234324\"\n\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\"\\n\",?) WHERE `user_Name`=?\n\n设计借阅功能\n每个读者借了一本书后便不能再次借阅该书，直到已经归还该书（ Boolean isBack ?）\n\n--------\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\"\\n\",?) WHERE `user_id`= ? ;\nUPDATE `userinfo` SET `owned_bk`= CONCAT(`owned_bk`,\"\\n\", ?) WHERE `user_id`=?\n\n\nSELECT CONCAT_WS(\',1\',\'11\',\'22\',NULL)\nowned_bk 如何删减？ update( )?\n如何展示owned_bk中的每一项记录？\n\n管理员：在借书记录中展示每一位读者的所有借书记录\n每条记录展示是否归还图书？\n\n借书记录中选出所有未归还记录中超过特定时段（1天，5天....）未归还记录生成摧还名单\n管理员则可以发送催还消息，读者登录后就可以收到该条消息\n\n12:24：修改图书功能偶遇BUG? 连续操作修改图书类型时会报错\n更新功能：模糊查询读者 √\n\n借阅书籍问题：如何将每个用户的每条借阅记录分开，最后罗列到一张表上？\n方案（未实现）：1（未实现）、通过sql语句定义函数/存储过程，将单个用户的借阅记录分段到同一张表上的多条记录，方便接下来的实现操作\n2（较易，实现中）、建立一张新表，将书名，借阅时间、借阅者、归还状态在调用借书、还书功能时进行同步记录，进行管理操作时也可同步\n\n图书记录也许可以根据未归还和已归还进行分类？筛选出未归还的记录形成催交名单\nSELECT `borrower`, `borrowed_book`,`borrow_date`,`isReturn` FROM `borrowrecord` WHERE `borrower` LIKE \"%(%\"\n\n5/24\n个人借阅图书表格初步完成√\n读书笔记完成√\n\n图书维护的相关BUG:更改图书类别成功会出现新的一条相关记录\n\n5/24BUG已解决：通过固定索引使得点击修改后 后来的选中项不会被修改\n归还图书（）：图书归还索引尚且只有书名，不明确（万一有多本书名一样的书呢？）\n又出现BUG:删除图书报错？\n\n5/31 更新：可查询历史借阅记录了\n\n6/2\n\nUPDATE `userinfo`\nSET `owned_bk`=REPLACE(`owned_bk`,\'呵呵\',\'\')\nWHERE `user_id`=\'04191918\'\n\n6/3 更新了判断是否借阅该书、修改了还书功能中的移除字段\n修改了没有读取到用户密码、持有书籍的BUG\n\n待修改：对借阅记录中已归还\\待归还进行分类\n\n6/4 \n读取生成的图片\n1生成\n2保存\n3读取\n4展示\n\n6/5\n对于借阅日期进行分类，统计每个借阅日期的借阅量\n\nUPDATE `userinfo` SET `borrow_time`=0\n置空一整列\n\nSELECT COUNT(borrow_date) FROM `borrowrecord` GROUP BY `borrow_date`\n分类\n\nUPDATE `books_info` SET `getbor_Times`=5\n\nUPDATE `userinfo` SET `borrow_time`=4\n\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times`;\n\n6/7\n1.改进了读者排行榜排序位次\n2.改进了最佳借阅量图书榜排序位次\n3.优化了借阅表部分展示\n\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times` DESC\n\nSELECT `borrow_time` ,`user_Name` FROM `userinfo` ORDER BY `borrow_time` DESC\n\n6.11\nSELECT COUNT(borrow_date),`borrow_date` FROM `borrowrecord` GROUP BY `borrow_date` ORDER BY `borrow_date` ASC \n---\n\n数据库设计：\nSQL建表语句\n\n借阅记录表：\n```cpp\n/*\nSQLyog Ultimate v10.00 Beta1\nMySQL - 8.0.28 : Database - library\n*********************************************************************\n*/\n\n\n/*!40101 SET NAMES utf8 */;\n\n/*!40101 SET SQL_MODE=\'\'*/;\n\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=\'NO_AUTO_VALUE_ON_ZERO\' */;\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\nCREATE DATABASE /*!32312 IF NOT EXISTS*/`library` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION=\'N\' */;\n\nUSE `library`;\n\n/*Table structure for table `books_info` */\n\nDROP TABLE IF EXISTS `books_info`;\n\nCREATE TABLE `books_info` (\n  `book_id` varchar(7) NOT NULL COMMENT \'图书编号\',\n  `book_name` varchar(20) NOT NULL COMMENT \'书名\',\n  `type` varchar(20) NOT NULL COMMENT \'类型\',\n  `author` varchar(20) DEFAULT NULL COMMENT \'作者\',\n  `date` datetime DEFAULT NULL COMMENT \'入库日期\',\n  `amount` bigint DEFAULT NULL COMMENT \'数量\',\n  `about` mediumtext COMMENT \'书的简介\',\n  `publisher` varchar(20) DEFAULT NULL COMMENT \'出版社\',\n  `getbor_Times` bigint DEFAULT NULL COMMENT \'被借阅次数\',\n  PRIMARY KEY (`book_id`,`book_name`,`type`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\n\n/*Data for the table `books_info` */\n\ninsert  into `books_info`(`book_id`,`book_name`,`type`,`author`,`date`,`amount`,`about`,`publisher`,`getbor_Times`) values (\'004\',\'jdbc引入\',\'JAVA书\',\'JAVA编程者\',\'2015-10-20 00:00:00\',0,NULL,NULL,NULL),(\'01\',\'第一本书哦\',\'你好呀\',\'kk\',\'2022-09-20 14:13:05\',2,\'呵呵呵欢迎借阅\',\'人民出版社\',1),(\'aa\',\'阿萨大师大多\',\'HAVA书\',\'哒哒哒哒\',\'2022-09-20 15:35:10\',0,NULL,NULL,NULL);\n\n/*Table structure for table `borrowrecord` */\n\nDROP TABLE IF EXISTS `borrowrecord`;\n\nCREATE TABLE `borrowrecord` (\n  `borrower` varchar(20) DEFAULT NULL COMMENT \'借阅者\',\n  `borrowed_book` varchar(20) DEFAULT NULL COMMENT \'借阅书名\',\n  `borrow_date` date DEFAULT NULL COMMENT \'借阅日期\',\n  `isReturn` varchar(10) DEFAULT NULL COMMENT \'图书是否归还\',\n  `whole_record` longtext COMMENT \'完整借阅记录\'\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\n\n/*Data for the table `borrowrecord` */\n\ninsert  into `borrowrecord`(`borrower`,`borrowed_book`,`borrow_date`,`isReturn`,`whole_record`) values (\'t1(ID:02)\',\'第一本书哦\',\'2022-09-20\',\'待归还\',\'用户t1(ID为：02)于2022-09-20 14:13:05借走图书《第一本书哦》(编号为01)书籍一本\');\n\n/*Table structure for table `userinfo` */\n\nDROP TABLE IF EXISTS `userinfo`;\n\nCREATE TABLE `userinfo` (\n  `user_Name` varchar(20) NOT NULL COMMENT \'用户名\',\n  `user_type` varchar(20) NOT NULL COMMENT \'用户类型\',\n  `user_id` varchar(20) NOT NULL COMMENT \'用户id\',\n  `user_password` varchar(15) NOT NULL COMMENT \'密码\',\n  `user_about` varchar(30) DEFAULT NULL COMMENT \'关于用户\',\n  `sign_date` datetime DEFAULT NULL COMMENT \'注册日期\',\n  `user_Sta` varchar(10) DEFAULT NULL COMMENT \'用户状态\',\n  `record` longtext COMMENT \'借阅记录\',\n  `owned_bk` longtext COMMENT \'持有书籍\',\n  `borrow_time` bigint DEFAULT NULL COMMENT \'借阅次数\',\n  PRIMARY KEY (`user_Name`,`user_type`,`user_id`,`user_password`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\n\n/*Data for the table `userinfo` */\n\ninsert  into `userinfo`(`user_Name`,`user_type`,`user_id`,`user_password`,`user_about`,`sign_date`,`user_Sta`,`record`,`owned_bk`,`borrow_time`) values (\'kk\',\'管理员\',\'01\',\'123\',\'第一个用户\',\'2022-09-20 14:12:33\',\'非冻结状态\',\'\',\'\',0),(\'t1\',\'读者\',\'02\',\'12\',\'12121212\',\'2022-09-20 14:15:34\',\'非冻结状态\',\'\\n用户t1(ID为：02)于2022-09-20 14:13:05借走图书《第一本书哦》(编号为01)书籍一本\',\'\\n第一本书哦\',1);\n\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\n\n\n```\n\n\n\n\n\n\n',1,'',0,0,1,'2022-08-30 12:34:57','2022-10-01 21:00:39'),
(57,1,189,'http://121.89.232.237:83/articles/761687dc796df37d84c18170e5a73243.png','2022-08-30 关于该博客所使用到的redis缓存以及Rabbit MQ','**一篇文章**\n服务器莫名其妙的停止了mysql导致博客差点登不上，只好移除mysql重新新建镜像然后导入原来的数据...\n唉好烦...有什么其他办法么？\n????\n23333',1,'',0,0,1,'2022-08-30 12:42:36','2022-08-30 12:49:01'),
(58,1,NULL,NULL,'4','###### 4/15\n\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\n\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\n\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\n\n----\n\n\n\n00:35\n\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\n\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\n\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\n\n---\n\n###### 4/16\n\n01:09\n\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\n\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\n\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\n>\n\n---\n\n02:37\n\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\n\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\n\n\n\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\n\n---\n\n03:08\n\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\n\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\n\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\n\n---\n\n03:42\n\nSo, in our game -- we called it \"Sea of Solitude\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\n\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\n\n\n\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\n\n---\n\n###### 4/18\n\n04:58\n\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\n\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\n\n\n\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\n>\n\n---\n\n05:44\n\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\n\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\n\n\n\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\n>\n\n---\n\n06:13\n\n###### 4/19\n\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\n\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\n\n\n\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\n>\n\n---\n\n06:51\n\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\n\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\n\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\n\n---\n\n07:07\n\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\n\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\n\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\n>\n\n---\n\n08:37\n\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\n\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\n\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\n>\n\n---\n\n09:17\n\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\n\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\n\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\n>\n\n---\n\n###### 4/20\n\n09:36\n\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\n\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\n\n\n\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\n>\n\n---\n\n10:05\n\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\n\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\n\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\n>\n\n---\n\n11:19\n\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\n\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\n\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\n>\n\n---\n\n11:44\n\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\n\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\n\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\n>\n\n---\n\n12:26\n\nThank you.\n\n谢谢\n\n> 谢谢',0,NULL,0,1,3,'2022-08-30 12:43:44','2022-08-30 12:53:44'),
(59,1,205,'http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg','408数据结构所有笔记[2022-3.5~6.5] ','###### 3/8\n\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\n\n空间复杂度计算\n\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\n\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\n\nloga(M/N)=logaM - logaN\n\n###### 3/13\n\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\n\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\n\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\n\n###### 3/14\n\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\n\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\n\n最好情况：均在表尾插入/删除元素\n\n最坏：在表头插入、删除元素（移动次数多）\n\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\n\n动态存储\n\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\n\n顺序表“随机存取”存储方式的原因,	单链表不支持，只能从头结点开始找\n\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\n\n复杂度为O(1)\n\n```c\n//头插法 3/15\nvoid insertListHead(LinkList &l) {\n	l = (LinkList)malloc(sizeof(Node));\n    l->next =NULL; //可能有那啥的脏数据\n	Node* newNode;\n	int num;\n	while (scanf(\"%d\", &num) != EOF) {\n		newNode = (LinkList)malloc(sizeof(Node));\n		newNode->data = num;\n		newNode->next = l->next;\n		l->next = newNode;\n	}\n}\n\n//尾插法 3/15\nvoid insertListTail(LinkList& l) {\n	l = (LinkList)malloc(sizeof(Node));\n	Node* newNode;\n	Node* tmp =l;\n	int num;\n	while (scanf(\"%d\", &num) != EOF) {\n		newNode = (LinkList)malloc(sizeof(Node));\n		newNode->data = num;\n		tmp->next = newNode;\n		tmp = newNode; //tmp = tmp->next;\n	}\n    tmp->next =NULL;\n}\n\n```\n\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\n\n\n\n增删链表效率高于顺序表\n\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\n\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\n\n###### 3/18\n\n第一章：\n\n栈是一种逻辑结构，可以顺序存储也可链式存储\n\nP4:综合应用题：\n\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\n\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\n\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\n\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\n\n\n\nP18:综合应用题：\n\n01:\n\n```c\nif(length<1){\n	return false;\n}\nElemtype del = data[length-1];\nElemtype tmp;\nint pos=0;\nfor(int i=0;i<length-1;i++){\n	tmp = data[i];\n	if(data[i]<tmp){\n		tmp = data[i];\n		pos++;\n	}\n}\n	data[pos] = del;\n	length--;\n\n	return true;\n```\n\n02:\n\n```bash\nvoid Reverse(Sqlist &l){\n	ElemType tmp;\n	int pos = l.length-1;\n	for(i=0;i<l.length/2;i++){\n		tmp = l.data[i];\n		l.data[i]= l.data[pos];\n		pos--;\n		l.data[pos] = tmp;\n	}\n}\n```\n\n\n\n错题总结：\n\nP17:\n\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\n\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\n\n08：线性表删除第i个元素移动n-i个元素即可\n\n###### 3/21\n\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\n\n栈的出栈顺序数量的计算：卡特兰数\n\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\n\ntop++ 和++top的区别\n\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\n\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\n\n栈满：top==MaxSize\n\n共享栈栈满条件：top1+1==top2\n\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\n\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\n\n括号匹配流程图\n\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\n\n用栈实现括号匹配：\n\n具体代码：\n\n```c\n#define Maxsize 10            //定义栈中元素的\ntypedef struct{\nchar data[MaxSize];        //静态数组存放栈\nint top;                    //栈顶指针\n}SqStack;\n//初始化栈\nvoid InitStack(Sqstack &S)\n//判断栈是否为空\nbool stackEmpty(SqStack S)\n//新元素入栈\nbool Push(SqStack &S,char x)\n//栈顶元素出栈，用x返回\nbool Pop(SqStack &s,char &x)\n\n    //有栈的情况\nbool bracketCheck(char str[],int length) {\nSqStack s;\nInitStack(S); //初始化一个栈\nfor (int i=0; i<length; i++){\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\n	Push(S, str[i]); //扫描到左括号，入栈\n}else {\n	if (StackEmpty(S))//扫描到右括号，且当前栈空\n	return false;//匹配失败\nchar topElem;\nPop(S,topElem);//栈顶元素出栈\nif(str[i]==\')\' && topElem!=\'(\')\n	return false;\nelse if(str[i]==\']\'&& topElem!=\'[\')\n	return false;\nif(str[i]==\'}\' && topElem!=\'{\')\nreturn false;\n	}\n}\n    return StackEmpty(S);\n}\n\nbool compare(int x,int y){\n    if(x!=(y-1)){\n        return true;\n    }\n    return false;\n}\n       //无栈的情况\nbool bracketCheck1(char str[],int length) {\n int MaxSize = length;\nchar data[MaxSize];        //静态数组存放栈\nint top=-1;  \n\nfor (int i=0; i<length; i++){\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\n    if(compare(top,length)){\n		top++;\n    	data[top]= str[i];//扫描到左括号，入栈\n    }\n}else {\n	if (top==-1)//扫描到右括号，且当前栈空\n	return false;//匹配失败\nchar topElem;\ntopElem = data[top];\n    top--;//栈顶元素出栈\nif(str[i]==\')\' && topElem!=\'(\')\n	return false;\nelse if(str[i]==\']\'&& topElem!=\'[\')\n	return false;\nif(str[i]==\'}\' && topElem!=\'{\')\nreturn false;\n	}\n}\n    return top==-1;\n}\n    \n    \n    \n```\n\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\n\n###### 3/23~24\n\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\n\n程序输出结果只能是第一种（唯一性、确定性）\n\n后缀表达式的手算方法：\n\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\n\n注意：两个操作数的左右顺序\n\n机算：\n\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\n\n用栈实现后缀表达式的计算：\n\n①从左往右扫描下一个元素，直到处理完所有元素\n\n②若扫描到操作数则压入栈，并回到①；否则执行③ \n\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\n\n----\n\n前缀表达式：\n\n**中缀表达式转前缀表达式（手算）**\n\n① 确定中缀表达式中各个运算符的运算顺序\n\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\n\n③ 如果还有运算符没被处理，就继续 ②\n\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\n\n机算：\n\n用栈实现前缀表达式的计算：\n\n①从右往左扫描下一个元素，直到处理完所有元素\n\n②若扫描到操作数则压入栈，并回到①；否则执行③ \n\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\n\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\n\n\n\n中->前\n\n注：先弹出的是左操作数，后弹出的是右操作数\n\n\n\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\n\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\n\n上三角按行存放 <===> 下三角按列存放\n\n下三角按行存<====>上三角按列存\n\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\n\n###### 4/1\n\n串\n\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\n\n 高四位 低四位\n\na 0110	0001  \n\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\n\nKMP：\n\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\n\n从第一位开始匹配：next[1] = 0,next[2] = 1;\n\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\n\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\n\n**nextVal数组求法**，先让第一位=0\n\n###### 4/3~4/5\n\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\n\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\n\ni<=n/2是分支结点，i>n/2是叶子结点\n\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\n\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\n\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\n\n线索化二叉树\n\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\n\n----\n\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\n\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\n\n###### 4/6\n\n哈夫曼树：最优二叉树\n\n带权路径最小的二叉树\n\n**并查集代码**\n\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\n\n最坏情况下时间复杂度与树的高度h相关\n\n优化合并操作 小树并入大树\n\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\n\nfind()最坏时间复杂度变为O(logn)\n\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\n\n树越矮，时间复杂度越低\n\nfind优化操作\n\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\n\n```c\n/*int Find(int nums[],int index){\n    int root = index;\n    while(nums[root]>=0){\n        root = nums[root];\n    }\n    while(index!=root){\n        int record = root;\n        nums[index] = root;\n        root = record;\n    }\n    return root;\n}*/\n//使树的高度不超过O(a(n))的数量级\n\n\n#pragma once\n#define Size 100\nint UFSets[Size];\n\n//初始化并查集\nvoid Initial(int S[]) {\n	for (int i = 0;i < Size;i++) {\n		S[i] = -1;\n	}\n}\n\n//查找操作，找x的根节点\nint Find(int s[], int x) {\n	while (s[x]>0)\n	{\n		x = s[x];\n	}\n	return x;\n}\n\n//合并操作 根节点统一  树高<=logn + 1\nvoid Union(int s[], int root1, int root2) {\n	if (root1 == root2) {\n		return ;\n	}\n	if (s[root2] > s[root1]) { //root2是小树\n		s[root1] += s[root2];\n		s[root2] = root1;\n	}\n	else {\n		s[root2] += s[root1];\n		s[root1] = root2;\n	}\n}\n\n```\n\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\n\n错题：\n\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\n\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\n\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\n\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\n\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\n\n该公式结论对做题有帮助 /列举法：5x2+4=14\n\n###### 4/16\n\n图的顶点个数 = 图的阶数\n\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\n\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\n\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\n\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\n\n邻接表、邻接矩阵的**区别**\n\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\n\n---\n\n# 4/18\n\n<h3>图的数据结构定义（邻接表）	</h3>\n\n```c\n// 邻接表中表对应的链表的顶点\ntypedef struct _ENode\n{\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\n    struct _ENode *next_edge;   // 指向下一条弧的指针\n}ENode, *PENode;\n\n// 邻接表中表的顶点\ntypedef struct _VNode\n{\n    char data;              // 顶点信息\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\n}VNode;\n\n// 邻接表\ntypedef struct _LGraph\n{\n    int vexnum;             // 图的顶点的数目\n    int edgnum;             // 图的边的数目\n    VNode vexs[MAX];\n}LGraph;\n\n```\n\n\n\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\n\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\n\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\n\n访问各个顶点所需时间+访问各边所需时间\n\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\n\n**深度优先遍历：**和树的**先根**遍历类似\n\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\n\n---\n\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\n\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\n\n考频只有一题的选择：\n\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\n\n---\n\n关键路径\n\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\n\n4/24复习\n\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\n\ne(i) :活动ai最早开始的时间\n\nl(i) :活动ai最晚开始的时间\n\nvl(k)：活动vk最迟发生时间 vek:最早\n\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\n\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\n\n差值为0的就是关键路径\n\n\n\n\n\n#### 5 月\n\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\n\n查找判定树\n\n判断「平衡二叉树」的 2 个条件：\n\n- **1. 是「二叉排序树」**\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\n\n二叉排序树\n\n平衡二叉树\n\n二叉搜索树\n\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\n\n---\n\n<h3>折半查找：</h3>\n\n只适用于有序的顺序表\n\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\n\n\n\n折半查找构成了二叉排序树\n\n可以把折半查找看成一颗二叉排序树\n\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\n\n二叉排序树删除操作\n\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\n\n7.3.3中要重点了解的例1~3，例4\n\n**简单路径定义：**\n\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\n\n---\n\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\n\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\n\n\n\n**红黑树性质**\n\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\n\n红黑树插入\n\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\n\n看“叔”脸色\n\n\n\n红黑树性质+插入总结：\n\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\n\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\n\n**B树**\n\n特性\n\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\n\n\n\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\n\n树的高度\n\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\n\n\n\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\n\n\n\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\n\n（上下限：除了根节点外，结点关键字个数n: )\n\n\n\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\n\nB树/B+树类比\n\n---\n\n**散列（哈希表）**\n\n拉链法：同义词串成一个链表\n\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\n\n着重考察：线性探测法、平方探测法\n\n\n\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\n\n总结\n\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\n\n装填因子概念也需重视\n\nQuestion1:\n\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\n\n(1) 请画出所构造的散列表。\n\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\n\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\n\n\n\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\n\n查找成功：每个元素被探测的次数加起来的总和/元素个数\n\n---\n\n##### 5/23 排序算法\n\n插入排序法\n\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\n\n---\n\n##### 5/27 快速排序\n\n时间、空间复杂度与递归层次有关\n\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\n\n**快排时间效率分析：**\n\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\n\n---\n\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\n\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\n\n---\n\n###### **8.3.3**\n\n---\n\n第七题：**x趟排序应产生x个分界线。**\n\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\n\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\n\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\n\n---\n\n第9题：关于快排的**完美**划分\n\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\n\n排序速度最慢：原数组已基本有序\n\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\n\n##### 5/29 堆排序\n\n最主要的算法还是向下调整HeadAdjust()函数\n\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\n\n\n\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\n\n堆排序的空间复杂度：常数级 O(1)\n\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\n\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\n\n堆的插入和删除\n\n考试可能考比较次数\n\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\n\n\n\n##### 5/30 归并排序+基数排序\n\n二路归并：把两个已经有序的序列合并成一个\n\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\n\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\n\n**基数排序：**代码不怎么考，主要手算模拟即可\n\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\n\n---\n\n排序算法的空间、时间复杂度\n\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\n\n\n\n5/31外部排序\n\n\n\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\n\nr<=K^h-1 ,树的结点最大的一层\n\n要归并的数据都是分块读入内存的\n\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\n\n\n\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\n\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\n\n\n\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\n\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\n\n##### 6/2 结尾\n\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\n\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\n\n考查手算模拟即可\n\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\n\n---\n\n**置换选择排序：**减少初始归并段的个数\n\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\n\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\n\n\n\n---\n\n**最佳归并树**\n\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\n\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\n\nk叉最佳归并树：\n\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\n\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\n\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\n\n---\n\n<h3>**各种排序算法的性质总结**</h3>\n\n\n\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\n\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\n\n\n\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\n\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\n\n---\n\n### 8/1 算法题\n\n数组题解题框架：\n\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\n\n\n\n\n\n\n\n\n\n\n\n',1,NULL,1,0,1,'2022-08-30 12:49:58','2022-09-04 09:15:25'),
(60,1,203,'http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg','手译-A game that helps us understand loneliness','### 【TED演讲手译】4.15~4.20 A game that helps us understand loneliness\n![image233](http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg)\n\n#### 4/15\n\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\n\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\n\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\n\n----\n\n\n\n00:35\n\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\n\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\n\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\n\n---\n\n#### 4/16\n\n01:09\n\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\n\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\n\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\n\n---\n\n02:37\n\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\n\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\n\n\n\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\n\n---\n\n03:08\n\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\n\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\n\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\n\n---\n\n03:42\n\nSo, in our game -- we called it \"Sea of Solitude\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\n\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\n\n\n\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\n\n---\n\n#### 4/18\n\n04:58\n\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\n\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\n\n\n\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\n\n---\n\n05:44\n\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\n\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\n\n\n\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\n\n---\n\n06:13\n\n#### 4/19\n\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\n\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\n\n\n\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\n\n---\n\n06:51\n\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\n\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\n\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\n\n---\n\n07:07\n\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\n\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\n\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\n\n---\n\n08:37\n\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\n\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\n\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\n\n---\n\n09:17\n\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\n\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\n\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\n\n---\n\n#### 4/20\n\n09:36\n\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\n\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\n\n\n\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\n\n---\n\n10:05\n\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\n\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\n\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\n\n---\n\n11:19\n\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\n\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\n\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\n\n---\n\n11:44\n\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\n\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\n\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\n\n---\n\n12:26\n\nThank you.\n\n谢谢 :D\n\n> 谢谢',3,'',0,0,1,'2022-08-30 13:01:01','2022-08-30 13:29:34'),
(61,1,205,'http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png','计算机网络笔记','###### 2022/3/13\n\n计算机网络就是一些互联的、自治的计算机系统的集合\n\n三类观点\n\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\n\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\n\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\n\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\n\n**最基本和最重要的功能：数据通信**\n\n---\n\n计算机网络的各种分类：\n\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\n\n**传输技术分类：**1、广播式网络 2、点对点网络\n\n**拓扑结构分类：**拓扑结构只要取决于通信子网\n\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\n\n使用者分类：公用网/专用网\n\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\n\n传输介质分类：有线类/无线类\n\n---\n\n**计网性能指标(需理解的)**：\n\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\n\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \n\n3、时延带宽积：=传播时延 X 信道宽度\n\n描述数据量，此时此刻的数据容量\n\n4、往返时延RTT\n\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\n\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\n\n6、速率：比特在信道上跑的速度\n\n7、信道利用率\n\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\n\n![image-20220326145029611](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220326145029611.png)\n\n###### 3/27\n\n分层：上层使用下层的服务\n\n1、各层之间相互独立\n\n2、每层之间的界面自然清晰\n\n3、结构上可分割开\n\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\n\n5、整个分层结构能促进标准化工作\n\n\n\n###### 4/10\n\n第二章 物理层\n\n编码和调制的方式：![image-20220410200234421](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410200234421.png)\n\n![image-20220410200555847](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410200555847.png)\n\n\n\n![image-20220410174726310](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410174726310.png)\n\n电路交换的优点																缺点\n\n![image-20220410175551747](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410175551747.png)\n\n报文交换的优点																缺点\n\n![image-20220410180148943](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410180148943.png)\n\n分组交换的优点																缺点\n\n![image-20220410181910065](C:\\Users\\kai\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220410181910065.png)\n\n计算题总结：\n\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\n\n则每个码元携带log x比特信息\n\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\n\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\n\n4.有效离散值个数x\n\n数据传输率 = 波特率B*log x\n\n从而可推出x\n\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\n\n###### 4/11\n\n![image-20220411165713593](D:\\jpgpng\\2022\\typora\\image-20220411165713593.png)\n\n**中继器**：五四三规则\n\n![image-20220414155503235](D:\\jpgpng\\2022\\typora\\image-20220414155503235.png)\n\n分组交换的两种方式的差别\n\n### 4/26\n\nCRC、fcs\n\n![image-20220426120703383](D:\\jpgpng\\2022\\typora\\image-20220426120703383.png)\n\n海明校验码：已记录在笔记本上\n\n![image-20220426155453399](D:\\jpgpng\\2022\\typora\\image-20220426155453399.png)\n\n滑动窗口可以解决流量控制和可靠传输的\n\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\n\n![image-20220426162008770](D:\\jpgpng\\2022\\typora\\image-20220426162008770.png)\n\n可靠不可靠的层的区分\n\n##### 计算循环冗余码：\n\n1、加0：假设生成多项式的阶为r,则加r个0\n\n如10011的阶为4，多项式为N位，则阶为N-1\n\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\n\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\n\n###### 4/29\n\nGBN:\n\n![image-20220429164818170](D:\\jpgpng\\2022\\typora\\image-20220429164818170.png)\n\n---\n\n介质访问控制\n\n![image-20220430173043452](D:\\jpgpng\\2022\\typora\\image-20220430173043452.png)\n\n\n\n##### 5/3~\n\nCSMA协议分为3种：\n\n1-坚持CSMA\n\n非坚持CSMA\n\np-坚持CSMA（较优）\n\n---\n\nPPP协议\n\n![image-20220512192023907](D:\\jpgpng\\2022\\typora\\image-20220512192023907.png)\n\nPPP/HDLC异同\n\n![image-20220512193909179](D:\\jpgpng\\2022\\typora\\image-20220512193909179.png)\n\n---\n\n###### 3.6选择题\n\n![image-20220513200509279](D:\\jpgpng\\2022\\typora\\image-20220513200509279.png)\n\n问某某设备功能的题目解决方案：\n\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\n\n\n\n![image-20220513202718952](D:\\jpgpng\\2022\\typora\\image-20220513202718952.png)\n\n总结各层设备的特点以及冲突域广播域的分割\n\n\n\n![image-20220513205445377](D:\\jpgpng\\2022\\typora\\image-20220513205445377.png)\n\nOSI参考模型中的数据链路层分为以下两个子层：\n\nMAC子层：数据封装与解封装\n\nLLC子层：给帧加序号\n\n\n\n###### 3.7习题\n\n3.集中控制式 **分布控制式**\n\n![image-20220515205146940](D:\\jpgpng\\2022\\typora\\image-20220515205146940.png)\n\n\n\nPPP、HDLC协议\n\n![image-20220517170134008](D:\\jpgpng\\2022\\typora\\image-20220517170134008.png)\n\n\n\n3.8\n\n![image-20220517173054196](D:\\jpgpng\\2022\\typora\\image-20220517173054196.png)\n\n\n\n![image-20220517173537031](D:\\jpgpng\\2022\\typora\\image-20220517173537031.png)\n\n\n\n\n\n\n\n\n\n网桥\n\n![image-20220515210938702](D:\\jpgpng\\2022\\typora\\image-20220515210938702.png)\n\n又分为透明网桥以及**源路由网桥**\n\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\n\n###### 冲突域与广播域的考点\n\n![image-20220515213814436](D:\\jpgpng\\2022\\typora\\image-20220515213814436.png)\n\n（背）\n\n![image-20220521144927118](D:\\jpgpng\\2022\\typora\\image-20220521144927118.png)\n\n（王道书上的）\n\n一个网段就是一个冲突域\n\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\n\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\n\n路由器：遇到广播信号不转发形成广播域\n\n---\n\n\n\n### 5.21 网络层\n\n![image-20220521145846315](D:\\jpgpng\\2022\\typora\\image-20220521145846315.png)\n\n网络层功能\n\n![image-20220521150450769](D:\\jpgpng\\2022\\typora\\image-20220521150450769.png)\n\n路由算法\n\n![image-20220522161302439](D:\\jpgpng\\2022\\typora\\image-20220522161302439.png)\n\n\n\n---\n\n\n\n\n\nAS概念\n\n![image-20220521151931138](D:\\jpgpng\\2022\\typora\\image-20220521151931138.png)\n\n内部使用的协议外部看不到\n\n![image-20220521152221640](D:\\jpgpng\\2022\\typora\\image-20220521152221640.png)\n\n路由选择协议，内部IGP 外部EGP\n\n---\n\nSDN\n\n每路由器法\n\n![image-20220521153045039](D:\\jpgpng\\2022\\typora\\image-20220521153045039.png)\n\n![image-20220521153529671](D:\\jpgpng\\2022\\typora\\image-20220521153529671.png)\n\n![image-20220521155328285](D:\\jpgpng\\2022\\typora\\image-20220521155328285.png)\n\nSDN控制器的三个层次：网络范围状态管理层、通信层....\n\n![image-20220521155701758](D:\\jpgpng\\2022\\typora\\image-20220521155701758.png)\n\n\n\n![image-20220521154751935](D:\\jpgpng\\2022\\typora\\image-20220521154751935.png)\n\nSDN总结\n\n\n\n---\n\n\n\n###### 各个层次的协议总结：\n\n![image-20220522164627690](D:\\jpgpng\\2022\\typora\\image-20220522164627690.png)\n\n---\n\n\n\nIP数据报的格式\n\n![image-20220522170527291](D:\\jpgpng\\2022\\typora\\image-20220522170527291.png)\n\n源IP地址和目的IP地址：32位\n\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\n\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\n\n总长度：首部的部分+数据部分  2^16 -1\n\n各协议所对应的字段值： 如UDP-17（不建议连接\n\n![image-20220522171238690](D:\\jpgpng\\2022\\typora\\image-20220522171238690.png)\n\n \n\n###### 5/24 \n\n\"坏消息传的慢\"\n\n![image-20220524145342845](D:\\jpgpng\\2022\\typora\\image-20220524145342845.png)\n\nRIP协议\n\n![image-20220524145739184](D:\\jpgpng\\2022\\typora\\image-20220524145739184.png)\n\n\n\nOSPF：\n\n![image-20220524153053725](D:\\jpgpng\\2022\\typora\\image-20220524153053725.png)\n\n\n\n---\n\n![image-20220524165003184](D:\\jpgpng\\2022\\typora\\image-20220524165003184.png)\n\n**算法分类**\n\n###### 5/26 \n\n**IP数据报格式以及分片/片偏移**\n\n![image-20220526200301772](D:\\jpgpng\\2022\\typora\\image-20220526200301772.png)\n\n\n\n对应的总/片/首长度单位：“一种八片的手势”\n\n![image-20220526201234783](D:\\jpgpng\\2022\\typora\\image-20220526201234783.png)\n\n\n\n私有IP地址：IP地址的分类\n\n![image-20220526203338021](D:\\jpgpng\\2022\\typora\\image-20220526203338021.png)\n\n\n\n![image-20220526203626818](D:\\jpgpng\\2022\\typora\\image-20220526203626818.png)\n\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\n>\n> **广播**地址：主机号全1\n>\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\n>\n\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\n\n**Practice:**\n\n![image-20220528145909542](D:\\jpgpng\\2022\\typora\\image-20220528145909542.png)\n\n\n\n![image-20220528150734140](D:\\jpgpng\\2022\\typora\\image-20220528150734140.png)\n\n是否作为源地址？目的地址？\n\n小结\n\n![image-20220528151523517](D:\\jpgpng\\2022\\typora\\image-20220528151523517.png)\n\n\n\n---\n\n5/27\n\n子网掩码划分\n\n![image-20220527192726514](D:\\jpgpng\\2022\\typora\\image-20220527192726514.png)\n\n点分十进制，子网掩码：255.255.0.0\n\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\n\n\n\n![image-20220527200329979](D:\\jpgpng\\2022\\typora\\image-20220527200329979.png)\n\n超网\n\n网络层提供的两种服务：\n\n![image-20220528115835171](D:\\jpgpng\\2022\\typora\\image-20220528115835171.png)\n\n###### 5/28划分子网IPv4地址\n\n划分子网的过程：\n\n![image-20220528153733212](D:\\jpgpng\\2022\\typora\\image-20220528153733212.png)\n\n从主机位借用1个比特作为子网号，划分成了2个子网\n\n**默认子网掩码：**\n\nA类：8位网络号 24位主机号：255.0.0.0\n\nB类：16位~ ：255.255.0.0\n\nC类：24位~：255.255.255.0\n\n小结\n\n![image-20220528155810385](D:\\jpgpng\\2022\\typora\\image-20220528155810385.png)\n\n\n\n###### 5/30\n\nCIDR相关计算\n\n![image-20220530113748646](D:\\jpgpng\\2022\\typora\\image-20220530113748646.png)\n\n\n\n![image-20220530115327838](D:\\jpgpng\\2022\\typora\\image-20220530115327838.png)\n\n**找共同前缀，然后剩余13个比特全部取0**\n\n![image-20220530115459321](D:\\jpgpng\\2022\\typora\\image-20220530115459321.png)\n\n---\n\n\n\n![image-20220530121115278](D:\\jpgpng\\2022\\typora\\image-20220530121115278.png)\n\ntry 例题\n\n![image-20220530145820144](D:\\jpgpng\\2022\\typora\\image-20220530145820144.png)![image-20220530145820055](D:\\jpgpng\\2022\\typora\\image-20220530145820055.png)\n\n---\n\nARP协议：解决下一跳走哪的问题\n\n![image-20220530152954244](D:\\jpgpng\\2022\\typora\\image-20220530152954244.png)\n\n\n\n**ICMP协议**\n\n\n\n5种差错报告报文![image-20220531202035262](D:\\jpgpng\\2022\\typora\\image-20220531202035262.png)\n\n不应发送差错报文的情况（可能在选择题里考）\n\n![image-20220531202416345](D:\\jpgpng\\2022\\typora\\image-20220531202416345.png)\n\n\n\n###### 4.3.5\n\n01：各个协议在各个层次的分布，C选项中均在网络层\n\n![image-20220530154801554](D:\\jpgpng\\2022\\typora\\image-20220530154801554.png)\n\n\n\n04：IP分组中的检验字段都只检验首部\n\n![image-20220531205032699](D:\\jpgpng\\2022\\typora\\image-20220531205032699.png)\n\n\n\n14：环路地址分辨\n\n![image-20220531210024179](D:\\jpgpng\\2022\\typora\\image-20220531210024179.png)\n\n\n\n20：\n\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\n\n内部网络地址0~255，A/B/C类地址\n\n\n\n\n\n\n\n\n\n##### 6/9  IPv6 \n\n\n\n![image-20220609203542315](D:\\jpgpng\\2022\\typora\\image-20220609203542315.png)\n\n源地址和目的地址都是128位\n\n**IPv6和v4的区别：**\n\n![image-20220609204231454](D:\\jpgpng\\2022\\typora\\image-20220609204231454.png)\n\nipv6没有提供校验和字段，首部长度固定的\n\n**QoS简介**\n\n![image-20220609210332500](D:\\jpgpng\\2022\\typora\\image-20220609210332500.png)\n\n\n\n##### 6/10 RIP、OSPF、BGP\n\n**RIP协议**\n\n![image-20220610194501157](D:\\jpgpng\\2022\\typora\\image-20220610194501157.png)\n\n\n\n![image-20220610181233743](D:\\jpgpng\\2022\\typora\\image-20220610181233743.png)\n\nRIP协议“好消息传得快，坏消息传的慢”\n\n---\n\n**OSPF**(网络层协议)\n\n![image-20220610193835557](D:\\jpgpng\\2022\\typora\\image-20220610193835557.png)\n\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\n\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\n\n其他特点\n\n![image-20220610194256116](D:\\jpgpng\\2022\\typora\\image-20220610194256116.png)\n\n---\n\n**BGP协议**\n\n![image-20220610195450908](D:\\jpgpng\\2022\\typora\\image-20220610195450908.png)\n\n只需知道BGP协议交换的信息包含的是什么内容就可以了\n\n特点\n\n![image-20220610200158672](D:\\jpgpng\\2022\\typora\\image-20220610200158672.png)\n\n四种报文\n\n![image-20220610200227378](D:\\jpgpng\\2022\\typora\\image-20220610200227378.png)\n\n\n\nBGP/OSPF/RIP协议所对应的不同报文:\n\n![image-20220610200532615](D:\\jpgpng\\2022\\typora\\image-20220610200532615.png)\n\n![image-20220610200852427](D:\\jpgpng\\2022\\typora\\image-20220610200852427.png)\n\n\n\n\n\n###### 4.5.6\n\n01:\n\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\n\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\n\n\n\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\n\n\n\n08：RIP 、OSPF协议的差别\n\n![image-20220612111001610](D:\\jpgpng\\2022\\typora\\image-20220612111001610.png)\n\n\n\n09：OSPF的分组类型\n\n![image-20220612111213495](D:\\jpgpng\\2022\\typora\\image-20220612111213495.png)\n\n\n\n15：真题\n\n![image-20220614104318801](D:\\jpgpng\\2022\\typora\\image-20220614104318801.png)\n\n\n\n---\n\n\n\n##### 6/10 IP组播、IP分组\n\n\n\n**IP数据报的三种传输方式**\n\n![image-20220612114900045](D:\\jpgpng\\2022\\typora\\image-20220612114900045.png)\n\n\n\n组播\n\n![image-20220612115806806](D:\\jpgpng\\2022\\typora\\image-20220612115806806.png)\n\n\n\n![image-20220612120538681](D:\\jpgpng\\2022\\typora\\image-20220612120538681.png)\n\n可能会考察IP地址和MAC地址进行一个映射\n\nIGMP、ICMP\n\n![image-20220612120922369](D:\\jpgpng\\2022\\typora\\image-20220612120922369.png)\n\n![image-20220612121149516](D:\\jpgpng\\2022\\typora\\image-20220612121149516.png)\n\n\n\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\n\n![image-20220612121739087](D:\\jpgpng\\2022\\typora\\image-20220612121739087.png)\n\n组播的分类：\n\n![image-20220614110246790](D:\\jpgpng\\2022\\typora\\image-20220614110246790.png)\n\n\n\n---\n\n移动IP\n\n相关概念\n\n![image-20220612122301568](D:\\jpgpng\\2022\\typora\\image-20220612122301568.png)\n\n**具体步骤：** \n\n![image-20220612122751908](D:\\jpgpng\\2022\\typora\\image-20220612122751908.png)\n\n---\n\n\n\n###### 4.6.4\n\n01：仿真：时延更长\n\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\n\n![image-20220614105107539](D:\\jpgpng\\2022\\typora\\image-20220614105107539.png)\n\n03：\n\n![image-20220614110057987](D:\\jpgpng\\2022\\typora\\image-20220614110057987.png)\n\n\n\n\n\n###### 4.7.3\n\n02：\n\n![image-20220614112543930](D:\\jpgpng\\2022\\typora\\image-20220614112543930.png)\n\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\n\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\n\n\n\n#### 6/14 网络层结尾\n\n网络层设备\n\n![image-20220614115326374](D:\\jpgpng\\2022\\typora\\image-20220614115326374.png)\n\n\n\n![image-20220614115240655](D:\\jpgpng\\2022\\typora\\image-20220614115240655.png)\n\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\n\n![image-20220614115540438](D:\\jpgpng\\2022\\typora\\image-20220614115540438.png)\n\n默认路由：相当于场内求助\n\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\n\n路由转发、路由表：\n\n![image-20220614120034513](D:\\jpgpng\\2022\\typora\\image-20220614120034513.png)\n\n---\n\n<font size=\"6\">总结</font>\n\n![image-20220614121344471](D:\\jpgpng\\2022\\typora\\image-20220614121344471.png)\n\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \n\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\n\n**重要协议**\n\n![image-20220614120815416](D:\\jpgpng\\2022\\typora\\image-20220614120815416.png)\n\n\n\n**路由算法：**\n\n![image-20220614120947577](D:\\jpgpng\\2022\\typora\\image-20220614120947577.png)\n\nIPv4\n\n![image-20220614121053027](D:\\jpgpng\\2022\\typora\\image-20220614121053027.png)\n\nNAT:私有共有地址的转换\n\n分片：链路可接受最大传输单元：MTU\n\n\n\n---\n\n4.8.4\n\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\n\n![image-20220616152431580](D:\\jpgpng\\2022\\typora\\image-20220616152431580.png)\n\n\n\n05：路由表一般仅包含从目的网络到下一跳的IP地址\n\n\n\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\n\n![image-20220616152738634](D:\\jpgpng\\2022\\typora\\image-20220616152738634.png)\n\n\n\n08：\n\n![image-20220616153250741](D:\\jpgpng\\2022\\typora\\image-20220616153250741.png)\n\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\n\n分组转发组成：交换结构、输入端口、输出端口\n\n14：\n\n路由器尽最大努力交付，但不确保\n\n![image-20220616154821062](D:\\jpgpng\\2022\\typora\\image-20220616154821062.png)\n\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\n\n![image-20220616154721728](D:\\jpgpng\\2022\\typora\\image-20220616154721728.png)\n\n---\n\n###### 6/16 总结\n\n1.“尽最大努力交付”有哪些含义?\n\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\n\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\n\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\n\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\n\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\n\n​	但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\n\n​	现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\n\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\n\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\n\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\n\n---\n\n### **传输层**\n\n![image-20220616162138785](D:\\jpgpng\\2022\\typora\\image-20220616162138785.png)\n\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\n\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\n\n![image-20220616162727518](D:\\jpgpng\\2022\\typora\\image-20220616162727518.png)\n\n笔记：传输层的两大协议**：TCP和UDP的区别** \n\n![image-20220616163227947](D:\\jpgpng\\2022\\typora\\image-20220616163227947.png)\n\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\n\n---\n\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\n\n\n\n![image-20220616164253795](D:\\jpgpng\\2022\\typora\\image-20220616164253795.png)\n\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \n\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\n\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\n\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \n\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\n\n---\n\n\n\n![image-20220616164130771](D:\\jpgpng\\2022\\typora\\image-20220616164130771.png)\n\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\n\n---\n\n#### 5.1.4习题\n\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \n\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \n\n![image-20220621161048543](D:\\jpgpng\\2022\\typora\\image-20220621161048543.png)\n\n04：面向连接的服务：可靠性和按序到达 \n\n![image-20220621161657953](D:\\jpgpng\\2022\\typora\\image-20220621161657953.png)\n\n12：报文的头部长度问题\n\n![image-20220621162547501](D:\\jpgpng\\2022\\typora\\image-20220621162547501.png)\n\n\n\n\n\n\n\n---\n\n#### 6/17 UDP\n\n<h4>UDP的特点</h4>\n\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \n\n![image-20220617115928628](D:\\jpgpng\\2022\\typora\\image-20220617115928628.png)\n\n\n\n![image-20220617120318549](D:\\jpgpng\\2022\\typora\\image-20220617120318549.png)\n\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \n\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\n\n**UDP检验：** \n\n![image-20220617121008248](D:\\jpgpng\\2022\\typora\\image-20220617121008248.png)\n\n按2进制反码运算求和，将得出结果再求反码 \n\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\n\n---\n\n#### 5.2.3习题\n\n02：UDP数据报的长度不包含伪首部的长度\n\n【可选】当源主机不想计算校验和，则令该字段为0\n\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\n\nIP数据报的差别是只能找到目的主机而无法找到目的进程\n\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\n\n\n\n09:伪首部仅在校验和和计算期间建立，并不发送\n\n---\n\n#### 6/21 TCP\n\n<h3>TCP协议的特点</h3> \n\n![image-20220621183009893](D:\\jpgpng\\2022\\typora\\image-20220621183009893.png)\n\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\n\n<h4>TCP报文段首部格式</h4>\n\n![image-20220621184449953](D:\\jpgpng\\2022\\typora\\image-20220621184449953.png)\n\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\n\n\n\nURG 、 ACK 、  SYN、  FIN \n\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\n\n窗口：\n\n![image-20220621184322344](D:\\jpgpng\\2022\\typora\\image-20220621184322344.png)\n\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\n\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\n\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\n\n---\n\n\n\n#### 6/23 TCP连接\n\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\n\n<font color = \"red\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \n\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\n\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \n\n![image-20220623175221485](D:\\jpgpng\\2022\\typora\\image-20220623175221485.png)\n\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\n\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\n\nACK:last_quarter_moon_with_face: 期待的下一个信号\n\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\n\n\n\n![image-20220623175024670](D:\\jpgpng\\2022\\typora\\image-20220623175024670.png)\n\nFIN:结束位 只要是请求释放连接，FIN一定置为1\n\n四次握手就是断开或者说结束连接时需要的几个步骤。\n\n<font color = \"red\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \n\n---\n\n6/24 \n\n<h4>TCP可靠传输</h4>\n\n校验、序号、确认、重传\n\n确认：保证可靠传输，接收方要返回一个确认报文段。 \n\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\n\n\n\n冗余ACK：多余的、重复的报文段 \n\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\n\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\n\n---\n\n<h3>TCP流量控制</h3>\n\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\n\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \n\n![image-20220624171804134](D:\\jpgpng\\2022\\typora\\image-20220624171804134.png)\n\n接收窗口(动态的调整)：rwnd	拥塞窗口：cwnd		\n\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\n\n\n\n![image-20220624171723184](D:\\jpgpng\\2022\\typora\\image-20220624171723184.png)\n\n持续计时器\n\n---\n\n#### 6/24 TCP流量控制 \n\n<h3>TCP拥塞控制</h3>\n\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \n\n![image-20220624172758430](D:\\jpgpng\\2022\\typora\\image-20220624172758430.png)\n\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\n\n\n\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \n\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\n\n![image-20220624173503511](D:\\jpgpng\\2022\\typora\\image-20220624173503511.png)\n\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\n\n<h4>慢开始和拥塞避免</h4>\n\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \n\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\n\n![image-20220624174558650](D:\\jpgpng\\2022\\typora\\image-20220624174558650.png)\n\n往返时延单位：RTT\n\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\n\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \n\n---\n\n<h4>快重传和快恢复</h4>\n\n只要收到三个重复的确认之后， 就会执行快重传算法\n\n快速的执行这样一个重传的过程 省下了很多等待的时间 \n\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\n\n![image-20220624175442774](D:\\jpgpng\\2022\\typora\\image-20220624175442774.png)\n\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\n\n---\n\n### 应用层\n\n#### 6/28 模型、DNS\n\n概述\n\n![image-20220628150804221](D:\\jpgpng\\2022\\typora\\image-20220628150804221.png)\n\n应用层功能和重要协议：\n\n![image-20220628151033867](D:\\jpgpng\\2022\\typora\\image-20220628151033867.png)\n\n\n\n网络应用模型：客户/服务器模型（C/S） 主从式\n\nP2P模型	对等式 \n\nC/S 模型：\n\n![image-20220628151540247](D:\\jpgpng\\2022\\typora\\image-20220628151540247.png)\n\n\n\nP2P模型\n\n![image-20220628151857973](D:\\jpgpng\\2022\\typora\\image-20220628151857973.png)\n\n\n\n6.1.3\n\n01：集中式：集中在一台计算机上，分布式：多台计算机 \n\n![image-20220628154113079](D:\\jpgpng\\2022\\typora\\image-20220628154113079.png)\n\n\n\n05：客户机：面向任务的	服务器：面向客户的\n\n---\n\n<h3>DNS </h3>\n\n域名组成：顶级域名、二级域名、三级域名...\n\n![image-20220628155712157](D:\\jpgpng\\2022\\typora\\image-20220628155712157.png)\n\n\n\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \n\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \n\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\n\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\n\n![image-20220628160921546](D:\\jpgpng\\2022\\typora\\image-20220628160921546.png)\n\nabc.org与 y.abc.org是对等关系\n\n\n\n域名解析过程\n\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \n\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\n\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \n\n\n\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\n\n##### 6.2.4\n\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\n\n  1个以太网卡：一个IP地址	  单个DNS~对应多个主机/多个MAC地址/多个ip\n\n 对这些都没有一一对应的关系\n\n02：Internet访问主机一定要有IP地址\n\n08：选C的原因\n\n![image-20220701160815319](D:\\jpgpng\\2022\\typora\\image-20220701160815319.png)\n\n10：\n\n\n\n\n\n\n\n---\n\n#### 6/29 传输层协议FTP\n\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\n\n FTP 它是使用TCP来实现可靠传输的\n\n![image-20220629180558599](D:\\jpgpng\\2022\\typora\\image-20220629180558599.png)\n\n\n\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\n\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\n\n文本模式（ASCII）、二进制模式	\n\n![image-20220629181142601](D:\\jpgpng\\2022\\typora\\image-20220629181142601.png)\n\n##### 6.3.3\n\n07:FTP的功能：![image-20220701164617822](D:\\jpgpng\\2022\\typora\\image-20220701164617822.png)\n\n08：封装的过程：自上而下	\n\n数据 数据段	数据报	数据帧	比特\n\n---\n\n#### 7/1 电子邮件:e-mail:\n\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\n\n使用C/S模式	\n\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\n\n![image-20220701170014788](D:\\jpgpng\\2022\\typora\\image-20220701170014788.png)\n\n\n\n<h3>SMTP</h3>\n\n![image-20220701170322680](D:\\jpgpng\\2022\\typora\\image-20220701170322680.png)\n\n\n\nSMTP的缺点：\n\n ![image-20220701170907231](D:\\jpgpng\\2022\\typora\\image-20220701170907231.png)\n\n扩充手段MINE:	使电子邮件系统支持声音、图像....\n\n\n\n<h4>POP3协议 </h4>\n\n端口号、TCP、C/S \n\n![image-20220701171059568](D:\\jpgpng\\2022\\typora\\image-20220701171059568.png)\n\n\n\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\n\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\n\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\n\n![image-20220701171618095](D:\\jpgpng\\2022\\typora\\image-20220701171618095.png)\n\n##### 6.4.4\n\n07：\n\n![image-20220701174409155](D:\\jpgpng\\2022\\typora\\image-20220701174409155.png)\n\n---\n\n#### 7/2 结尾：万维网和HTTP协议\n\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\n\n统一资源定位符URL 它是可以唯一标识每一个资源的\n\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \n\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\n\n![image-20220702162918872](D:\\jpgpng\\2022\\typora\\image-20220702162918872.png)\n\n\n\nHTTP工作流程：\n\n![image-20220702163328133](D:\\jpgpng\\2022\\typora\\image-20220702163328133.png)\n\n\n\n<h3>HTTP 协议的特点	</h3>\n\n 它采用TCP作为运输层的协议 是一种面向连接的\n\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\n\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） 	那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \n\n![image-20220702164017763](D:\\jpgpng\\2022\\typora\\image-20220702164017763.png)\n\n\n\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\n\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议	\n\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\n\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\n\n---\n\nHTTP——报文结构\n\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \n\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\n\n![image-20220702165432365](D:\\jpgpng\\2022\\typora\\image-20220702165432365.png)\n\n请求报文和响应报文\n\n![image-20220702165833550](D:\\jpgpng\\2022\\typora\\image-20220702165833550.png)\n\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\n\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\n\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \n\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\n\n 5打头表示的就是服务器的差错\n\n---\n\n<H2>总结 </H2>\n\n**常用应用层协议小结：** \n\n![image-20220702171327778](D:\\jpgpng\\2022\\typora\\image-20220702171327778.png)\n\n![image-20220702173120051](D:\\jpgpng\\2022\\typora\\image-20220702173120051.png)\n\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \n\n持久性/非持久性连接：考点重点，易考到：\n\n![image-20220702180809063](D:\\jpgpng\\2022\\typora\\image-20220702180809063.png)\n\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \n\n![image-20220702170248777](D:\\jpgpng\\2022\\typora\\image-20220702170248777.png)\n\n---\n\n##### 6.5.3\n\n01：FTP：文件传输协议，可靠性高，实时性要求低\n\n![image-20220702173738805](D:\\jpgpng\\2022\\typora\\image-20220702173738805.png)\n\n\n\n07：\n\n![image-20220702174726133](D:\\jpgpng\\2022\\typora\\image-20220702174726133.png)\n\n\n\n10：\n\n根据传输对象来确定传输所需时间\n\n**持久性连接流水线：**\n\n![image-20220702180422679](D:\\jpgpng\\2022\\typora\\image-20220702180422679.png)\n\n\n\n非流水线：\n\n![image-20220702180616509](D:\\jpgpng\\2022\\typora\\image-20220702180616509.png)\n\n---\n\n#### 7/31 \n\n<h3> 选择题小题每章重点</h3>\n\n第一章\n\n![image-20220731141406536](D:\\jpgpng\\2022\\typora\\image-20220731141406536.png)\n\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\n\n\n\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组	能否隔离... \n\n![image-20220731142248353](D:\\jpgpng\\2022\\typora\\image-20220731142248353.png)\n\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA	\n\n![image-20220731142707141](D:\\jpgpng\\2022\\typora\\image-20220731142707141.png)\n\n\n\n第四章：路由聚合：取交集\nCDN新增\n![image-20220731143027256](D:\\jpgpng\\2022\\typora\\image-20220731143027256.png)\n\n第五章：TCP/UDP\n![image-20220731143305487](D:\\jpgpng\\2022\\typora\\image-20220731143305487.png)\n\n第六章：难点：WWW+HTTP\n\nDNS域名解析	\n![image-20220731143645217](D:\\jpgpng\\2022\\typora\\image-20220731143645217.png)\n\n\n\n<h3>计网大题重点</h3>\n\n![image-20220731144324262](D:\\jpgpng\\2022\\typora\\image-20220731144324262.png)\n\n路由协议，子网划分：BGP/OSPF/RIP跳数\n\n数据交换的分组交换方式：虚电路：面向连接\n\n中继器和集线器的差别：端口的个数 \n\nIPv4：重中之重 ABCDE五类地址	\n\nARP：IP转MAC地址	DHCP：动态ip地址的划分，回收	ICMP：差错、控制报文（可不可达...）	\n\n应用层：HTTP与TCP的关系	\n\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \n\n![image-20220731152658875](http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png)\n\n\n\nIP地址解析过程：\n\n![image-20220731172153990](D:\\jpgpng\\2022\\typora\\image-20220731172153990.png)\n\n\n\n',1,NULL,0,0,1,'2022-08-30 18:49:23','2022-08-30 21:29:01'),
(62,1,194,'http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png','一些408中常用的算法[持续更新ing...]','<font size=5>首先呢\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\n\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\n\n</font>\n正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)\n\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\n\n```c++\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\n   if (L>=R) return;             //当前区间元素个数<=1则退出\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\n   key=A[L];                    //key作为枢值参与比较\n   while (i<j){\n      while (i<j && A[j]>key)\n          j--;\n      while (i<j && A[i]<=key)\n          i++;\n      if (i<j)\n          swap(A[i], A[j]);      //交换A[i]和A[j]\n   }\n   swap(A[L], A[i]);\n   Qsort(A, L, i-1);         //递归处理左区间\n   Qsort(A, i+1, R);          //递归处理右区间\n      }\nvoid ans(int A[], B[], n){\n   for (int i=0; i<n; i++){\n      C[i]=A[i];\n      C[n+i]=B[i];\n   }\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\n   cout<<C[n-1];                //输出C[n-1]\n}\n```\n\n---\n\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\n\n**因此，==折半查找==也应运而生惹！\n下面就附上详细算法~**\n\n```mysql\nint Binary_Search(int A[], L, R, x){\n   int mid;\n   while (L<R){                     //如果L>R则范围错误\n      mid=(L+R)/2;                 //mid取中间数，向下取整\n      if (x<=A[mid]) R=mid;\n          else L=mid+1;             //更新查找范围\n   }\n   return L;                       //查找到位置，返回数组下标L\n}\n```\n<font size=4>\n这种算法的时间复杂度：O(n),	空间复杂度O(1)\n</font>\n---\n\n',1,'',1,0,1,'2022-08-30 21:37:31','2022-09-04 09:15:01'),
(63,1,187,'http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg','2022-09-02 一篇测试','MITT\n',1,'',0,0,1,'2022-09-02 10:30:59','2022-09-02 10:32:05'),
(64,1,205,'http://121.89.232.237:83/articles/e40014c0556eb5f7c70e9c456399ee60.jpg','2022-09-14 计算机网络之数据链路层','数据链路层使用的信道\n\n   点对点信道：这种信道使用一对一的点对点通信方式\n    广播信道：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。\n\n一、使用点对点信道的数据链路层\n1.1. 数据链路和帧\n\n   链路(link)：是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。\n        一条链路只是一条通路的一个组成部分。\n    数据链路（data link）:除了物理线路外，还必须有通信协议来控制这些数据的传输。若把视线这些协议的硬件和软件加到链路上，就构成了数据链路。\n        现在最常用的方法是使用适配器（即网卡）来视线这些协议的硬件和软件。\n        一般的适配器都包括了数据链路层和物理层这两层的功能。\n    帧：数据链路层的分组称为帧，数据链路层传输的是帧。\n\n1.2. 3个基本问题\n\n    1.封装成帧\n        **封装成帧（framing）**就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。\n        首部和尾部的一个重要作用就是进行帧定界\n        MTU:数据链路层的帧长，一般数据链路层的帧长是要小于等于MTU的\n        当数据是由可打印的ASCII码组成的文本文件时，帧定界可以使用特殊的帧定界符\n        控制字符SOH（start Of Header）放在一个帧的最前面，表示帧的首部开始。\n        控制字符EOT(start Of Transmission)表示帧的结束\n    2.透明传输\n        问题：如果数据中的某个字节的二进制代码恰好和SOH或EOT一样，数据链路层就会错误地找到帧的边界\n        解决方法：字节填充（byte stuffing）或字符填充（character stuffing）\n        发送端的数据链路层在数据中出现控制字符SOH或EOT的前面插入一个转义字符ESC（其十六进制编码是1B）\n        接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。\n        如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。\n    3.差错控制\n        在传输过程中可能也会产生**比特差错：**1可能会编程0而0也可能变成1\n        在一段时间内，传输错误地比特占所传输比特总数的比率称为误码率BER(Bit Error Rate)\n        误码率与信噪比有很大的关系，为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。\n        循环荣偶遇检测的原理\n            在数据链路层传送的帧中，广泛使用了循环冗余检测CRC的检错技术。\n            在发送端，先把数据划分为组。假定每组k个比特。\n            假设待传送的一组数据M=101001(现在k=6)。我们在M的后面再添加供差错检测用的n位冗余码一起发送。\n        冗余码计算\n            用二进制的模2运算进行2^n乘M的运算，这相当于在M后面添加n个0.\n            得到的（k+n）位的数除以事先选定好的长度为（n+1）位的除数P，得出商是Q二余数是R，余数R比除数P少1位，即R是n位。\n            将余数R作为冗余码拼接在数据M后面发送出去。\n        冗余码的计算实例\n            现在k = 6， M= 101001\n            设n = 3，除数P=1101\n            被除数是2^M=101001000。\n            模2运算的结果是：商Q=110101，\n                余数R = 001\n            把余数R作为冗余码添加在数据M的后面发送出去。发送的数据时：2^M + R\n            现在的数据：101001001，供（k+n）位\n        接受端对收到的每一帧进行CRC检测\n            1.若得到的余数R = 0，则判定这个帧没有差错，就接受（accept）\n            2.若余数R ≠ 0，则判定这个帧有差错，就丢弃\n            但这种检测方法并不能确定究竟是哪一个或那几个比特出现了差错。\n            只要经过严格的挑选，并使用位数足够多的除数P，那么出现检测不到的差错的概率就很小很小\n        应当注意\n            仅用循环冗余检测CRC差错检测技术只能做到无差错接受（accept）\n            无差错接受是指：：凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于1的概率任务这些帧在传输过程中没有产生差错\n            也就是说：凡是接受数据链路层接受的帧都没有阐述差错（由差错的帧就丢弃而不接受）\n            要做到可靠传输（即发送什么就收到什么）就必须再加上确认和重传机制\n            应当明确，无比特差错与无传输差错是不同的概念\n            在数据链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输\n\n二、点对点协议PPP\n2.1. PPP协议的特点\n\n    对于点对点的链路，目前使用得最广泛的数据链路层协议是点对点协议PPP（Point-to-Point Protocol）\n    例如用户使用拨号电话线接入互联网时，用户计算机和ISP进行通信时所使用的的数据链路层协议就是PPP协议。\n    PPP协议在1994年就已经成为互联网的正式标准\n    PPP协议应满足的需求\n        简单—— 这是首要的要求\n        封装成帧—— 必须固定特殊的字符作为帧定界符\n        透明性—— 必须保证数据传输的透明性\n        多种网络层协议—— 能够在同一条物理链路上同时支持多种网络层协议\n        多种类型链路—— 能够在多种类型的链路上运行\n        差错检测—— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧\n        检测连接状态—— 能够及时自动检测出链路是否处于正常工作状态\n        最大传送单元—— 必须对每一种类型的点对点链路设置最大传送单元MTU的默认标准值，促进各种实现的互操作性\n        网络层地址协商—— 必须提供一种机制使通信的两个网络层实体能够通过协商知道后能够配置彼此的网络层地址。\n        数据压缩协商—— 必须提供一种方法来协商使用数据压缩算法\n    PPP协议不需要的功能\n        纠错\n        流量控制\n        序号\n        多点线路\n        半双工或单工链路\n    PPP协议的组成\n        一个将IP数据报封装到串行链路的方法\n        链路控制协议LCP（Link Control Protocol）\n        网络控制协议NCP（Network Control Protocol）\n\n2.2. PPP协议的帧格式\n\n    PPP帧的首部和尾部分别为4个字段和2个字段\n        首部\n            标志字段F = 0x7E (符号0x表示后面的字符是用十六进制表示。十六进制的7E的二进制表示是01111110)（1字节）\n            地址字段A只置为0XFF。地址字段实际上并不起作用。（1字节）\n            控制字段C通常置为0x03（1字节）\n            PPP有一个2个字节的协议字段。其值\n                若为0x0021,则信息字段就是IP数据报\n                若为0x8021,则信息字段就是网络控制数据\n                若为0xC021,则信息字段是PPP链路控制数据\n                若为0xC023,则信息字段是鉴别数据\n        中间的IP数据报（信息部分），不超过1500字节\n        尾部\n            FSC两个字节（1字节）\n            标志字符F = 0x7E(1字节)\n\n2.3. PPP协议的工作状态\n\n    透明传输问题\n        当PPP用在同步传输链路时，协议规定采用硬件来完成比特填充（和HDLC的做法一样）\n        当PPP用在异步传输时，就使用一种特殊的字符填充法\n        字符填充\n            将信息字段中出现的每一个0x7E字节转变成为2字节序列（0x7D,0x5E）。\n            若信息字段中出现一个0x7D的字节，则将其转变为2字节序列（0x7D，0x5D）\n            若信息字段中出现的ASCII码的控制字符（即数值小于0x20的字符），则在该字符前面要加入一个0x7D字节，同时将该字符的编码加以改变。\n\n三、使用广播信道的数据链路层\n3.1. 局域网的数据链路层\n\n    局域网最主要的特点是：\n        网络为一个单位所拥有\n        地理范围和站点数目均有限。\n    局域网具有如下主要优点：\n        具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\n        便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变\n        提高了系统的可靠性、可用性和残用性\n    局域网拓扑结构\n        星形网（目前主要使用的方式）\n        总线网（已弃用）\n        环形网（已弃用）\n    媒体共享技术\n        静态划分信道\n            频分复用\n            时分复用\n            波分复用\n            码分复用\n        动态媒体接入控制（多点接入）\n            随机接入\n            受控接入，如多点线路探询（polling），或轮询。\n    以太网的两个标准\n        DIX Ethernet V2是世界上第一个局域网产品（以太网）的规约\n        IEEE802.3是第一个IEEE的以太网标准\n            IEEE802委员会将局域网的数据链路层拆成两个子层：\n                逻辑链路控制LLC（Logical Link Control）子层（基本不用）\n                媒体接入控制MAC（MEdium Access Control）子层\n    适配器的作用\n        网络接口板又称为通信适配器（adapter）或网络接口卡NIC（Network Interface Card），或网卡\n        适配器的重要功能：\n            进行串行/并行转换\n            对数据进行缓存\n            在计算机的操作系统安装设备驱动程序\n            实现以太网协议。\n\n3.2. CSMA/CD协议\n\n    最初的以太网是将许多计算机都连接到一根总线上。\n    为了通信的简便，以太网采用了两种重要的措施\n        1.采用灵活的无连接的工作方式\n            不必先建立连接就可以直接发送数据\n            对发送的数据帧不进行编号，也不要求对方发回确认\n        2.以太网发送的数据都**使用曼彻斯特（MAnchester）编码\n    CSMA/CD含义：载波监听多点接入/碰撞检测\n        多点接入表示许多计算机以多点接入的方式连接在一根总线上\n        载波监听是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，一面发生碰撞\n        碰撞检测就是计算机边发送数据边检测信道上的信号电压大小\n    CSMA/CD重要特性：使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）\n    二进制指数类型退避算法\n        发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能发送数据。\n            基本退避时间取为争用期2τ\n            从整数集合[0,1,……，（2^k-1））]中随机地取出一个数，即为r0.重传所需的时延就是r倍的基本退避时间。\n            参数k按下面的公式计算：\n            K = Min[重传次数，10]\n            当k<=10,参数k等于重传次数\n            当重传达16次扔不能成功即丢弃该帧，并向高层报告。\n    最短有效帧长\n        如果发生冲突，就一定是在发送的前64字节之内\n        由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于64字节\n        以太网规定了最短有效帧长为64字节，凡长度小于64字节的帧都是由于冲突而异常终止的无效帧。\n    强化碰撞\n        当发送数据的站一旦发现了碰撞时：\n            立即停止发送数据\n            再继续发送若干比特的人为干扰信号（jamming signal），以便让所用用户都知道现在已经发生了碰撞。\n    CSMA/CD协议的要点\n        先听再发\n        边听边法\n        冲突停止\n        延迟重发\n\n3.3. 以太网的信道利用率\n\n    多个站在以太网上同时工作就可能会发生碰撞\n    当发生碰撞时，信道资源实际上是被浪费了。因此，当扣除碰撞所造成的的信道损失后，以太网总的信道利用率并不能达到100%\n    要提高以太网的信道利用率，就必须减小τ与T0（TO:发送帧所需要的的时间）之比。\n    在以太网定义了参数α，他是以太网单程端到端实验τ与帧的发送时间T0之比：\n    α = τ / T0\n    α——>0,表示信道利用率很高\n    α越大，表明争用期所占的比例增大，信道利用率低。\n    为提高利用率，以太网的参数α的值应当尽可能小些。\n    对以太网参数α的要求是：\n        当数据率一定时，以太网的连线的长度受到限制（100m），否则τ的数值会太大\n        以太网的帧不能太短，否则T0的值会太小，使α的值太大。\n    信道利用率达到最大值Smax\n        Smax= T0(T0 + τ) = 1/（1+α）\n\n3.4. 以太网的MAC层\n\n    MAC层的硬件地址\n        在局域网中，硬件地址又称为物理地址，或MAC地址\n        48位MAC地址\n            前24位由IEEE的注册管理机构RA负责向厂家分配，作为组织唯一标识符\n            后24位由厂家自行指派，称为扩展唯一标识符\n    MAC帧的格式\n    目的地址：6字节\n    源地址：6字节\n    类型：2字节\n    IP数据报：46——1500字节\n    FSC（校验码）：4字节\n\n四、扩展的以太网\n4.1. 在物理层扩展以太网\n\n    使用光纤扩展\n    使用集线器扩展\n\n4.2. 在数据链路层扩展以太网\n\n    扩展以太网更常用的方法是在数据链路层进行\n    早期使用网桥，现在使用以太网交换机。\n    网桥：\n        工作在数据链路层。他根据MAC帧的目的地址对收到的帧进行转发和过滤。\n        当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或把他丢弃\n    交换机：交换机集线器常称为以太网交换机（switch）或第二层交换机，强调这种交换机工作在数据链路层\n        以太网交换机实质上就是一个多接口的网桥（通常都有十几个或更多的接口）。\n        每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在全双工方式\n        以太网交换机具有并行性（能同时联通多对接口，使多对主机能同时通信）\n        相互通信的主机都是独占传输媒体，无碰撞地传输数据\n        以太网交换机的接口有存储器，能在输出端口繁忙时把到来的帧进行缓存。\n        以太网交换机是一种即插即用设备，其内部的帧交换表（又称为地址表）是通过自学习算法自动地逐渐建立起来的。\n        以太网交换机使用了专门的交换结构芯片，用硬件转发，其转发速率要比使用软件转发的网桥快很多。\n    以太网交换机的优点\n        用户独享带宽，增加了总容量\n        从共享总线以太网转到交换机以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动。\n        以太网交换机一般都具有多种速率的接口，方便了各种不同的用户\n    以太网交换机的交换方式\n        存储转发方式\n            把这个数据帧先缓存后再进行处理。\n        直通（cut-through）方式\n            接受数据帧的同时就立即按数据帧的目的MAC地址决定该帧的转发接口，因而提高了帧的转发速度。\n            缺点是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站\n    以太网交换机的自学习功能\n        以太网交换机运行自学习算法自动维护交换表\n        开始时，以太网交换机里面的交换表是空的。\n        按照自学习算法处理收到的帧和建立交换表\n            A先向B发送一帧，从接口1进入交换机。\n            交换机收到帧后，先查找交换表，没有查到应从哪个接口转发这个帧\n            交换机把这个帧的源地址A和接口1写入交换表中，并向除接口1以外的所有接口广播这个帧\n            C和D将丢弃这个帧，因为目的地址不对。只B才收下这个目的地址正确的帧。这也称为过滤。\n            从新写入交换表（A，1）可以看出，以后不管从哪一个接口收到帧，只要其目的地址是A,就应当把收到的帧从接口1发送出去。\n            B通过接口3向A发送一帧。\n            交换机查找交换表，发现交换表中的MAC地址有A。表明要发送给A的帧（即目的地址为A的帧）应从接口1转发。于是就把这个帧传送到接口1转发给A。显然，现在已经没有必要再广播收到的帧。\n            交换表这时新增加的项目（B，3）,表明今后如有发送给B的帧，就应当从接口3转发出去。\n            经过一段时间后，只要主机C和D也向其他主机发送帧，以太网交换机的交换表就回吧转发到C或D应当经过的接口号（2或4）写入到交换表中。\n            考虑到可能有时要在交换机的接口更换主机，或者主机要更换网络适配器，这就需要更改交换表中的项目，为此在交换表中的每个项目都设有一定的有效时间。过期的项目就自动被删除\n    交换机自学习和转发帧的步骤\n        1.交换机收到一帧后先进行自学习。查找交换表中与收到帧的源地址有无相匹配的项目\n            如果没有，就在交换表中增加一个项目（源地址、进入的接口、有效时间）\n            如果有，则把原有的项目进行更新（接入的接口或有效时间）\n        2.转发帧。查找交换表中与收到帧的目的地址有无相匹配的项目\n            如果没有，则向所有其他接口（进入的接口除外）转发。\n            如果有，则按交换表中给出的接口进行转发。\n            若交换表中给出的接口就是该帧进入交换机的接口，则应丢弃这个帧（因为这时不需要经过交换机进行转发）\n    交换机使用了生成树协议\n        IEEE 802.1D标准制定了一个生成树协议STP（Span宁 Tree Prtocol）\n        其要点是：不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而笑出了兜圈子现象。\n\n4.3.虚拟局域网\n\n    利用以太网交换机可以很放标地实现虚拟局域网VLAN（Virtual LAN）\n    虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个VLAN\n    虚拟局域网其实只是局域网给用户提供的一种服务，而不是一种新型局域网。\n    由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。\n\n五、高速以太网\n5.1.100BASE-T以太网\n\n   速率达到或超过100Mbit/s的以太网称为告诉以太网\n    100BASE-T在双绞线上传送100Mbit/s系带信号的星型拓扑以太网，人使用IEEE802.3的CSMA/CD协议。\n\n5.2.吉比特以太网\n\n   允许在1Gbit/s下全双工和半双工两种方式工作。\n    使用IEEE802.3协议规定的帧格式\n    在半双工下使用CSMA/CD协议，全双工方式不适用CSMA/CD协议。\n\n',2,'https://blog.csdn.net/weixin_44861708/article/details/111875155',0,0,1,'2022-09-14 20:25:16','2022-09-14 20:26:53'),
(65,1,194,'http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg','数据结构','###### 3/8\r\n\r\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\r\n\r\n空间复杂度计算\r\n\r\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\r\n\r\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\r\n\r\nloga(M/N)=logaM - logaN\r\n\r\n###### 3/13\r\n\r\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\r\n\r\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\r\n\r\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\r\n\r\n###### 3/14\r\n\r\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\r\n\r\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\r\n\r\n最好情况：均在表尾插入/删除元素\r\n\r\n最坏：在表头插入、删除元素（移动次数多）\r\n\r\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\r\n\r\n动态存储\r\n\r\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\r\n\r\n顺序表“随机存取”存储方式的原因,	单链表不支持，只能从头结点开始找\r\n\r\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\r\n\r\n复杂度为O(1)\r\n\r\n```c\r\n\r\n//头插法 3/15\r\nvoid insertListHead(LinkList &l) {\r\n	l = (LinkList)malloc(sizeof(Node));\r\n    l->next =NULL; //可能有那啥的脏数据\r\n	Node* newNode;\r\n	int num;\r\n	while (scanf(\"%d\", &num) != EOF) {\r\n		newNode = (LinkList)malloc(sizeof(Node));\r\n		newNode->data = num;\r\n		newNode->next = l->next;\r\n		l->next = newNode;\r\n	}\r\n}\r\n\r\n//尾插法 3/15\r\nvoid insertListTail(LinkList& l) {\r\n	l = (LinkList)malloc(sizeof(Node));\r\n	Node* newNode;\r\n	Node* tmp =l;\r\n	int num;\r\n	while (scanf(\"%d\", &num) != EOF) {\r\n		newNode = (LinkList)malloc(sizeof(Node));\r\n		newNode->data = num;\r\n		tmp->next = newNode;\r\n		tmp = newNode; //tmp = tmp->next;\r\n	}\r\n    tmp->next =NULL;\r\n}\r\n\r\n```\r\n\r\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\r\n\r\n\r\n\r\n增删链表效率高于顺序表\r\n\r\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\r\n\r\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\r\n\r\n###### 3/18\r\n\r\n第一章：\r\n\r\n栈是一种逻辑结构，可以顺序存储也可链式存储\r\n\r\nP4:综合应用题：\r\n\r\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\r\n\r\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\r\n\r\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\r\n\r\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\r\n\r\n\r\n\r\nP18:综合应用题：\r\n\r\n01:\r\n\r\n```c++\r\nif(length<1){\r\n	return false;\r\n}\r\nElemtype del = data[length-1];\r\nElemtype tmp;\r\nint pos=0;\r\nfor(int i=0;i<length-1;i++){\r\n	tmp = data[i];\r\n	if(data[i]<tmp){\r\n		tmp = data[i];\r\n		pos++;\r\n	}\r\n}\r\n	data[pos] = del;\r\n	length--;\r\n\r\n	return true;\r\n```\r\n\r\n02:\r\n\r\n```bash\r\nvoid Reverse(Sqlist &l){\r\n	ElemType tmp;\r\n	int pos = l.length-1;\r\n	for(i=0;i<l.length/2;i++){\r\n		tmp = l.data[i];\r\n		l.data[i]= l.data[pos];\r\n		pos--;\r\n		l.data[pos] = tmp;\r\n	}\r\n}\r\n```\r\n\r\n\r\n\r\n错题总结：\r\n\r\nP17:\r\n\r\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\r\n\r\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\r\n\r\n08：线性表删除第i个元素移动n-i个元素即可\r\n\r\n###### 3/21\r\n\r\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\r\n\r\n栈的出栈顺序数量的计算：卡特兰数\r\n\r\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\r\n\r\ntop++ 和++top的区别\r\n\r\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\r\n\r\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\r\n\r\n栈满：top==MaxSize\r\n\r\n共享栈栈满条件：top1+1==top2\r\n\r\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\r\n\r\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\r\n\r\n括号匹配流程图\r\n\r\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\r\n\r\n用栈实现括号匹配：\r\n\r\n具体代码：\r\n\r\n```c\r\n#define Maxsize 10            //定义栈中元素的\r\ntypedef struct{\r\nchar data[MaxSize];        //静态数组存放栈\r\nint top;                    //栈顶指针\r\n}SqStack;\r\n//初始化栈\r\nvoid InitStack(Sqstack &S)\r\n//判断栈是否为空\r\nbool stackEmpty(SqStack S)\r\n//新元素入栈\r\nbool Push(SqStack &S,char x)\r\n//栈顶元素出栈，用x返回\r\nbool Pop(SqStack &s,char &x)\r\n\r\n    //有栈的情况\r\nbool bracketCheck(char str[],int length) {\r\nSqStack s;\r\nInitStack(S); //初始化一个栈\r\nfor (int i=0; i<length; i++){\r\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\r\n	Push(S, str[i]); //扫描到左括号，入栈\r\n}else {\r\n	if (StackEmpty(S))//扫描到右括号，且当前栈空\r\n	return false;//匹配失败\r\nchar topElem;\r\nPop(S,topElem);//栈顶元素出栈\r\nif(str[i]==\')\' && topElem!=\'(\')\r\n	return false;\r\nelse if(str[i]==\']\'&& topElem!=\'[\')\r\n	return false;\r\nif(str[i]==\'}\' && topElem!=\'{\')\r\nreturn false;\r\n	}\r\n}\r\n    return StackEmpty(S);\r\n}\r\n\r\nbool compare(int x,int y){\r\n    if(x!=(y-1)){\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n       //无栈的情况\r\nbool bracketCheck1(char str[],int length) {\r\n int MaxSize = length;\r\nchar data[MaxSize];        //静态数组存放栈\r\nint top=-1;  \r\n\r\nfor (int i=0; i<length; i++){\r\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\r\n    if(compare(top,length)){\r\n		top++;\r\n    	data[top]= str[i];//扫描到左括号，入栈\r\n    }\r\n}else {\r\n	if (top==-1)//扫描到右括号，且当前栈空\r\n	return false;//匹配失败\r\nchar topElem;\r\ntopElem = data[top];\r\n    top--;//栈顶元素出栈\r\nif(str[i]==\')\' && topElem!=\'(\')\r\n	return false;\r\nelse if(str[i]==\']\'&& topElem!=\'[\')\r\n	return false;\r\nif(str[i]==\'}\' && topElem!=\'{\')\r\nreturn false;\r\n	}\r\n}\r\n    return top==-1;\r\n}\r\n    \r\n    \r\n    \r\n```\r\n\r\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\r\n\r\n###### 3/23~24\r\n\r\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\r\n\r\n程序输出结果只能是第一种（唯一性、确定性）\r\n\r\n后缀表达式的手算方法：\r\n\r\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\r\n\r\n注意：两个操作数的左右顺序\r\n\r\n机算：\r\n\r\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\r\n\r\n用栈实现后缀表达式的计算：\r\n\r\n①从左往右扫描下一个元素，直到处理完所有元素\r\n\r\n②若扫描到操作数则压入栈，并回到①；否则执行③ \r\n\r\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\r\n\r\n----\r\n\r\n前缀表达式：\r\n\r\n**中缀表达式转前缀表达式（手算）**\r\n\r\n① 确定中缀表达式中各个运算符的运算顺序\r\n\r\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\r\n\r\n③ 如果还有运算符没被处理，就继续 ②\r\n\r\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\r\n\r\n机算：\r\n\r\n用栈实现前缀表达式的计算：\r\n\r\n①从右往左扫描下一个元素，直到处理完所有元素\r\n\r\n②若扫描到操作数则压入栈，并回到①；否则执行③ \r\n\r\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\r\n\r\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\r\n\r\n\r\n\r\n中->前\r\n\r\n注：先弹出的是左操作数，后弹出的是右操作数\r\n\r\n\r\n\r\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\r\n\r\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\r\n\r\n上三角按行存放 <===> 下三角按列存放\r\n\r\n下三角按行存<====>上三角按列存\r\n\r\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\r\n\r\n###### 4/1\r\n\r\n串\r\n\r\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\r\n\r\n 高四位 低四位\r\n\r\na 0110	0001  \r\n\r\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\r\n\r\nKMP：\r\n\r\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\r\n\r\n从第一位开始匹配：next[1] = 0,next[2] = 1;\r\n\r\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\r\n\r\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\r\n\r\n**nextVal数组求法**，先让第一位=0\r\n\r\n###### 4/3~4/5\r\n\r\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\r\n\r\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\r\n\r\ni<=n/2是分支结点，i>n/2是叶子结点\r\n\r\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\r\n\r\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\r\n\r\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\r\n\r\n线索化二叉树\r\n\r\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\r\n\r\n----\r\n\r\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\r\n\r\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\r\n\r\n###### 4/6\r\n\r\n哈夫曼树：最优二叉树\r\n\r\n带权路径最小的二叉树\r\n\r\n**并查集代码**\r\n\r\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\r\n\r\n最坏情况下时间复杂度与树的高度h相关\r\n\r\n优化合并操作 小树并入大树\r\n\r\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\r\n\r\nfind()最坏时间复杂度变为O(logn)\r\n\r\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\r\n\r\n树越矮，时间复杂度越低\r\n\r\nfind优化操作\r\n\r\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\r\n\r\n```c\r\n/*int Find(int nums[],int index){\r\n    int root = index;\r\n    while(nums[root]>=0){\r\n        root = nums[root];\r\n    }\r\n    while(index!=root){\r\n        int record = root;\r\n        nums[index] = root;\r\n        root = record;\r\n    }\r\n    return root;\r\n}*/\r\n//使树的高度不超过O(a(n))的数量级\r\n\r\n\r\n#pragma once\r\n#define Size 100\r\nint UFSets[Size];\r\n\r\n//初始化并查集\r\nvoid Initial(int S[]) {\r\n	for (int i = 0;i < Size;i++) {\r\n		S[i] = -1;\r\n	}\r\n}\r\n\r\n//查找操作，找x的根节点\r\nint Find(int s[], int x) {\r\n	while (s[x]>0)\r\n	{\r\n		x = s[x];\r\n	}\r\n	return x;\r\n}\r\n\r\n//合并操作 根节点统一  树高<=logn + 1\r\nvoid Union(int s[], int root1, int root2) {\r\n	if (root1 == root2) {\r\n		return ;\r\n	}\r\n	if (s[root2] > s[root1]) { //root2是小树\r\n		s[root1] += s[root2];\r\n		s[root2] = root1;\r\n	}\r\n	else {\r\n		s[root2] += s[root1];\r\n		s[root1] = root2;\r\n	}\r\n}\r\n\r\n```\r\n\r\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\r\n\r\n错题：\r\n\r\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\r\n\r\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\r\n\r\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\r\n\r\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\r\n\r\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\r\n\r\n该公式结论对做题有帮助 /列举法：5x2+4=14\r\n\r\n###### 4/16\r\n\r\n图的顶点个数 = 图的阶数\r\n\r\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\r\n\r\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\r\n\r\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\r\n\r\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\r\n\r\n邻接表、邻接矩阵的**区别**\r\n\r\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\r\n\r\n---\r\n\r\n# 4/18\r\n\r\n<h3>图的数据结构定义（邻接表）	</h3>\r\n\r\n```c\r\n// 邻接表中表对应的链表的顶点\r\ntypedef struct _ENode\r\n{\r\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\r\n    struct _ENode *next_edge;   // 指向下一条弧的指针\r\n}ENode, *PENode;\r\n\r\n// 邻接表中表的顶点\r\ntypedef struct _VNode\r\n{\r\n    char data;              // 顶点信息\r\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\r\n}VNode;\r\n\r\n// 邻接表\r\ntypedef struct _LGraph\r\n{\r\n    int vexnum;             // 图的顶点的数目\r\n    int edgnum;             // 图的边的数目\r\n    VNode vexs[MAX];\r\n}LGraph;\r\n\r\n```\r\n\r\n\r\n\r\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\r\n\r\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\r\n\r\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\r\n\r\n访问各个顶点所需时间+访问各边所需时间\r\n\r\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\r\n\r\n**深度优先遍历：**和树的**先根**遍历类似\r\n\r\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\r\n\r\n---\r\n\r\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\r\n\r\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\r\n\r\n考频只有一题的选择：\r\n\r\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\r\n\r\n---\r\n\r\n关键路径\r\n\r\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\r\n\r\n4/24复习\r\n\r\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\r\n\r\ne(i) :活动ai最早开始的时间\r\n\r\nl(i) :活动ai最晚开始的时间\r\n\r\nvl(k)：活动vk最迟发生时间 vek:最早\r\n\r\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\r\n\r\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\r\n\r\n差值为0的就是关键路径\r\n\r\n\r\n\r\n\r\n\r\n#### 5 月\r\n\r\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\r\n\r\n查找判定树\r\n\r\n判断「平衡二叉树」的 2 个条件：\r\n\r\n- **1. 是「二叉排序树」**\r\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\r\n\r\n二叉排序树\r\n\r\n平衡二叉树\r\n\r\n二叉搜索树\r\n\r\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\r\n\r\n---\r\n\r\n<h3>折半查找：</h3>\r\n\r\n只适用于有序的顺序表\r\n\r\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\r\n\r\n\r\n\r\n折半查找构成了二叉排序树\r\n\r\n可以把折半查找看成一颗二叉排序树\r\n\r\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\r\n\r\n二叉排序树删除操作\r\n\r\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\r\n\r\n7.3.3中要重点了解的例1~3，例4\r\n\r\n**简单路径定义：**\r\n\r\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\r\n\r\n---\r\n\r\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\r\n\r\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\r\n\r\n\r\n\r\n**红黑树性质**\r\n\r\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\r\n\r\n红黑树插入\r\n\r\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\r\n\r\n看“叔”脸色\r\n\r\n\r\n\r\n红黑树性质+插入总结：\r\n\r\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\r\n\r\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\r\n\r\n**B树**\r\n\r\n特性\r\n\r\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\r\n\r\n\r\n\r\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\r\n\r\n树的高度\r\n\r\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\r\n\r\n\r\n\r\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\r\n\r\n\r\n\r\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\r\n\r\n（上下限：除了根节点外，结点关键字个数n: )\r\n\r\n\r\n\r\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\r\n\r\nB树/B+树类比\r\n\r\n---\r\n\r\n**散列（哈希表）**\r\n\r\n拉链法：同义词串成一个链表\r\n\r\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\r\n\r\n着重考察：线性探测法、平方探测法\r\n\r\n\r\n\r\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\r\n\r\n总结\r\n\r\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\r\n\r\n装填因子概念也需重视\r\n\r\nQuestion1:\r\n\r\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\r\n\r\n(1) 请画出所构造的散列表。\r\n\r\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\r\n\r\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\r\n\r\n\r\n\r\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\r\n\r\n查找成功：每个元素被探测的次数加起来的总和/元素个数\r\n\r\n---\r\n\r\n##### 5/23 排序算法\r\n\r\n插入排序法\r\n\r\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\r\n\r\n---\r\n\r\n##### 5/27 快速排序\r\n\r\n时间、空间复杂度与递归层次有关\r\n\r\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\r\n\r\n**快排时间效率分析：**\r\n\r\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\r\n\r\n---\r\n\r\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\r\n\r\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\r\n\r\n---\r\n\r\n###### **8.3.3**\r\n\r\n---\r\n\r\n第七题：**x趟排序应产生x个分界线。**\r\n\r\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\r\n\r\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\r\n\r\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\r\n\r\n---\r\n\r\n第9题：关于快排的**完美**划分\r\n\r\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\r\n\r\n排序速度最慢：原数组已基本有序\r\n\r\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\r\n\r\n##### 5/29 堆排序\r\n\r\n最主要的算法还是向下调整HeadAdjust()函数\r\n\r\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\r\n\r\n\r\n\r\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\r\n\r\n堆排序的空间复杂度：常数级 O(1)\r\n\r\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\r\n\r\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\r\n\r\n堆的插入和删除\r\n\r\n考试可能考比较次数\r\n\r\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\r\n\r\n\r\n\r\n##### 5/30 归并排序+基数排序\r\n\r\n二路归并：把两个已经有序的序列合并成一个\r\n\r\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\r\n\r\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\r\n\r\n**基数排序：**代码不怎么考，主要手算模拟即可\r\n\r\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\r\n\r\n---\r\n\r\n排序算法的空间、时间复杂度\r\n\r\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\r\n\r\n\r\n\r\n5/31外部排序\r\n\r\n\r\n\r\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\r\n\r\nr<=K^h-1 ,树的结点最大的一层\r\n\r\n要归并的数据都是分块读入内存的\r\n\r\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\r\n\r\n\r\n\r\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\r\n\r\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\r\n\r\n\r\n\r\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\r\n\r\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\r\n\r\n##### 6/2 结尾\r\n\r\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\r\n\r\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\r\n\r\n考查手算模拟即可\r\n\r\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\r\n\r\n---\r\n\r\n**置换选择排序：**减少初始归并段的个数\r\n\r\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\r\n\r\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\r\n\r\n\r\n\r\n---\r\n\r\n**最佳归并树**\r\n\r\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\r\n\r\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\r\n\r\nk叉最佳归并树：\r\n\r\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\r\n\r\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\r\n\r\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\r\n\r\n---\r\n\r\n<h3>**各种排序算法的性质总结**</h3>\r\n\r\n\r\n\r\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\r\n\r\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\r\n\r\n\r\n\r\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\r\n\r\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\r\n\r\n---\r\n\r\n### 8/1 算法题\r\n\r\n数组题解题框架：\r\n\r\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n',1,NULL,0,0,1,'2022-09-29 10:58:40','2022-09-29 10:59:24'),
(66,1,203,'http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg','2022-10-01 考研英语历年真题大作文整理','**英语大作文整理**\n2011，国内市场份额\n\nGiven is a column chart which clearly illustrates the share of the domestic auto-mobile market among Chinese, Japanese and American brands from 2008 to 2009. To be specific, the percentage of Chinese auto-mobile brands has ascended remarkably, from 25% to its peak at nearly 30%. During the same period, the statistics of Japanese brands revealed a sharp decline, from 35% to 25%.\n\nTwo primary factors that account for the above mentioned chances could be summarized as follows. First and foremost, with the prosperity of the economy in China and the increase in people\'s income, a large number of people prefer domestic products rather than foreign products. Meanwhile, the fact can not be ignored that the cars made in China are increasingly qualified. In addition, the authorities concerned in China put more emphasis on native industry and provide relevant policies and laws to create a favorable environment which enables the automobile industry to expand their scale.\n\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the Chinese industry to try promotion that will reinforce Chinese brands\' image.\n2012，员工满意度调查\n\nGiven is a table which clearly illustrates the statistics of staff satisfaction on the job in a certain company. Based upon the data given above, we can conclude that the percentage of people satisfied with their job is highest among those over 50 years, at about 40%. In contrast, the percentage of staff not satisfied with their job is about 64% among those in their forties, the highest among all the three groups.\n\nSeveral primary factors that account for the above-mentioned number could be summarized as follows. To begin with, staff members in their forties usually have to undertake a lot of responsibilities from their family and their career. Sometimes they are even under pressure to pursue money, power, high social status and so on, which are all symbols of success. In addition, people over 50 generally have shifted their life goals from achieving the ultimate success to a relatively easy and comfortable life, and therefore tend to be content with their job.\n\nIn view of the above reasoning, I am convinced that it is difficult for everyone to be satisfied with their jobs. And it is advisable for them to adjust their expectations for work and the companies should put more emphasis on their staff\'s welfare.(207词)\n2013，大学生兼职\n\nGiven is a column chart which clearly reveals the statistics of students taking a part-time job in a certain university. Based upon the data given above, we can conclude that the percentage of students taking a part-time job has increased remarkably, from 67.77% within freshman to its peak at 88.24% within seniors.\n\nSeveral primary factors that account for the above-mentioned could be summarized as follows. To begin with, the prosperity of the economy in China has provided ample part-time job opportunities for university students. Therefore, not only can they take part in extracurricular activities, but take a part-time job in their spare time. In addition, taking a part time job can help students to adjust to the social employment environment. But taking a part-time job is also a double-edged sword for students. Working after class means a dedication on time to study, which would have a negative effect on the academic performance of students.\n\nIn conclusion, it is the student\'s capability on time management that determines whether a part-time job is beneficial for students or has a negative effect on the studies. If a student is able to maintain a balance between studying and a part-time job, she/he will have the best of both worlds.\n2014，城镇人口变化\n\nGiven is a column chart which clearly illustrates the striking chances of China’s population in the town and the rural from 1990 to 2010. From 1990 to 2010, the number of the town population has increased remarkably from 300 million to its peak at 666 million, a rise of 366 million. During the same period, the statistics of the rural population decreased from 834 million to 674 million.\n\nSeveral primary factors that account for the above-mentioned changes could be summarized as follows. First and foremost, it goes without saying that such a sharp increase result from the reform and opening-up in the past few decades. Furthermore, the Chinese economic prosperity has provided ample job opportunities in urban areas, which attach more ordinary people for a job, especially for those migrant workers who move to urban areas from rural areas. More importantly, the authorities concerned in China have put more emphasis on infrastructure establishment, such as the transport system and cultural centers, to satisfy the requirements of dwellers.\n\nIn conclusion, as people in counting numbers move to urban areas, we can not ignore challenges that urbanization has put into the natural resources, the environment, job market and public services.(203词)\n2015，饼状图描述春节假期支出情况\n\nGiven is a pie chart which clearly reflects the spending of the spring festival vacation in a certain city in China. Based upon the data given above, we can conclude that the percentage of New Year presents is the highest among four categories, accounting for 40%. The statistics of transportation, gathering and other factors account for 20%, 20% and 20% respectively.\n\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. It goes without saying that the fundamental contributor for such a seniol results from the prosperity of the Chinese economy, which enables people to have money to purchase New Year gifts for their intimate friends. In addition, exchanging presents during the spring festival is a long-standing history of Chinese custom because it symbols the congratulations and the good relationship between you and the receiver. Furthermore, the traditional festival is a good time for people to spend money to go back home and get together with their family.\n\nIn conclusion, various factors that people spend money during the festival reveal that Chinese people\'s living standard has a sharp increase since the reform and opening-up. If we try our utmost effort, the future will be promising and hopeful.\n2016，旅游目的\n\nGiven is a pie chart which clearly illustrates the purpose of touring for students in a certain university. Based upon the data given above, the percentage of appreciating landscapes and relieving pressure are the highest among those five categories, accounting for 37% and 33% respectively. By contrast, the percentage of making friends through tours, cultivating ability and other goals take up 9%, 6% and 15% respectively.\n\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. First of all, college students are best characterized by their strong curiosity for the mysteries of nature, which enables them to choose travel as an approach to enjoy and explore natural beauty. In addition, compared with other tourists, college students usually suffer more burdens in academic studies. In order to relieve stress, it is advisable to travel on a good day. Finally, in the way of traveling, you will find more interesting individuals with whom you can make friends. And there are opportunities to cultivate your ability of independence, which is essential for your future.\n\nDespite students in mounting numbers enjoying the trip during the vacation, there are also a few caveats that students are supposed to bear in mind.\nTo begin with, it is of great necessity for students to make plans before their departure. Moreover, it is essential for every student to put great emphasis on their safety.\n2017，博物馆和游客数量变化\n\nGiven is a line chart which clearly illustrates the change of the number of museums and the statistics of visitors between 2013 and 2015. Based upon the data given above, we may draw the conclusion that the percentage of the museum has ascended remarkably from 6378 to 7811 , an increase of 1433. During the same period, the number of visitors has also increased from 416.5 million to 469.2 million.\n\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. In the first place, with the prosperity of the economy in China and the increase in people\'s income in recent decades, a large number of people are paying attention to appreciating the traditional culture of China. In the second place, the government has provided relevant policies to create a favorable environment, including encouraging more cities to build more museums which enable a host of citizens to pursue spiritual enjoyment.\n\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the government to focus more eyesight on national cultural literacy. In addition, it is of great necessity for museums administrators to work out comprehensive strategies to enhance their services. If they try their utmost to do so, the future of our culture will be more promising.\n2018，餐馆选择的因素\n\nGiven is a pie chart which clearly reveals the factors of the customer\'s concern about choosing restaurants in a certain city in 2017. Bosed upon the data given above, we can conclude that the percentage of feature and service are the highest among those five categories, accounting for 36.3% and 26.8% respectively. And the statistics of environment, price and other factors take up 23.8%, 8.4% and 4.7% respectively.\n\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, it goes without saying that the fundamental contributor for such a scenario results from the prosperity of the Chinese economy. With the increase of people\'s income since the reform and opening-up, a large number of people are paying more attention to the features of a restaurant instead of prices. In addition, in a bid to develop interpersonal relationships and enjoy a comfortable life, consumers in mounting numbers prefer service and environment to other factors.\n\nIn conclusion, it is advisable for restaurants to adapt to a combination of conventional and innovative approaches to improve their service and create more features. More importantly, it is necessary to put more emphasis on the consumers\' feedback and comments. If they try their utmost to do so, the future will be hopeful and promising.\n2019，大学生毕业去向\n\nGiven is a column chart which clearly reveals the change in a certain university graduates’ \"next station” between 2013 and 2018. Based upon the data given above, we can conclude that the percentage of seeking employment has decreased from 68.1% to 60.7%, a decline of 7.4%. During the same period, the statistics of receiving further education and running their own business have increased from 26.3% and 1.3% to 34% and 2.6% respectively.\n\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. To begin with, with the prosperity of the Chinese economy, there has been a great change in people\'s ideas about seeking employment, and they are becoming increasingly aware of the necessity of receiving further education. In addition, the decline of seeking employment is also attributed to challenges that the employment environment has posed to the job market. More and more employers are likely to choose graduates with higher education degrees rather than the people who seek employment directly after graduation.\n\nIn conclusion, with graduates in mounting numbers choosing to receive further education, I am convinced that a postgraduate\'s degree may bring them better job opportunities, which also arouse my enthusiasm for academic research.\n2021,调查运动锻炼方式\n\nGiven is a column chart which clearly illustrates the contrasts in a survey of exercising forms for residents in a certain city. Based upon the data given above, we can conclude that the percentage of exercising alone and doing sports with friends is the highest among those four categories, accounting for 54.3% and 47.7% respectively. In contrast, the statistics of exercising with family and group activity only take up 23.9% and 15.8% respectively.\n\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, the authorities concerned in China have put great emphasis on infrastructure establishment, including the sport park, which enables residents to have more areas to do sports. In addition, a large number of people who choose to exercise alone or exercise with their friends are attributed to work or study pressure. Doing sports is a good way for them to relieve their stress. Moreover, exercising and playing sports can have huge benefits for a person\'s strength, agility, and figure, helping to improve one\'s immune system.\n\nIn conclusion, as people in mounting numbers do sports, it is advisable for the authorities concerned to build more sports areas and tools to satisfy the requirements of residents. More importantly, by fostering enthusiasm for sports and exercise, society can ensure a generation of healthy and sportsmanlike citizens.\n',1,'',0,0,1,'2022-10-01 20:52:56','2022-10-01 20:53:46'),
(67,1,203,'http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg','2022-10-01 英语小作文整理','\n英语小作文整理\n校园生活\n校园活动举办目的，参加效果，在大学里可以参加哪些活动，有哪些效果等（通知类，建议信）\n\n  >   In order to broaden high school students\' horizons and enrich their extracurricular activities, our university is going to hold a summer camp during this summer vacation.\n    The high school students in this camp will be involved in various activities, such as speech contests and debates, attending group discussions and so on.(sport meeting, social gatherings)\n    Participating in a variety of activities organized by us, they will be able to demonstrate their outstanding abilities, helping them to develop a range of practical skills.\n    Their active participation will help them in strengthening their sense of responsibility and develop good international relationships.\n\n校园活动举办的一些细节，时间，地点等（通知，介绍信）\n> \n    活动举办目的参考上述校园活动举办目的\n    活动地点将在娱乐中心，时间：The Student Union of our university is organizing a school-wide singing contest to be held at the Student\'s Recreational Center on March 1, 2022.\n    邀请教授当评委：Five prestigious professors will be invited as honorable judges.\n\n校园志愿者招募，校园活动相关咨询表达（通知类，招募信）\n\n   >  有经验者优先：Preference will be given to those experienced in international activities and other similar activities.\n    咨询方式：Call 86754321 or email poster@ccc.edu.cn for an application and for information on the interview.\n    有兴趣者来：Those who are interested in being volunteers may sign up with their class monitor before June 10, 2022.\n    咨询：If you have further questions or concerns, please feel free to email your questions to library@ssu.edu.can.\n    基本要求：Basic requirements are familiarity with the theme of the conference and proficiency in English.\n    其他要求：Other requirements include good international communication abilities and a strong sense of responsibility.\n\n介绍校园生活，如欢迎交换生，或者是表弟等亲戚考入大学，或者某某谁想要了解一下大学生活，有快乐，有烦恼，先对他们的到来表示欢迎（建议信）\n\n   >  欢迎，祝贺：On behalf of the Students’ Union of GuangDong University of Technology, I would like to_____（extend our heartfelt welcome,congratulations）\n    很高兴给你建议：It is my great pleasure to offer you several practical suggestions.\n    校园生活不像你想的：Life in this university is perhaps not as easy as you have expected.\n    繁杂的课堂作业和考试：You may be tightly bound by daily classes, abundant homework, frequent exams.\n    尽管有压力，还是有很多校园活动，此处校园活动可参考上述校园活动参加效果等\n    总结一下，有很多烦恼，也有很多快乐，你在校园的日子爽歪歪：All in all, although there is a lot of pressure, the time you spend on the campus will be worthwhile and enhance your whole life.\n\n朋友往来\n感谢朋友的帮助，无论是交换生住他的房子还是他带你去旅游，期待他有机会来让我感谢他\n\n  >   交代地点，时间：Thank you very much for those five wonderful days at your house. Every moment was a delight.\n    以前从没有这样的放松经历：I can not remember ever having enjoy myself so thoroughly elsewhere.\n    我想告诉你我有多么感谢你：This is to tell you how much I enjoyed the weekend in GuangZhou.\n    描述一些细节：Everything was just perfect: the weather, your company and the surroundings.\n    No wonder I am finding it difficult to get down to reading in this morning. The classroom life seems so dull and prosaic compared to the days in GuangZhou.\n    结尾感谢和邀请：I hope you can know how much I appreciate your hospitality and thoughtful kindness to me.\n    I count myself fortunate indeed to have such a generous and charming friend as you.\n    I hope something will bring you to Beijing so that I can reciprocate your great kindness.\n\n很高兴听到朋友的某样消息，需要给他建议，如学习上的建议，校园生活的建议可参考上述校园类中的校园生活\n建议某机构\n给图书馆等机构建议，提升服务\n\n   >  As a senior student in this university who is particular keep on reading in the library in my spare time.\n    I am writing to make several suggestions for improving service here.\n    To begin with, compared to students\' need, the number and variety of books are not adequate.\n    It is advisable to purchase more latest books.\n    In addition, since so many students are preparing for the national entrance examination for postgraduates, it is of great necessity to prolong the opening time of reading room where they study.\n    I hope you could know how much I appreciate your kind assistance to us, it is your devoted work that enables us to enjoy such a supportive atmosphere of study in the library.\n\n给报社编辑这类机构里的某个人建议，针对主题\n建议某机构或者学校装设备\n\n  >  I am writing to request that the Internet be installed in the dormitories .\n    Not only do professors require students to use it for research, but much communication is done between professors and students through email as well.\n    In addition, some professors are beginning to post their lecture notes online for students to review in their spare time.\n    I trust you will take my suggestions into account.\n\n推荐景点，书籍，电影，人物\n景点，长城和故宫，介绍城市或者省份，那就是北京，同样可以介绍北京里面的长城和故宫\n\n  >  城市：Beijing 故宫：The Palace Museum 长城：The Great Wall\n    The palace Museum, also known as the Forbidden City, was the imperial palace of the Ming and Qing Dynasties. It is also the largest piece of ancient Chinese architecture currently exiting.\n    The Great Wall, symbolizing China\'s ancient civilization, is one of the world\'s most famous projects. As the great creation of the ancient Chinese people and one of the wonders of the world, it was listed as one of the world cultural heritage sites by the United Nations Education, Scientific and Cultural Organization in 1987.\n\n书籍，论语\n\n论语的介绍可以参考下面关于孔子的描述\n\n   > 结尾一句：I hope the above information will help you to understand the book. If you need any further information about selection, please do not hesitate to contact me.\n\n电影\n人物，孔子\n\n  >  孔子：Confucius，孔学思想：confucian thought，儒学：confucianism\n    介绍孔子：As a great thinker, educator and founder of Confucianism, Confucius is a ancient sage during the Spring and Autumn period.\n    孔子相关的内容，介绍论语：His words and life stories were recorded by his disciples and their students in The Analects.\n    As an enduring classic of Chinese culture, The Analects has influenced all thinkers, writers and politicians in the over-2000-year-long history of China since Confucius.\n    No scholar could truly understand this long-standing culture and the inner world of ancient China without this book.\n    儒家文化的天人合一思想：Much of Confucian thoughts on Heaven and Man reveals universal human values.\n    孔子文化能够永存的原因：This is perhaps why Confucian thoughts in the 21st century still remain the interest of not only Chinese people but people in the other parts of the world.\n\n邀请教授或者某人\n要举办某个活动，邀请教授当评委或者裁判，或者通知要求教授出席会议（邀请信，通知类）\n邀请教授做一个报告\n邀请教授帮你做证明，开介绍信\n\n   > 介绍自己：As one of your students, I am writing to ask for your kind assistance.\n    I wish to enroll in The Guangdong University of Technology, for which I am required to provide a letter of recommendation.\n    As a senior professor in your field,one of my most respected college teachers and a person who knows me very well, I conceived you are the most suitable referee for me.\n    As you know, I have laid a solid foundation in religious course.\n    I will be grateful if, in this letter, you would confirm that I have adequate qualifications to attend the course.\n    Would you be so kind to give a brief introduction to my academic performance during my undergraduate studies, especially under your supervision.\n    Thank you very much for your generous help in this matter.\n\n投诉，索赔\n投诉某产品\n\n  >  I am writing to express my dissatisfaction with the electronic dictionary which I bought in your online store on January 7.\n    Although your store is rated as a five-star one, I found that there are several quality problems on the dictionary.\n    To begin with, the buttons on the dictionary are so small that it is nearly impossible to type anything with them.\n    In addition, the battery needs recharging after a mere 2 hours of use. This means that I must take my charger with me when I go out for a day.\n    I think you will take my complaints seriously and improve your service in the future.\n    I will greatly appreciate a discount on my bill or a full refund.\n\n投诉服务\n\n >   I am writing to express my dissatisfaction with the service I received while staying in your hotel during my vacation.\n    Although your hotel is a five-star one, I found that the rooms were not cleaned on daily basic, and that my bed was cleaned-up every three days.\n    In addition, the food in your restaurant is similarly disappointing.\n    Not only was it extremely overpriced, but the quality was very poor.\n    I was therefore forced to eat out in the local restaurant.\n    I think you will take my complaints seriously and improve your service in the future.\n    I will greatly appreciate a discount on my bill or a full refund.\n\n答复某人\n跟某人进行道歉\n\n   >  I am delighted to recall the past two weeks when I stayed at your house. Every moment was a delights. But I am writing to apologize, since I forgot to return a cd to you.\n    I hope you could know how much I appreciate your kind assistance which enables me to enjoy a comfortable vacation in Canada.\n    Compared with you, I am quite careless and I totally forgot to return the cd to you.\n    Accordingly, I intend to send it back immediately by Express Mail service, if there are any better solutions you prefer, please feel free to inform me.\n    Once again, please accept my apologies for any inconvenience that I have caused.\n\n教授要求你做什么，答复他\n\n  >   开头寒暄：It is my great pleasure to plan a debate on the theme of city traffic. My suggested topic is \"Private cars - to Encourage or to Limit\".\n    The primary of my suggestions are as follows.\n    时间，地点：The debate will be held in the Student\'s Recreational Center on December 27. I am looking forward to your reply.\n\n给老板答复，要辞职\n对某人表示感谢\n',1,'',0,0,1,'2022-10-01 20:57:40','2022-10-01 20:58:12');

/*Table structure for table `tb_article_tag` */

DROP TABLE IF EXISTS `tb_article_tag`;

CREATE TABLE `tb_article_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `article_id` int NOT NULL COMMENT '文章id',
  `tag_id` int NOT NULL COMMENT '标签id',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_article_tag_1` (`article_id`) USING BTREE,
  KEY `fk_article_tag_2` (`tag_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=944 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_article_tag` */

insert  into `tb_article_tag`(`id`,`article_id`,`tag_id`) values 
(857,54,29),
(871,57,31),
(882,60,33),
(899,61,34),
(900,61,35),
(901,61,36),
(911,55,29),
(912,55,37),
(916,63,29),
(926,62,32),
(927,62,35),
(928,62,36),
(929,59,32),
(930,59,35),
(931,59,36),
(934,64,34),
(935,64,36),
(936,65,35),
(938,66,35),
(941,67,33),
(942,67,35),
(943,56,30);

/*Table structure for table `tb_category` */

DROP TABLE IF EXISTS `tb_category`;

CREATE TABLE `tb_category` (
  `id` int NOT NULL AUTO_INCREMENT,
  `category_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '分类名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=206 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_category` */

insert  into `tb_category`(`id`,`category_name`,`create_time`,`update_time`) values 
(187,'测试分类','2022-01-24 23:33:56',NULL),
(188,'部署','2022-08-11 10:14:04',NULL),
(189,'技术栈','2022-08-30 12:36:49',NULL),
(194,'算法','2022-08-30 12:51:08',NULL),
(203,'English','2022-08-30 13:01:40',NULL),
(204,'网络','2022-08-30 18:50:52',NULL),
(205,'学习','2022-08-30 21:27:32',NULL);

/*Table structure for table `tb_chat_record` */

DROP TABLE IF EXISTS `tb_chat_record`;

CREATE TABLE `tb_chat_record` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int DEFAULT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头像',
  `content` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '聊天内容',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip地址',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT 'ip来源',
  `type` tinyint NOT NULL COMMENT '类型',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2990 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_chat_record` */

/*Table structure for table `tb_comment` */

DROP TABLE IF EXISTS `tb_comment`;

CREATE TABLE `tb_comment` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `user_id` int NOT NULL COMMENT '评论用户Id',
  `topic_id` int DEFAULT NULL COMMENT '评论主题id',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '评论内容',
  `reply_user_id` int DEFAULT NULL COMMENT '回复用户id',
  `parent_id` int DEFAULT NULL COMMENT '父评论id',
  `type` tinyint NOT NULL COMMENT '评论类型 1.文章 2.友链 3.说说',
  `is_delete` tinyint NOT NULL DEFAULT '0' COMMENT '是否删除  0否 1是',
  `is_review` tinyint(1) NOT NULL DEFAULT '1' COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '评论时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_comment_user` (`user_id`) USING BTREE,
  KEY `fk_comment_parent` (`parent_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=738 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_comment` */

insert  into `tb_comment`(`id`,`user_id`,`topic_id`,`comment_content`,`reply_user_id`,`parent_id`,`type`,`is_delete`,`is_review`,`create_time`,`update_time`) values 
(725,1,54,'测试评论',NULL,NULL,1,0,1,'2022-03-11 22:52:24',NULL),
(726,1,54,'测试回复',1,725,1,0,1,'2022-03-11 22:52:32',NULL),
(727,1,49,'测试评论',NULL,NULL,3,0,1,'2022-03-11 22:52:41',NULL),
(728,1,49,'测试回复',1,727,3,0,1,'2022-03-11 22:52:46',NULL),
(729,1,NULL,'测试评论',NULL,NULL,2,0,1,'2022-03-11 22:52:53',NULL),
(730,1,NULL,'测试回复',1,729,2,0,1,'2022-03-11 22:52:58',NULL),
(731,1006,55,'来了<img src= \'https://static.talkxj.com/emoji/xh.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/wy.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/dacall.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/dacall.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/zhichi.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>',NULL,NULL,1,0,1,'2022-08-11 10:44:56',NULL),
(732,1007,55,'<img src= \' https://static.talkxj.com/emoji/dx.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/smile.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/xiaoku.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>',1006,731,1,0,1,'2022-08-11 10:47:32',NULL),
(733,1007,55,'来了',NULL,NULL,1,0,1,'2022-08-11 10:47:39',NULL),
(734,1008,55,'**部署成功~<img src= \'https://static.talkxj.com/emoji/daxiao.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/daxiao.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/daxiao.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>',NULL,NULL,1,0,1,'2022-08-16 21:37:21',NULL),
(735,1,55,'<img src= \'https://static.talkxj.com/emoji/dacall.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/dacall.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/dacall.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>hhhhh终于<img src= \'https://static.talkxj.com/emoji/shengli.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>',1008,734,1,0,1,'2022-08-16 21:49:44',NULL),
(736,1007,NULL,'**名称：开同学呀\n****：http://121.**.232.237/\n**标志：https://www.static.davan.work/articles/yikaitongxue.jpg\n**描述：开同学的blog~ 喜欢写一些贼有意思的东东^^ ',NULL,NULL,2,0,1,'2022-08-30 21:23:51','2022-08-30 22:19:54'),
(737,1,NULL,'<img src= \'https://static.talkxj.com/emoji/dq.jpg?\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/><img src= \'https://static.talkxj.com/emoji/zhichi.jpg\' width=\'24\'height=\'24\' style=\'margin: 0 1px;vertical-align: text-bottom\'/>',1007,736,2,0,1,'2022-08-30 21:31:36',NULL);

/*Table structure for table `tb_friend_link` */

DROP TABLE IF EXISTS `tb_friend_link`;

CREATE TABLE `tb_friend_link` (
  `id` int NOT NULL AUTO_INCREMENT,
  `link_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接名',
  `link_avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接头像',
  `link_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接地址',
  `link_intro` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '链接介绍',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE,
  KEY `fk_friend_link_user` (`link_name`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_friend_link` */

insert  into `tb_friend_link`(`id`,`link_name`,`link_avatar`,`link_address`,`link_intro`,`create_time`,`update_time`) values 
(26,'风丶宇的个人博客','https://static.talkxj.com/photos/b553f564f81a80dc338695acb1b475d2.jpg','https://www.talkxj.com','往事不随风','2022-01-18 00:26:46',NULL),
(27,'风秀养的个人博客','http://static.fengxiuyang.cn/config/164ec1fb546783722905b44a7179ec15.jpg','https://fengxiuyang.cn/','未来可期~','2022-08-16 20:29:56',NULL),
(28,'2T的固态','https://www.static.davan.work/yuguigou34564.jpg','https://www.davan.work/','只是拙劣的模仿','2022-08-16 21:46:08',NULL);

/*Table structure for table `tb_menu` */

DROP TABLE IF EXISTS `tb_menu`;

CREATE TABLE `tb_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单名',
  `path` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单路径',
  `component` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '组件',
  `icon` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '菜单icon',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `order_num` tinyint(1) NOT NULL COMMENT '排序',
  `parent_id` int DEFAULT NULL COMMENT '父id',
  `is_hidden` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否隐藏  0否1是',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=219 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_menu` */

insert  into `tb_menu`(`id`,`name`,`path`,`component`,`icon`,`create_time`,`update_time`,`order_num`,`parent_id`,`is_hidden`) values 
(1,'首页','/','/home/Home.vue','el-icon-myshouye','2021-01-26 17:06:51','2021-01-26 17:06:53',1,NULL,0),
(2,'文章管理','/article-submenu','Layout','el-icon-mywenzhang-copy','2021-01-25 20:43:07','2021-01-25 20:43:09',2,NULL,0),
(3,'消息管理','/message-submenu','Layout','el-icon-myxiaoxi','2021-01-25 20:44:17','2021-01-25 20:44:20',3,NULL,0),
(4,'系统管理','/system-submenu','Layout','el-icon-myshezhi','2021-01-25 20:45:57','2021-01-25 20:45:59',5,NULL,0),
(5,'个人中心','/setting','/setting/Setting.vue','el-icon-myuser','2021-01-26 17:22:38','2021-01-26 17:22:41',7,NULL,0),
(6,'发布文章','/articles','/article/Article.vue','el-icon-myfabiaowenzhang','2021-01-26 14:30:48','2021-01-26 14:30:51',1,2,0),
(7,'修改文章','/articles/*','/article/Article.vue','el-icon-myfabiaowenzhang','2021-01-26 14:31:32','2021-01-26 14:31:34',2,2,1),
(8,'文章列表','/article-list','/article/ArticleList.vue','el-icon-mywenzhangliebiao','2021-01-26 14:32:13','2021-01-26 14:32:16',3,2,0),
(9,'分类管理','/categories','/category/Category.vue','el-icon-myfenlei','2021-01-26 14:33:42','2021-01-26 14:33:43',4,2,0),
(10,'标签管理','/tags','/tag/Tag.vue','el-icon-myicontag','2021-01-26 14:34:33','2021-01-26 14:34:36',5,2,0),
(11,'评论管理','/comments','/comment/Comment.vue','el-icon-mypinglunzu','2021-01-26 14:35:31','2021-01-26 14:35:34',1,3,0),
(12,'留言管理','/messages','/message/Message.vue','el-icon-myliuyan','2021-01-26 14:36:09','2021-01-26 14:36:13',2,3,0),
(13,'用户列表','/users','/user/User.vue','el-icon-myyonghuliebiao','2021-01-26 14:38:09','2021-01-26 14:38:12',1,202,0),
(14,'角色管理','/roles','/role/Role.vue','el-icon-myjiaoseliebiao','2021-01-26 14:39:01','2021-01-26 14:39:03',2,213,0),
(15,'接口管理','/resources','/resource/Resource.vue','el-icon-myjiekouguanli','2021-01-26 14:40:14','2021-08-07 20:00:28',2,213,0),
(16,'菜单管理','/menus','/menu/Menu.vue','el-icon-mycaidan','2021-01-26 14:40:54','2021-08-07 10:18:49',2,213,0),
(17,'友链管理','/links','/friendLink/FriendLink.vue','el-icon-mydashujukeshihuaico-','2021-01-26 14:41:35','2021-01-26 14:41:37',3,4,0),
(18,'关于我','/about','/about/About.vue','el-icon-myguanyuwo','2021-01-26 14:42:05','2021-01-26 14:42:10',4,4,0),
(19,'日志管理','/log-submenu','Layout','el-icon-myguanyuwo','2021-01-31 21:33:56','2021-01-31 21:33:59',6,NULL,0),
(20,'操作日志','/operation/log','/log/Operation.vue','el-icon-myguanyuwo','2021-01-31 15:53:21','2021-01-31 15:53:25',1,19,0),
(201,'在线用户','/online/users','/user/Online.vue','el-icon-myyonghuliebiao','2021-02-05 14:59:51','2021-02-05 14:59:53',7,202,0),
(202,'用户管理','/users-submenu','Layout','el-icon-myyonghuliebiao','2021-02-06 23:44:59','2021-02-06 23:45:03',4,NULL,0),
(205,'相册管理','/album-submenu','Layout','el-icon-myimage-fill','2021-08-03 15:10:54','2021-08-07 20:02:06',5,NULL,0),
(206,'相册列表','/albums','/album/Album.vue','el-icon-myzhaopian','2021-08-03 20:29:19','2021-08-04 11:45:47',1,205,0),
(208,'照片管理','/albums/:albumId','/album/Photo.vue','el-icon-myzhaopian','2021-08-03 21:37:47','2021-08-05 10:24:08',1,205,1),
(209,'页面管理','/pages','/page/Page.vue','el-icon-myyemianpeizhi','2021-08-04 11:36:27','2021-08-07 20:01:26',2,4,0),
(210,'照片回收站','/photos/delete','/album/Delete.vue','el-icon-myhuishouzhan','2021-08-05 13:55:19',NULL,3,205,1),
(213,'权限管理','/permission-submenu','Layout','el-icon-mydaohanglantubiao_quanxianguanli','2021-08-07 19:56:55','2021-08-07 19:59:40',4,NULL,0),
(214,'网站管理','/website','/website/Website.vue','el-icon-myxitong','2021-08-07 20:06:41',NULL,1,4,0),
(215,'说说管理','/talk-submenu','Layout','el-icon-mypinglun','2022-01-23 20:17:59','2022-01-23 20:38:06',5,NULL,0),
(216,'发布说说','/talks','/talk/Talk.vue','el-icon-myfabusekuai','2022-01-23 20:18:43','2022-01-23 20:38:19',1,215,0),
(217,'说说列表','/talk-list','/talk/TalkList.vue','el-icon-myiconfontdongtaidianji','2022-01-23 23:28:24','2022-01-24 00:02:48',2,215,0),
(218,'修改说说','/talks/:talkId','/talk/Talk.vue','el-icon-myshouye','2022-01-24 00:10:44',NULL,3,215,1);

/*Table structure for table `tb_message` */

DROP TABLE IF EXISTS `tb_message`;

CREATE TABLE `tb_message` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '头像',
  `message_content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '留言内容',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户地址',
  `time` tinyint(1) DEFAULT NULL COMMENT '弹幕速度',
  `is_review` tinyint NOT NULL DEFAULT '1' COMMENT '是否审核',
  `create_time` datetime NOT NULL COMMENT '发布时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=3941 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_message` */

insert  into `tb_message`(`id`,`nickname`,`avatar`,`message_content`,`ip_address`,`ip_source`,`time`,`is_review`,`create_time`,`update_time`) values 
(3938,'管理员','https://static.talkxj.com/avatar/user.png','测试留言','127.0.0.1','',9,1,'2022-01-24 23:34:41',NULL),
(3939,'游客','https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png','欢迎','119.136.153.127','广东省深圳市 电信',9,1,'2022-08-11 10:32:56',NULL),
(3940,'游客','https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png','来辣来啦','120.231.164.193','广东省珠海市 移动',9,1,'2022-08-30 13:12:46',NULL);

/*Table structure for table `tb_operation_log` */

DROP TABLE IF EXISTS `tb_operation_log`;

CREATE TABLE `tb_operation_log` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `opt_module` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作模块',
  `opt_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作类型',
  `opt_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作url',
  `opt_method` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作方法',
  `opt_desc` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作描述',
  `request_param` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求参数',
  `request_method` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '请求方式',
  `response_data` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '返回数据',
  `user_id` int NOT NULL COMMENT '用户id',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `ip_address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作ip',
  `ip_source` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '操作地址',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1186 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_operation_log` */

insert  into `tb_operation_log`(`id`,`opt_module`,`opt_type`,`opt_url`,`opt_method`,`opt_desc`,`request_param`,`request_method`,`response_data`,`user_id`,`nickname`,`ip_address`,`ip_source`,`create_time`,`update_time`) values 
(1083,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"恭喜你成功运行博客，开启你的文章之旅吧。\",\"articleCover\":\"https://static.talkxj.com/articles/3dffb2fcbd541886616ab54c92570de3.jpg\",\"articleTitle\":\"测试文章\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"测试标签\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','127.0.0.1','','2022-01-24 23:33:57',NULL),
(1084,'相册模块','新增或修改','/admin/photos/albums','com.minzheng.blog.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum','保存或更新相册','[{\"albumCover\":\"http://121.89.232.237:83/photos/368a4d9c6be7ce21bcff4852aa6008c1.jpg\",\"albumDesc\":\"上传\",\"albumName\":\"测试相册\",\"status\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:12:42',NULL),
(1085,'照片模块','新增','/admin/photos','com.minzheng.blog.controller.PhotoController.savePhotos','保存照片','[{\"albumId\":8,\"photoUrlList\":[\"http://121.89.232.237:83/photos/64790699421bf1371204611ec2547304.jpg\"]}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:12:50',NULL),
(1086,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123\",\"articleCover\":\"http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:14:04',NULL),
(1087,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181013.jpg](http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:17:54',NULL),
(1088,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"\\n?**简介**\\n-  即将毕业的大四学生一枚 专业信息管理与信息系统，\\n-  业余爱好coding和数学建模\\n-  随便写写，纯属有感而发\\n\\n\\n\\n\\n\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:18:01',NULL),
(1089,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181013.jpg](http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:25:37',NULL),
(1090,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181013.jpg](http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 10:55:40',NULL),
(1091,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181200.jpg](http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/43cc72003632d0b3a930026b4ebd1de4.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 23:22:28',NULL),
(1092,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181200.jpg](http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/2b404123b1068ae48a07e882528465a0.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 23:32:52',NULL),
(1093,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123![IMG_20201021_181200.jpg](http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 23:40:21',NULL),
(1094,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123\",\"articleCover\":\"http://121.89.232.237:83/articles/43cc72003632d0b3a930026b4ebd1de4.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 23:41:19',NULL),
(1095,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"123123\",\"articleCover\":\"http://121.89.232.237:83/articles/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.153.127','广东省深圳市 电信','2022-08-11 23:49:04',NULL),
(1096,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://121.89.232.237:83/config/5c7ce96578f12b4b7cc6c48a08a6eb94.jpg\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','36.142.137.70','中国 移动','2022-08-16 19:13:31',NULL),
(1097,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://121.89.232.237:83/config/5c7ce96578f12b4b7cc6c48a08a6eb94.jpg\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','36.142.137.70','中国 移动','2022-08-16 19:13:49',NULL),
(1098,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://121.89.232.237:83/config/d443e9abda25a31c8a31dd0d4ae0f6c2.jpg\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','36.142.137.70','中国 移动','2022-08-16 19:33:49',NULL),
(1099,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://121.89.232.237:83/config/d443e9abda25a31c8a31dd0d4ae0f6c2.jpg\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','36.142.137.70','中国 移动','2022-08-16 20:00:34',NULL),
(1100,'页面模块','新增或修改','/admin/pages','com.minzheng.blog.controller.PageController.saveOrUpdatePage','保存或更新页面','[{\"id\":1,\"pageCover\":\"http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg\",\"pageLabel\":\"home\",\"pageName\":\"首页\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','36.142.137.70','中国 移动','2022-08-16 20:13:53',NULL),
(1101,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"2333333![封面.jpg](http://121.89.232.237:83/articles/23f1f18b7c9c41426ccf26692b3233ad.jpg)\",\"articleCover\":\"http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 20:23:07',NULL),
(1102,'友链模块','新增或修改','/admin/links','com.minzheng.blog.controller.FriendLinkController.saveOrUpdateFriendLink','保存或修改友链','[{\"linkAddress\":\"https://fengxiuyang.cn/\",\"linkAvatar\":\"http://static.fengxiuyang.cn/config/164ec1fb546783722905b44a7179ec15.jpg\",\"linkIntro\":\"未来可期~\",\"linkName\":\"风秀养的个人博客\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 20:29:56',NULL),
(1103,'照片模块','新增','/admin/photos','com.minzheng.blog.controller.PhotoController.savePhotos','保存照片','[{\"albumId\":8,\"photoUrlList\":[\"http://121.89.232.237:83/photos/43cc72003632d0b3a930026b4ebd1de4.jpg\"]}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 21:00:24',NULL),
(1104,'相册模块','新增或修改','/admin/photos/albums','com.minzheng.blog.controller.PhotoAlbumController.saveOrUpdatePhotoAlbum','保存或更新相册','[{\"albumCover\":\"http://121.89.232.237:83/photos/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg\",\"albumDesc\":\"上传\",\"albumName\":\"测试相册\",\"id\":8,\"status\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 21:01:20',NULL),
(1105,'照片模块','修改','/admin/photos/delete','com.minzheng.blog.controller.PhotoController.updatePhotoDelete','更新照片删除状态','[{\"idList\":[29],\"isDelete\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 21:01:52',NULL),
(1106,'友链模块','新增或修改','/admin/links','com.minzheng.blog.controller.FriendLinkController.saveOrUpdateFriendLink','保存或修改友链','[{\"linkAddress\":\"https://www.davan.work/\",\"linkAvatar\":\"https://www.static.davan.work/yuguigou34564.jpg\",\"linkIntro\":\"只是拙劣的模仿\",\"linkName\":\"2T的固态\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-16 21:46:08',NULL),
(1107,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"\\n### ?**about me :D**\\n#### -  即将毕业的大四学生一枚 专业信息管理与信息系统，\\n#### -  业余爱好coding和数学建模\\n#### -  随便写写，纯属有感而发\\n\\n\\n\\n\\n\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','119.136.154.98','广东省深圳市 电信','2022-08-17 10:08:03',NULL),
(1108,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"这是一款由Oracle公司所开发的对外公开的数据库管理系统\",\"articleCover\":\"\",\"articleTitle\":\"2022-08-30 关于MySQL\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:34:57',NULL),
(1109,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"这是一款由Oracle公司所开发的对外公开的数据库管理系统\",\"articleCover\":\"http://121.89.232.237:83/articles/3065741dd3beb39304f40b7b47d6cf3a.jpg\",\"articleTitle\":\"2022-08-30 关于MySQL\",\"categoryName\":\"技术栈\",\"id\":56,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[\"MySQL\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:35:52',NULL),
(1110,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"这是一款由Oracle公司所开发的对外公开的数据库管理系统\",\"articleCover\":\"http://121.89.232.237:83/articles/3065741dd3beb39304f40b7b47d6cf3a.jpg\",\"articleTitle\":\"2022-08-30 关于MySQL\",\"categoryName\":\"技术栈\",\"id\":56,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:36:49',NULL),
(1111,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"**一篇文章**\\n服务器莫名其妙的停止了mysql导致博客差点登不上，只好移除mysql重新新建镜像然后导入原来的数据...\\n唉好烦...有什么其他办法么？\\n????\",\"articleCover\":\"http://121.89.232.237:83/articles/761687dc796df37d84c18170e5a73243.png\",\"articleTitle\":\"2022-08-30 关于该博客所使用到的redis缓存以及Rabbit MQ\",\"categoryName\":\"技术栈\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"缓存\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:42:36',NULL),
(1112,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n>\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n>\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n>\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n>\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n>\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n>\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n>\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n>\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n>\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n>\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n>\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢\\n\\n> 谢谢\",\"articleTitle\":\"4\",\"id\":58,\"isTop\":0,\"status\":3,\"tagNameList\":[],\"type\":0}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:47:44',NULL),
(1113,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"**一篇文章**\\n服务器莫名其妙的停止了mysql导致博客差点登不上，只好移除mysql重新新建镜像然后导入原来的数据...\\n唉好烦...有什么其他办法么？\\n????\\n23333\",\"articleCover\":\"http://121.89.232.237:83/articles/761687dc796df37d84c18170e5a73243.png\",\"articleTitle\":\"2022-08-30 关于该博客所使用到的redis缓存以及Rabbit MQ\",\"categoryName\":\"技术栈\",\"id\":57,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:49:01',NULL),
(1114,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n>\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n>\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n>\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n>\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n>\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n>\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n>\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n>\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n>\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n>\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n>\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢\\n\\n> 谢谢\",\"articleTitle\":\"4\",\"id\":58,\"isTop\":0,\"status\":3,\"tagNameList\":[],\"type\":0}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:49:10',NULL),
(1115,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\r\\n\\r\\n![image-20220308153016669](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308153016669.png)\\r\\n\\r\\n空间复杂度计算\\r\\n\\r\\n![image-20220308163338103](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308163338103.png)\\r\\n\\r\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\r\\n\\r\\nloga(M/N)=logaM - logaN\\r\\n\\r\\n###### 3/13\\r\\n\\r\\n![image-20220313212637718](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313212637718.png)\\r\\n\\r\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\r\\n\\r\\n![image-20220313213230498](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313213230498.png)\\r\\n\\r\\n###### 3/14\\r\\n\\r\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\r\\n\\r\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\r\\n\\r\\n最好情况：均在表尾插入/删除元素\\r\\n\\r\\n最坏：在表头插入、删除元素（移动次数多）\\r\\n\\r\\n![image-20220314173030789](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173030789.png)\\r\\n\\r\\n动态存储\\r\\n\\r\\n![image-20220314173152311](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173152311.png)\\r\\n\\r\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\r\\n\\r\\n![image-20220314181520001](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314181520001.png)\\r\\n\\r\\n复杂度为O(1)\\r\\n\\r\\n```c\\r\\n\\r\\n//头插法 3/15\\r\\nvoid insertListHead(LinkList &l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n    l->next =NULL; //可能有那啥的脏数据\\r\\n\\tNode* newNode;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\tnewNode->next = l->next;\\r\\n\\t\\tl->next = newNode;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//尾插法 3/15\\r\\nvoid insertListTail(LinkList& l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n\\tNode* newNode;\\r\\n\\tNode* tmp =l;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\ttmp->next = newNode;\\r\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\r\\n\\t}\\r\\n    tmp->next =NULL;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n静态链表：![image-20220315213703769](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315213703769.png)\\r\\n\\r\\n\\r\\n\\r\\n增删链表效率高于顺序表\\r\\n\\r\\n![image-20220315215132762](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215132762.png)\\r\\n\\r\\n![image-20220315215427937](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215427937.png)\\r\\n\\r\\n###### 3/18\\r\\n\\r\\n第一章：\\r\\n\\r\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\r\\n\\r\\nP4:综合应用题：\\r\\n\\r\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\r\\n\\r\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\r\\n\\r\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\r\\n\\r\\n答：![image-20220320165638974](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220320165638974.png)\\r\\n\\r\\n\\r\\n\\r\\nP18:综合应用题：\\r\\n\\r\\n01:\\r\\n\\r\\n```apl\\r\\nif(length<1){\\r\\n\\treturn false;\\r\\n}\\r\\nElemtype del = data[length-1];\\r\\nElemtype tmp;\\r\\nint pos=0;\\r\\nfor(int i=0;i<length-1;i++){\\r\\n\\ttmp = data[i];\\r\\n\\tif(data[i]<tmp){\\r\\n\\t\\ttmp = data[i];\\r\\n\\t\\tpos++;\\r\\n\\t}\\r\\n}\\r\\n\\tdata[pos] = del;\\r\\n\\tlength--;\\r\\n\\r\\n\\treturn true;\\r\\n```\\r\\n\\r\\n02:\\r\\n\\r\\n```bash\\r\\nvoid Reverse(Sqlist &l){\\r\\n\\tElemType tmp;\\r\\n\\tint pos = l.length-1;\\r\\n\\tfor(i=0;i<l.length/2;i++){\\r\\n\\t\\ttmp = l.data[i];\\r\\n\\t\\tl.data[i]= l.data[pos];\\r\\n\\t\\tpos--;\\r\\n\\t\\tl.data[pos] = tmp;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n错题总结：\\r\\n\\r\\nP17:\\r\\n\\r\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\r\\n\\r\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\r\\n\\r\\n08：线性表删除第i个元素移动n-i个元素即可\\r\\n\\r\\n###### 3/21\\r\\n\\r\\n![image-20220321163406818](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163406818.png)\\r\\n\\r\\n栈的出栈顺序数量的计算：卡特兰数\\r\\n\\r\\n![image-20220321163828984](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163828984.png)\\r\\n\\r\\ntop++ 和++top的区别\\r\\n\\r\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\r\\n\\r\\n![image-20220321164627443](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321164627443.png)\\r\\n\\r\\n栈满：top==MaxSize\\r\\n\\r\\n共享栈栈满条件：top1+1==top2\\r\\n\\r\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\r\\n\\r\\n![image-20220321171717178](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321171717178.png)\\r\\n\\r\\n括号匹配流程图\\r\\n\\r\\n![image-20220321175550753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175550753.png)\\r\\n\\r\\n用栈实现括号匹配：\\r\\n\\r\\n具体代码：\\r\\n\\r\\n```c\\r\\n#define Maxsize 10            //定义栈中元素的\\r\\ntypedef struct{\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top;                    //栈顶指针\\r\\n}SqStack;\\r\\n//初始化栈\\r\\nvoid InitStack(Sqstack &S)\\r\\n//判断栈是否为空\\r\\nbool stackEmpty(SqStack S)\\r\\n//新元素入栈\\r\\nbool Push(SqStack &S,char x)\\r\\n//栈顶元素出栈，用x返回\\r\\nbool Pop(SqStack &s,char &x)\\r\\n\\r\\n    //有栈的情况\\r\\nbool bracketCheck(char str[],int length) {\\r\\nSqStack s;\\r\\nInitStack(S); //初始化一个栈\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\r\\n}else {\\r\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\nPop(S,topElem);//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return StackEmpty(S);\\r\\n}\\r\\n\\r\\nbool compare(int x,int y){\\r\\n    if(x!=(y-1)){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n       //无栈的情况\\r\\nbool bracketCheck1(char str[],int length) {\\r\\n int MaxSize = length;\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top=-1;  \\r\\n\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n    if(compare(top,length)){\\r\\n\\t\\ttop++;\\r\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\r\\n    }\\r\\n}else {\\r\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\ntopElem = data[top];\\r\\n    top--;//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return top==-1;\\r\\n}\\r\\n    \\r\\n    \\r\\n    \\r\\n```\\r\\n\\r\\n![image-20220321175834694](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175834694.png)\\r\\n\\r\\n###### 3/23~24\\r\\n\\r\\n![image-20220324080429724](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324080429724.png)\\r\\n\\r\\n程序输出结果只能是第一种（唯一性、确定性）\\r\\n\\r\\n后缀表达式的手算方法：\\r\\n\\r\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\r\\n\\r\\n注意：两个操作数的左右顺序\\r\\n\\r\\n机算：\\r\\n\\r\\n![image-20220324100504170](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324100504170.png)\\r\\n\\r\\n用栈实现后缀表达式的计算：\\r\\n\\r\\n①从左往右扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n----\\r\\n\\r\\n前缀表达式：\\r\\n\\r\\n**中缀表达式转前缀表达式（手算）**\\r\\n\\r\\n① 确定中缀表达式中各个运算符的运算顺序\\r\\n\\r\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\r\\n\\r\\n③ 如果还有运算符没被处理，就继续 ②\\r\\n\\r\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\r\\n\\r\\n机算：\\r\\n\\r\\n用栈实现前缀表达式的计算：\\r\\n\\r\\n①从右往左扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n![image-20220323214326729](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214326729.png)\\r\\n\\r\\n\\r\\n\\r\\n中->前\\r\\n\\r\\n注：先弹出的是左操作数，后弹出的是右操作数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220323214621134](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214621134.png)\\r\\n\\r\\n![image-20220324214643950](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324214643950.png)\\r\\n\\r\\n上三角按行存放 <===> 下三角按列存放\\r\\n\\r\\n下三角按行存<====>上三角按列存\\r\\n\\r\\n![image-20220404155200213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404155200213.png)\\r\\n\\r\\n###### 4/1\\r\\n\\r\\n串\\r\\n\\r\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\r\\n\\r\\n 高四位 低四位\\r\\n\\r\\na 0110\\t0001  \\r\\n\\r\\n![image-20220401151418753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401151418753.png)\\r\\n\\r\\nKMP：\\r\\n\\r\\n![image-20220401173325778](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401173325778.png)\\r\\n\\r\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\r\\n\\r\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\r\\n\\r\\n![image-20220401174809686](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401174809686.png)\\r\\n\\r\\n**nextVal数组求法**，先让第一位=0\\r\\n\\r\\n###### 4/3~4/5\\r\\n\\r\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\r\\n\\r\\n![image-20220403110614673](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403110614673.png)\\r\\n\\r\\ni<=n/2是分支结点，i>n/2是叶子结点\\r\\n\\r\\n![image-20220403114319211](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403114319211.png)\\r\\n\\r\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\r\\n\\r\\n![image-20220404164718616](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404164718616.png)\\r\\n\\r\\n线索化二叉树\\r\\n\\r\\n![image-20220404172003418](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404172003418.png)\\r\\n\\r\\n----\\r\\n\\r\\n![image-20220405213126866](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220405213126866.png)\\r\\n\\r\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\r\\n\\r\\n###### 4/6\\r\\n\\r\\n哈夫曼树：最优二叉树\\r\\n\\r\\n带权路径最小的二叉树\\r\\n\\r\\n**并查集代码**\\r\\n\\r\\n![image-20220406120550029](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406120550029.png)\\r\\n\\r\\n最坏情况下时间复杂度与树的高度h相关\\r\\n\\r\\n优化合并操作 小树并入大树\\r\\n\\r\\n![image-20220406121508045](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121508045.png)\\r\\n\\r\\nfind()最坏时间复杂度变为O(logn)\\r\\n\\r\\n![image-20220406121805400](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121805400.png)\\r\\n\\r\\n树越矮，时间复杂度越低\\r\\n\\r\\nfind优化操作\\r\\n\\r\\n![image-20220407095927853](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407095927853.png)\\r\\n\\r\\n```c\\r\\n/*int Find(int nums[],int index){\\r\\n    int root = index;\\r\\n    while(nums[root]>=0){\\r\\n        root = nums[root];\\r\\n    }\\r\\n    while(index!=root){\\r\\n        int record = root;\\r\\n        nums[index] = root;\\r\\n        root = record;\\r\\n    }\\r\\n    return root;\\r\\n}*/\\r\\n//使树的高度不超过O(a(n))的数量级\\r\\n\\r\\n\\r\\n#pragma once\\r\\n#define Size 100\\r\\nint UFSets[Size];\\r\\n\\r\\n//初始化并查集\\r\\nvoid Initial(int S[]) {\\r\\n\\tfor (int i = 0;i < Size;i++) {\\r\\n\\t\\tS[i] = -1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//查找操作，找x的根节点\\r\\nint Find(int s[], int x) {\\r\\n\\twhile (s[x]>0)\\r\\n\\t{\\r\\n\\t\\tx = s[x];\\r\\n\\t}\\r\\n\\treturn x;\\r\\n}\\r\\n\\r\\n//合并操作 根节点统一  树高<=logn + 1\\r\\nvoid Union(int s[], int root1, int root2) {\\r\\n\\tif (root1 == root2) {\\r\\n\\t\\treturn ;\\r\\n\\t}\\r\\n\\tif (s[root2] > s[root1]) { //root2是小树\\r\\n\\t\\ts[root1] += s[root2];\\r\\n\\t\\ts[root2] = root1;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\ts[root2] += s[root1];\\r\\n\\t\\ts[root1] = root2;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n![image-20220407102644213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407102644213.png)\\r\\n\\r\\n错题：\\r\\n\\r\\n![image-20220407151722612](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407151722612.png)\\r\\n\\r\\n![image-20220407153146599](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407153146599.png)\\r\\n\\r\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\r\\n\\r\\n![image-20220407171123064](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171123064.png)\\r\\n\\r\\n![image-20220407171457661](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171457661.png)\\r\\n\\r\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\r\\n\\r\\n###### 4/16\\r\\n\\r\\n图的顶点个数 = 图的阶数\\r\\n\\r\\n![image-20220416121001775](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416121001775.png)\\r\\n\\r\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\r\\n\\r\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\r\\n\\r\\n![image-20220416162035318](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416162035318.png)\\r\\n\\r\\n邻接表、邻接矩阵的**区别**\\r\\n\\r\\n![image-20220416163840634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416163840634.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 4/18\\r\\n\\r\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\r\\n\\r\\n```c\\r\\n// 邻接表中表对应的链表的顶点\\r\\ntypedef struct _ENode\\r\\n{\\r\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\r\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\r\\n}ENode, *PENode;\\r\\n\\r\\n// 邻接表中表的顶点\\r\\ntypedef struct _VNode\\r\\n{\\r\\n    char data;              // 顶点信息\\r\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\r\\n}VNode;\\r\\n\\r\\n// 邻接表\\r\\ntypedef struct _LGraph\\r\\n{\\r\\n    int vexnum;             // 图的顶点的数目\\r\\n    int edgnum;             // 图的边的数目\\r\\n    VNode vexs[MAX];\\r\\n}LGraph;\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\r\\n\\r\\n![image-20220418213147807](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213147807.png)\\r\\n\\r\\n![image-20220418213557320](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213557320.png)\\r\\n\\r\\n访问各个顶点所需时间+访问各边所需时间\\r\\n\\r\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\r\\n\\r\\n**深度优先遍历：**和树的**先根**遍历类似\\r\\n\\r\\n![image-20220419165025285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220419165025285.png)\\r\\n\\r\\n---\\r\\n\\r\\nPrim算法和kruskal算法![image-20220421202140630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421202140630.png)\\r\\n\\r\\n![image-20220421213517892](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421213517892.png)\\r\\n\\r\\n考频只有一题的选择：\\r\\n\\r\\n![image-20220421215042729](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421215042729.png)\\r\\n\\r\\n---\\r\\n\\r\\n关键路径\\r\\n\\r\\n![image-20220424212457566](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220424212457566.png)\\r\\n\\r\\n4/24复习\\r\\n\\r\\n![image-20220422181640348](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220422181640348.png)\\r\\n\\r\\ne(i) :活动ai最早开始的时间\\r\\n\\r\\nl(i) :活动ai最晚开始的时间\\r\\n\\r\\nvl(k)：活动vk最迟发生时间 vek:最早\\r\\n\\r\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\r\\n\\r\\n![image-20220429113037264](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429113037264.png)\\r\\n\\r\\n差值为0的就是关键路径\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#### 5 月\\r\\n\\r\\n![image-20220505203332110](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220505203332110.png)\\r\\n\\r\\n查找判定树\\r\\n\\r\\n判断「平衡二叉树」的 2 个条件：\\r\\n\\r\\n- **1. 是「二叉排序树」**\\r\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\r\\n\\r\\n二叉排序树\\r\\n\\r\\n平衡二叉树\\r\\n\\r\\n二叉搜索树\\r\\n\\r\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\r\\n\\r\\n---\\r\\n\\r\\n<h3>折半查找：</h3>\\r\\n\\r\\n只适用于有序的顺序表\\r\\n\\r\\n![image-20220801105659956](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801105659956.png)\\r\\n\\r\\n\\r\\n\\r\\n折半查找构成了二叉排序树\\r\\n\\r\\n可以把折半查找看成一颗二叉排序树\\r\\n\\r\\n![image-20220506172506706](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506172506706.png)\\r\\n\\r\\n二叉排序树删除操作\\r\\n\\r\\n![image-20220506173438156](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506173438156.png)\\r\\n\\r\\n7.3.3中要重点了解的例1~3，例4\\r\\n\\r\\n**简单路径定义：**\\r\\n\\r\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220512164410294](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512164410294.png)\\r\\n\\r\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\r\\n\\r\\n\\r\\n\\r\\n**红黑树性质**\\r\\n\\r\\n![image-20220512120734504](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512120734504.png)\\r\\n\\r\\n红黑树插入\\r\\n\\r\\n![image-20220512144705058](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512144705058.png)\\r\\n\\r\\n看“叔”脸色\\r\\n\\r\\n\\r\\n\\r\\n红黑树性质+插入总结：\\r\\n\\r\\n![image-20220512153750568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512153750568.png)\\r\\n\\r\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\r\\n\\r\\n**B树**\\r\\n\\r\\n特性\\r\\n\\r\\n![image-20220517191547133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517191547133.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517182017286](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517182017286.png)\\r\\n\\r\\n树的高度\\r\\n\\r\\n![image-20220517195601030](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517195601030.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517183218196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517183218196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517202426310](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517202426310.png)\\r\\n\\r\\n（上下限：除了根节点外，结点关键字个数n: )\\r\\n\\r\\n\\r\\n\\r\\n![image-20220519205336630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220519205336630.png)\\r\\n\\r\\nB树/B+树类比\\r\\n\\r\\n---\\r\\n\\r\\n**散列（哈希表）**\\r\\n\\r\\n拉链法：同义词串成一个链表\\r\\n\\r\\n开放定址法![image-20220520184858217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520184858217.png)\\r\\n\\r\\n着重考察：线性探测法、平方探测法\\r\\n\\r\\n\\r\\n\\r\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185042751.png)\\r\\n\\r\\n总结\\r\\n\\r\\n![image-20220520185629378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185629378.png)\\r\\n\\r\\n装填因子概念也需重视\\r\\n\\r\\nQuestion1:\\r\\n\\r\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\r\\n\\r\\n(1) 请画出所构造的散列表。\\r\\n\\r\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\r\\n\\r\\n![image-20220522195603948](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522195603948.png)\\r\\n\\r\\n\\r\\n\\r\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\r\\n\\r\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/23 排序算法\\r\\n\\r\\n插入排序法\\r\\n\\r\\n![image-20220523120242919](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220523120242919.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/27 快速排序\\r\\n\\r\\n时间、空间复杂度与递归层次有关\\r\\n\\r\\n![image-20220527151635848](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527151635848.png)\\r\\n\\r\\n**快排时间效率分析：**\\r\\n\\r\\n![image-20220527152551897](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527152551897.png)\\r\\n\\r\\n---\\r\\n\\r\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\r\\n\\r\\n![image-20220527153223741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527153223741.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### **8.3.3**\\r\\n\\r\\n---\\r\\n\\r\\n第七题：**x趟排序应产生x个分界线。**\\r\\n\\r\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\r\\n\\r\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\r\\n\\r\\n![image-20220527163829533](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527163829533.png)\\r\\n\\r\\n---\\r\\n\\r\\n第9题：关于快排的**完美**划分\\r\\n\\r\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\r\\n\\r\\n排序速度最慢：原数组已基本有序\\r\\n\\r\\n![image-20220527170237805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527170237805.png)\\r\\n\\r\\n##### 5/29 堆排序\\r\\n\\r\\n最主要的算法还是向下调整HeadAdjust()函数\\r\\n\\r\\n![image-20220529164723637](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529164723637.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220529165608132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529165608132.png)\\r\\n\\r\\n堆排序的空间复杂度：常数级 O(1)\\r\\n\\r\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\r\\n\\r\\n![image-20220529170403872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529170403872.png)\\r\\n\\r\\n堆的插入和删除\\r\\n\\r\\n考试可能考比较次数\\r\\n\\r\\n![image-20220529172811881](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529172811881.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/30 归并排序+基数排序\\r\\n\\r\\n二路归并：把两个已经有序的序列合并成一个\\r\\n\\r\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\r\\n\\r\\n![image-20220530201445366](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530201445366.png)\\r\\n\\r\\n**基数排序：**代码不怎么考，主要手算模拟即可\\r\\n\\r\\n![image-20220530203930350](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530203930350.png)\\r\\n\\r\\n---\\r\\n\\r\\n排序算法的空间、时间复杂度\\r\\n\\r\\n![image-20220531195457004](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531195457004.png)\\r\\n\\r\\n\\r\\n\\r\\n5/31外部排序\\r\\n\\r\\n\\r\\n\\r\\n![image-20220531214333361](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214333361.png)\\r\\n\\r\\nr<=K^h-1 ,树的结点最大的一层\\r\\n\\r\\n要归并的数据都是分块读入内存的\\r\\n\\r\\n![image-20220531214752539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214752539.png)\\r\\n\\r\\n\\r\\n\\r\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\r\\n\\r\\n![image-20220531215026199](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531215026199.png)\\r\\n\\r\\n\\r\\n\\r\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\r\\n\\r\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\r\\n\\r\\n##### 6/2 结尾\\r\\n\\r\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\r\\n\\r\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\r\\n\\r\\n考查手算模拟即可\\r\\n\\r\\n![image-20220602155542194](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602155542194.png)\\r\\n\\r\\n---\\r\\n\\r\\n**置换选择排序：**减少初始归并段的个数\\r\\n\\r\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\r\\n\\r\\n![image-20220602161911437](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602161911437.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n**最佳归并树**\\r\\n\\r\\n![image-20220602174054132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602174054132.png)\\r\\n\\r\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\r\\n\\r\\nk叉最佳归并树：\\r\\n\\r\\n![image-20220602164837160](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602164837160.png)\\r\\n\\r\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\r\\n\\r\\n![image-20220602165011687](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602165011687.png)\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**各种排序算法的性质总结**</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220602170322008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602170322008.png)\\r\\n\\r\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\r\\n\\r\\n\\r\\n\\r\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\r\\n\\r\\n![image-20220602201630861](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602201630861.png)\\r\\n\\r\\n---\\r\\n\\r\\n### 8/1 算法题\\r\\n\\r\\n数组题解题框架：\\r\\n\\r\\n![image-20220801155037671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801155037671.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"数据结构\",\"categoryName\":\"算法\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[\"数据结构与算法\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:51:08',NULL),
(1116,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\r\\n\\r\\n![image-20220308153016669](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308153016669.png)\\r\\n\\r\\n空间复杂度计算\\r\\n\\r\\n![image-20220308163338103](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308163338103.png)\\r\\n\\r\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\r\\n\\r\\nloga(M/N)=logaM - logaN\\r\\n\\r\\n###### 3/13\\r\\n\\r\\n![image-20220313212637718](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313212637718.png)\\r\\n\\r\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\r\\n\\r\\n![image-20220313213230498](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313213230498.png)\\r\\n\\r\\n###### 3/14\\r\\n\\r\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\r\\n\\r\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\r\\n\\r\\n最好情况：均在表尾插入/删除元素\\r\\n\\r\\n最坏：在表头插入、删除元素（移动次数多）\\r\\n\\r\\n![image-20220314173030789](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173030789.png)\\r\\n\\r\\n动态存储\\r\\n\\r\\n![image-20220314173152311](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173152311.png)\\r\\n\\r\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\r\\n\\r\\n![image-20220314181520001](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314181520001.png)\\r\\n\\r\\n复杂度为O(1)\\r\\n\\r\\n```c\\r\\n\\r\\n//头插法 3/15\\r\\nvoid insertListHead(LinkList &l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n    l->next =NULL; //可能有那啥的脏数据\\r\\n\\tNode* newNode;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\tnewNode->next = l->next;\\r\\n\\t\\tl->next = newNode;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//尾插法 3/15\\r\\nvoid insertListTail(LinkList& l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n\\tNode* newNode;\\r\\n\\tNode* tmp =l;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\ttmp->next = newNode;\\r\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\r\\n\\t}\\r\\n    tmp->next =NULL;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n静态链表：![image-20220315213703769](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315213703769.png)\\r\\n\\r\\n\\r\\n\\r\\n增删链表效率高于顺序表\\r\\n\\r\\n![image-20220315215132762](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215132762.png)\\r\\n\\r\\n![image-20220315215427937](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215427937.png)\\r\\n\\r\\n###### 3/18\\r\\n\\r\\n第一章：\\r\\n\\r\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\r\\n\\r\\nP4:综合应用题：\\r\\n\\r\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\r\\n\\r\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\r\\n\\r\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\r\\n\\r\\n答：![image-20220320165638974](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220320165638974.png)\\r\\n\\r\\n\\r\\n\\r\\nP18:综合应用题：\\r\\n\\r\\n01:\\r\\n\\r\\n```apl\\r\\nif(length<1){\\r\\n\\treturn false;\\r\\n}\\r\\nElemtype del = data[length-1];\\r\\nElemtype tmp;\\r\\nint pos=0;\\r\\nfor(int i=0;i<length-1;i++){\\r\\n\\ttmp = data[i];\\r\\n\\tif(data[i]<tmp){\\r\\n\\t\\ttmp = data[i];\\r\\n\\t\\tpos++;\\r\\n\\t}\\r\\n}\\r\\n\\tdata[pos] = del;\\r\\n\\tlength--;\\r\\n\\r\\n\\treturn true;\\r\\n```\\r\\n\\r\\n02:\\r\\n\\r\\n```bash\\r\\nvoid Reverse(Sqlist &l){\\r\\n\\tElemType tmp;\\r\\n\\tint pos = l.length-1;\\r\\n\\tfor(i=0;i<l.length/2;i++){\\r\\n\\t\\ttmp = l.data[i];\\r\\n\\t\\tl.data[i]= l.data[pos];\\r\\n\\t\\tpos--;\\r\\n\\t\\tl.data[pos] = tmp;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n错题总结：\\r\\n\\r\\nP17:\\r\\n\\r\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\r\\n\\r\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\r\\n\\r\\n08：线性表删除第i个元素移动n-i个元素即可\\r\\n\\r\\n###### 3/21\\r\\n\\r\\n![image-20220321163406818](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163406818.png)\\r\\n\\r\\n栈的出栈顺序数量的计算：卡特兰数\\r\\n\\r\\n![image-20220321163828984](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163828984.png)\\r\\n\\r\\ntop++ 和++top的区别\\r\\n\\r\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\r\\n\\r\\n![image-20220321164627443](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321164627443.png)\\r\\n\\r\\n栈满：top==MaxSize\\r\\n\\r\\n共享栈栈满条件：top1+1==top2\\r\\n\\r\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\r\\n\\r\\n![image-20220321171717178](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321171717178.png)\\r\\n\\r\\n括号匹配流程图\\r\\n\\r\\n![image-20220321175550753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175550753.png)\\r\\n\\r\\n用栈实现括号匹配：\\r\\n\\r\\n具体代码：\\r\\n\\r\\n```c\\r\\n#define Maxsize 10            //定义栈中元素的\\r\\ntypedef struct{\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top;                    //栈顶指针\\r\\n}SqStack;\\r\\n//初始化栈\\r\\nvoid InitStack(Sqstack &S)\\r\\n//判断栈是否为空\\r\\nbool stackEmpty(SqStack S)\\r\\n//新元素入栈\\r\\nbool Push(SqStack &S,char x)\\r\\n//栈顶元素出栈，用x返回\\r\\nbool Pop(SqStack &s,char &x)\\r\\n\\r\\n    //有栈的情况\\r\\nbool bracketCheck(char str[],int length) {\\r\\nSqStack s;\\r\\nInitStack(S); //初始化一个栈\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\r\\n}else {\\r\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\nPop(S,topElem);//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return StackEmpty(S);\\r\\n}\\r\\n\\r\\nbool compare(int x,int y){\\r\\n    if(x!=(y-1)){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n       //无栈的情况\\r\\nbool bracketCheck1(char str[],int length) {\\r\\n int MaxSize = length;\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top=-1;  \\r\\n\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n    if(compare(top,length)){\\r\\n\\t\\ttop++;\\r\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\r\\n    }\\r\\n}else {\\r\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\ntopElem = data[top];\\r\\n    top--;//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return top==-1;\\r\\n}\\r\\n    \\r\\n    \\r\\n    \\r\\n```\\r\\n\\r\\n![image-20220321175834694](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175834694.png)\\r\\n\\r\\n###### 3/23~24\\r\\n\\r\\n![image-20220324080429724](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324080429724.png)\\r\\n\\r\\n程序输出结果只能是第一种（唯一性、确定性）\\r\\n\\r\\n后缀表达式的手算方法：\\r\\n\\r\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\r\\n\\r\\n注意：两个操作数的左右顺序\\r\\n\\r\\n机算：\\r\\n\\r\\n![image-20220324100504170](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324100504170.png)\\r\\n\\r\\n用栈实现后缀表达式的计算：\\r\\n\\r\\n①从左往右扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n----\\r\\n\\r\\n前缀表达式：\\r\\n\\r\\n**中缀表达式转前缀表达式（手算）**\\r\\n\\r\\n① 确定中缀表达式中各个运算符的运算顺序\\r\\n\\r\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\r\\n\\r\\n③ 如果还有运算符没被处理，就继续 ②\\r\\n\\r\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\r\\n\\r\\n机算：\\r\\n\\r\\n用栈实现前缀表达式的计算：\\r\\n\\r\\n①从右往左扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n![image-20220323214326729](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214326729.png)\\r\\n\\r\\n\\r\\n\\r\\n中->前\\r\\n\\r\\n注：先弹出的是左操作数，后弹出的是右操作数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220323214621134](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214621134.png)\\r\\n\\r\\n![image-20220324214643950](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324214643950.png)\\r\\n\\r\\n上三角按行存放 <===> 下三角按列存放\\r\\n\\r\\n下三角按行存<====>上三角按列存\\r\\n\\r\\n![image-20220404155200213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404155200213.png)\\r\\n\\r\\n###### 4/1\\r\\n\\r\\n串\\r\\n\\r\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\r\\n\\r\\n 高四位 低四位\\r\\n\\r\\na 0110\\t0001  \\r\\n\\r\\n![image-20220401151418753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401151418753.png)\\r\\n\\r\\nKMP：\\r\\n\\r\\n![image-20220401173325778](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401173325778.png)\\r\\n\\r\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\r\\n\\r\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\r\\n\\r\\n![image-20220401174809686](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401174809686.png)\\r\\n\\r\\n**nextVal数组求法**，先让第一位=0\\r\\n\\r\\n###### 4/3~4/5\\r\\n\\r\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\r\\n\\r\\n![image-20220403110614673](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403110614673.png)\\r\\n\\r\\ni<=n/2是分支结点，i>n/2是叶子结点\\r\\n\\r\\n![image-20220403114319211](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403114319211.png)\\r\\n\\r\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\r\\n\\r\\n![image-20220404164718616](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404164718616.png)\\r\\n\\r\\n线索化二叉树\\r\\n\\r\\n![image-20220404172003418](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404172003418.png)\\r\\n\\r\\n----\\r\\n\\r\\n![image-20220405213126866](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220405213126866.png)\\r\\n\\r\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\r\\n\\r\\n###### 4/6\\r\\n\\r\\n哈夫曼树：最优二叉树\\r\\n\\r\\n带权路径最小的二叉树\\r\\n\\r\\n**并查集代码**\\r\\n\\r\\n![image-20220406120550029](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406120550029.png)\\r\\n\\r\\n最坏情况下时间复杂度与树的高度h相关\\r\\n\\r\\n优化合并操作 小树并入大树\\r\\n\\r\\n![image-20220406121508045](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121508045.png)\\r\\n\\r\\nfind()最坏时间复杂度变为O(logn)\\r\\n\\r\\n![image-20220406121805400](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121805400.png)\\r\\n\\r\\n树越矮，时间复杂度越低\\r\\n\\r\\nfind优化操作\\r\\n\\r\\n![image-20220407095927853](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407095927853.png)\\r\\n\\r\\n```c\\r\\n/*int Find(int nums[],int index){\\r\\n    int root = index;\\r\\n    while(nums[root]>=0){\\r\\n        root = nums[root];\\r\\n    }\\r\\n    while(index!=root){\\r\\n        int record = root;\\r\\n        nums[index] = root;\\r\\n        root = record;\\r\\n    }\\r\\n    return root;\\r\\n}*/\\r\\n//使树的高度不超过O(a(n))的数量级\\r\\n\\r\\n\\r\\n#pragma once\\r\\n#define Size 100\\r\\nint UFSets[Size];\\r\\n\\r\\n//初始化并查集\\r\\nvoid Initial(int S[]) {\\r\\n\\tfor (int i = 0;i < Size;i++) {\\r\\n\\t\\tS[i] = -1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//查找操作，找x的根节点\\r\\nint Find(int s[], int x) {\\r\\n\\twhile (s[x]>0)\\r\\n\\t{\\r\\n\\t\\tx = s[x];\\r\\n\\t}\\r\\n\\treturn x;\\r\\n}\\r\\n\\r\\n//合并操作 根节点统一  树高<=logn + 1\\r\\nvoid Union(int s[], int root1, int root2) {\\r\\n\\tif (root1 == root2) {\\r\\n\\t\\treturn ;\\r\\n\\t}\\r\\n\\tif (s[root2] > s[root1]) { //root2是小树\\r\\n\\t\\ts[root1] += s[root2];\\r\\n\\t\\ts[root2] = root1;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\ts[root2] += s[root1];\\r\\n\\t\\ts[root1] = root2;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n![image-20220407102644213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407102644213.png)\\r\\n\\r\\n错题：\\r\\n\\r\\n![image-20220407151722612](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407151722612.png)\\r\\n\\r\\n![image-20220407153146599](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407153146599.png)\\r\\n\\r\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\r\\n\\r\\n![image-20220407171123064](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171123064.png)\\r\\n\\r\\n![image-20220407171457661](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171457661.png)\\r\\n\\r\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\r\\n\\r\\n###### 4/16\\r\\n\\r\\n图的顶点个数 = 图的阶数\\r\\n\\r\\n![image-20220416121001775](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416121001775.png)\\r\\n\\r\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\r\\n\\r\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\r\\n\\r\\n![image-20220416162035318](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416162035318.png)\\r\\n\\r\\n邻接表、邻接矩阵的**区别**\\r\\n\\r\\n![image-20220416163840634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416163840634.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 4/18\\r\\n\\r\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\r\\n\\r\\n```c\\r\\n// 邻接表中表对应的链表的顶点\\r\\ntypedef struct _ENode\\r\\n{\\r\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\r\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\r\\n}ENode, *PENode;\\r\\n\\r\\n// 邻接表中表的顶点\\r\\ntypedef struct _VNode\\r\\n{\\r\\n    char data;              // 顶点信息\\r\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\r\\n}VNode;\\r\\n\\r\\n// 邻接表\\r\\ntypedef struct _LGraph\\r\\n{\\r\\n    int vexnum;             // 图的顶点的数目\\r\\n    int edgnum;             // 图的边的数目\\r\\n    VNode vexs[MAX];\\r\\n}LGraph;\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\r\\n\\r\\n![image-20220418213147807](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213147807.png)\\r\\n\\r\\n![image-20220418213557320](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213557320.png)\\r\\n\\r\\n访问各个顶点所需时间+访问各边所需时间\\r\\n\\r\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\r\\n\\r\\n**深度优先遍历：**和树的**先根**遍历类似\\r\\n\\r\\n![image-20220419165025285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220419165025285.png)\\r\\n\\r\\n---\\r\\n\\r\\nPrim算法和kruskal算法![image-20220421202140630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421202140630.png)\\r\\n\\r\\n![image-20220421213517892](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421213517892.png)\\r\\n\\r\\n考频只有一题的选择：\\r\\n\\r\\n![image-20220421215042729](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421215042729.png)\\r\\n\\r\\n---\\r\\n\\r\\n关键路径\\r\\n\\r\\n![image-20220424212457566](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220424212457566.png)\\r\\n\\r\\n4/24复习\\r\\n\\r\\n![image-20220422181640348](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220422181640348.png)\\r\\n\\r\\ne(i) :活动ai最早开始的时间\\r\\n\\r\\nl(i) :活动ai最晚开始的时间\\r\\n\\r\\nvl(k)：活动vk最迟发生时间 vek:最早\\r\\n\\r\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\r\\n\\r\\n![image-20220429113037264](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429113037264.png)\\r\\n\\r\\n差值为0的就是关键路径\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#### 5 月\\r\\n\\r\\n![image-20220505203332110](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220505203332110.png)\\r\\n\\r\\n查找判定树\\r\\n\\r\\n判断「平衡二叉树」的 2 个条件：\\r\\n\\r\\n- **1. 是「二叉排序树」**\\r\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\r\\n\\r\\n二叉排序树\\r\\n\\r\\n平衡二叉树\\r\\n\\r\\n二叉搜索树\\r\\n\\r\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\r\\n\\r\\n---\\r\\n\\r\\n<h3>折半查找：</h3>\\r\\n\\r\\n只适用于有序的顺序表\\r\\n\\r\\n![image-20220801105659956](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801105659956.png)\\r\\n\\r\\n\\r\\n\\r\\n折半查找构成了二叉排序树\\r\\n\\r\\n可以把折半查找看成一颗二叉排序树\\r\\n\\r\\n![image-20220506172506706](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506172506706.png)\\r\\n\\r\\n二叉排序树删除操作\\r\\n\\r\\n![image-20220506173438156](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506173438156.png)\\r\\n\\r\\n7.3.3中要重点了解的例1~3，例4\\r\\n\\r\\n**简单路径定义：**\\r\\n\\r\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220512164410294](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512164410294.png)\\r\\n\\r\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\r\\n\\r\\n\\r\\n\\r\\n**红黑树性质**\\r\\n\\r\\n![image-20220512120734504](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512120734504.png)\\r\\n\\r\\n红黑树插入\\r\\n\\r\\n![image-20220512144705058](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512144705058.png)\\r\\n\\r\\n看“叔”脸色\\r\\n\\r\\n\\r\\n\\r\\n红黑树性质+插入总结：\\r\\n\\r\\n![image-20220512153750568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512153750568.png)\\r\\n\\r\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\r\\n\\r\\n**B树**\\r\\n\\r\\n特性\\r\\n\\r\\n![image-20220517191547133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517191547133.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517182017286](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517182017286.png)\\r\\n\\r\\n树的高度\\r\\n\\r\\n![image-20220517195601030](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517195601030.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517183218196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517183218196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517202426310](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517202426310.png)\\r\\n\\r\\n（上下限：除了根节点外，结点关键字个数n: )\\r\\n\\r\\n\\r\\n\\r\\n![image-20220519205336630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220519205336630.png)\\r\\n\\r\\nB树/B+树类比\\r\\n\\r\\n---\\r\\n\\r\\n**散列（哈希表）**\\r\\n\\r\\n拉链法：同义词串成一个链表\\r\\n\\r\\n开放定址法![image-20220520184858217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520184858217.png)\\r\\n\\r\\n着重考察：线性探测法、平方探测法\\r\\n\\r\\n\\r\\n\\r\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185042751.png)\\r\\n\\r\\n总结\\r\\n\\r\\n![image-20220520185629378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185629378.png)\\r\\n\\r\\n装填因子概念也需重视\\r\\n\\r\\nQuestion1:\\r\\n\\r\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\r\\n\\r\\n(1) 请画出所构造的散列表。\\r\\n\\r\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\r\\n\\r\\n![image-20220522195603948](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522195603948.png)\\r\\n\\r\\n\\r\\n\\r\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\r\\n\\r\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/23 排序算法\\r\\n\\r\\n插入排序法\\r\\n\\r\\n![image-20220523120242919](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220523120242919.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/27 快速排序\\r\\n\\r\\n时间、空间复杂度与递归层次有关\\r\\n\\r\\n![image-20220527151635848](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527151635848.png)\\r\\n\\r\\n**快排时间效率分析：**\\r\\n\\r\\n![image-20220527152551897](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527152551897.png)\\r\\n\\r\\n---\\r\\n\\r\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\r\\n\\r\\n![image-20220527153223741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527153223741.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### **8.3.3**\\r\\n\\r\\n---\\r\\n\\r\\n第七题：**x趟排序应产生x个分界线。**\\r\\n\\r\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\r\\n\\r\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\r\\n\\r\\n![image-20220527163829533](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527163829533.png)\\r\\n\\r\\n---\\r\\n\\r\\n第9题：关于快排的**完美**划分\\r\\n\\r\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\r\\n\\r\\n排序速度最慢：原数组已基本有序\\r\\n\\r\\n![image-20220527170237805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527170237805.png)\\r\\n\\r\\n##### 5/29 堆排序\\r\\n\\r\\n最主要的算法还是向下调整HeadAdjust()函数\\r\\n\\r\\n![image-20220529164723637](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529164723637.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220529165608132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529165608132.png)\\r\\n\\r\\n堆排序的空间复杂度：常数级 O(1)\\r\\n\\r\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\r\\n\\r\\n![image-20220529170403872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529170403872.png)\\r\\n\\r\\n堆的插入和删除\\r\\n\\r\\n考试可能考比较次数\\r\\n\\r\\n![image-20220529172811881](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529172811881.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/30 归并排序+基数排序\\r\\n\\r\\n二路归并：把两个已经有序的序列合并成一个\\r\\n\\r\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\r\\n\\r\\n![image-20220530201445366](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530201445366.png)\\r\\n\\r\\n**基数排序：**代码不怎么考，主要手算模拟即可\\r\\n\\r\\n![image-20220530203930350](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530203930350.png)\\r\\n\\r\\n---\\r\\n\\r\\n排序算法的空间、时间复杂度\\r\\n\\r\\n![image-20220531195457004](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531195457004.png)\\r\\n\\r\\n\\r\\n\\r\\n5/31外部排序\\r\\n\\r\\n\\r\\n\\r\\n![image-20220531214333361](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214333361.png)\\r\\n\\r\\nr<=K^h-1 ,树的结点最大的一层\\r\\n\\r\\n要归并的数据都是分块读入内存的\\r\\n\\r\\n![image-20220531214752539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214752539.png)\\r\\n\\r\\n\\r\\n\\r\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\r\\n\\r\\n![image-20220531215026199](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531215026199.png)\\r\\n\\r\\n\\r\\n\\r\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\r\\n\\r\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\r\\n\\r\\n##### 6/2 结尾\\r\\n\\r\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\r\\n\\r\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\r\\n\\r\\n考查手算模拟即可\\r\\n\\r\\n![image-20220602155542194](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602155542194.png)\\r\\n\\r\\n---\\r\\n\\r\\n**置换选择排序：**减少初始归并段的个数\\r\\n\\r\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\r\\n\\r\\n![image-20220602161911437](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602161911437.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n**最佳归并树**\\r\\n\\r\\n![image-20220602174054132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602174054132.png)\\r\\n\\r\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\r\\n\\r\\nk叉最佳归并树：\\r\\n\\r\\n![image-20220602164837160](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602164837160.png)\\r\\n\\r\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\r\\n\\r\\n![image-20220602165011687](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602165011687.png)\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**各种排序算法的性质总结**</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220602170322008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602170322008.png)\\r\\n\\r\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\r\\n\\r\\n\\r\\n\\r\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\r\\n\\r\\n![image-20220602201630861](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602201630861.png)\\r\\n\\r\\n---\\r\\n\\r\\n### 8/1 算法题\\r\\n\\r\\n数组题解题框架：\\r\\n\\r\\n![image-20220801155037671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801155037671.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"2022-3-5~6-5 数据结构所有笔记\",\"categoryName\":\"算法\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:52:28',NULL),
(1117,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n>\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n>\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n>\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n>\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n>\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n>\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n>\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n>\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n>\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n>\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n>\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢\\n\\n> 谢谢\",\"articleTitle\":\"4\",\"id\":58,\"isTop\":0,\"status\":3,\"tagNameList\":[],\"type\":0}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:53:40',NULL),
(1118,'文章模块','修改','/admin/articles','com.minzheng.blog.controller.ArticleController.updateArticleDelete','恢复或删除文章','[{\"idList\":[58],\"isDelete\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 12:53:44',NULL),
(1119,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"22222\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"2022-08-30 你好\",\"categoryName\":\"算法\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:01:01',NULL),
(1120,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"22222\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"2022-08-30 你好\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"手译\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:01:40',NULL),
(1121,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"22222\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:02:37',NULL),
(1122,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"22222\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:03:25',NULL),
(1123,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢\\n\\n> 谢谢\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:04:01',NULL),
(1124,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<h4>【TED演讲手译】4.15~4.20 A game that helps us understand loneliness</h4>\\n\\n###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢 :D\\n\\n> 谢谢\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:05:46',NULL),
(1125,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"## 【TED演讲手译】4.15~4.20 A game that helps us understand loneliness\\n![image233](http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg)\\n###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢 :D\\n\\n> 谢谢\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:07:42',NULL),
(1126,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"**简介**?\\n- 即将毕业的大四学生一枚 专业信息管理与信息系统 \\n- 业余爱好coding和数学建模\\n- 随便写写，纯属有感而发??\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:12:23',NULL),
(1127,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"## **简介**?\\n- 即将毕业的大四学生一枚 专业信息管理与信息系统 \\n- 业余爱好coding和数学建模\\n- 随便写写，纯属有感而发??\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:13:23',NULL),
(1128,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"## **简介**?\\n- 即将毕业的大四学生一枚 专业信息管理与信息系统 \\n- 业余爱好coding和数学建模\\n- 随便写写，纯属有感而发??\\nhttps://www.static.davan.work/articles/yikaitongxue.jpg\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:14:52',NULL),
(1129,'博客信息模块','修改','/admin/about','com.minzheng.blog.controller.BlogInfoController.updateAbout','修改关于我信息','[{\"aboutContent\":\"## **简介**?\\n- 即将毕业的大四学生一枚 专业信息管理与信息系统 \\n- 业余爱好coding和数学建模\\n- 随便写写，纯属有感而发??\\n\"}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:15:09',NULL),
(1130,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"**【TED演讲手译】4.15~4.20 A game that helps us understand loneliness**\\n![image233](http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg)\\n###### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n###### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n###### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n\\n---\\n\\n06:13\\n\\n###### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n\\n---\\n\\n###### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢 :D\\n\\n> 谢谢\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:27:41',NULL),
(1131,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"### 【TED演讲手译】4.15~4.20 A game that helps us understand loneliness\\n![image233](http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg)\\n\\n#### 4/15\\n\\nHave you ever felt lonely? The urge of wanting to connect with people, but  you seem to have no one you really would want to contact? Or, it\'s a  Friday night and you want to be with others, but you have no energy to  go out, so instead you sit at home all evening, watch Netflix and feel  more alone than ever? You feel like a monster between humans that know  how to function. This is what loneliness felt like to me.\\n\\n你曾经感到过孤独吗？尽管有着强烈与人们交流的意向，但你看起来似乎并没有真正想要与之交流的对象？或者说，在一个周五的晚上你想和其他人在一起聚聚但你却没有想出去的力气，于是你选择整晚宅在家里，刷着Netflix并感到比之前更加孤独了。在普通人群中，你看上去像个知道如何活着的一只怪物。这便是我对孤独的感觉**~~（对于我来说是什么样的~~**\\n\\n> 你曾感到孤独吗？ 尽管内心有与人联系的强烈愿望， 却没有可以找的人？ 或者在周五的晚上，你想找人聚聚， 却没有力气出门， 于是你选择整晚宅在家里， 刷网飞上的剧， 感到更加孤独。 在一群正常人中间， 你觉得自己就是个怪物。 这就是孤独给我的感受。\\n\\n----\\n\\n\\n\\n00:35\\n\\nSo I\'m an artist, and I process my emotional world by sharing my feelings  through my art. If you share your feelings with someone, and they  understand and share those feelings too, you create an emotional and  deep connection. This is why you can be surrounded by hundreds of  people, jump from one candidate to the next, but still feel lonely. It\'s because these deeper connections haven\'t been made.\\n\\n所以，我是一名艺术家，我通过艺术分享我的感受来表达我的情感世界。如果你与其他人分享你的感受，同时他们也<font color=\'red\' font-size:10>感同身受</font>~~理解并分享那些感受~~，<font color=\'red\'>你（+们）便创造了情感上的深度联系</font>~~一种情感与更深层次的连接~~。这便是为什么尽管你身边~~环绕着数百个人~~有很多人的情况下，从一个交流候选人跳到另一个候选人但仍然感觉孤独，这是因为你们之间没有建立更深一步的联系。~~这些更深层次的连接还没被创造出来~~。\\n\\n> 我是一名艺术家， 我通过艺术分享感受， 来表达我的情感世界。 如果你和某人分享你的感受， 他们感同身受，  并且也分享自己的感受， 你们就建立了情感上的深度联系。 这就是为什么，尽管你身边有很多人，从一个候选人到另一个候选人，但仍感到孤独，是因为你们之间没有建立深一步的联系。\\n\\n---\\n\\n#### 4/16\\n\\n01:09\\n\\nI was an always-happy child. I think we nearly have no single photo of  me where I don\'t smile broadly or laugh or joke around. And this went on until ... well, it\'s still the case. But I had many friend groups up  until, as a young adult, I moved to another city for my first job as a  comic artist. And like so many young, thriving people all over the  planet, I concentrated all my energy into my work life. But, if you  spend, like, 90 percent of your daily capacity trying to succeed at  work, of course there is nothing left to take care of all the other  important aspects in your life, like your human  relationships. Nourishing（培养） friendships as an adult is work. You need to  be consistent with connecting. You need to be open, you need to be  honest. And this is all I struggled with, because I tend to camouflage（伪装  my real feelings by trying to appear always happy and trying to make  everyone else happy, too, by trying to fix their problems. And I know a  lot of us are guilty of this, because it\'s an easy way to not think  about your own issues. Isn\'t it? Hmm? Hmm? Hmm?\\n\\n我曾经是一个~~保持快乐~~<font color=\'red\'>无忧无虑</font>的孩子。我认为我们几乎没有一张我不笑或者大笑或者搞怪的照片。这一直持续到...好吧，这是往事惹。但我仍然拥有许多的朋友圈子，直到我成年之后，我因为第一份工作成为了一名漫画家，搬到了其他城市。~~和其他很多年轻人一样，追赶~~ <font color=\'red\'>就像世界上许多年轻人一样,</font>我将我所有的精力倾泻到自己的工作生活中。但是，如果你将90%的生活空间投入到工作中，为了在工作取得成功,<font color=\'red\'>显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。</font>~~当然从你生活中其他像你的社交关系之类这样重要的角度来看，这里并没有什么值得去关心的。~~培养成人之间的友谊是一门（人生的）必修课。你需要~~与他们保持长久的联系~~ <font color=\'red\'>持续不断地维系</font>。你需要变得开放，保持真诚。以上这些也是我所一直纠结的，因为我倾向于通过尝试表现的开朗以及尝试去使其他人也感到快乐来掩饰我的真情实感。我还知道我们中的很多人也为这种情况而感到愧疚，因为这是一种使你<font color=\'red\'>能忘掉自己烦恼的简单方法</font>~~不考虑自己的问题的一种容易的（处事）方式~~, 不是吗？\\n\\n> 我曾是一个无忧无虑的孩子。 几乎所有我的照片， 都面带笑脸，或是大笑，或者搞怪。 这一直持续到—— 好吧，现在也依旧如此。 以前我有很多朋友圈子， 直到成年后不久，我搬到另一个城市， 开始第一份工作——漫画家。 就像全世界无数勤奋的年轻样， 我把所有精力都投入到了工作中。 但是，如果你每天把 90%  的精力 都投入工作， 显然你没什么余力 去关注你生活中其他重要的方面了， 比如人际关系。 成年人培养友谊是一项工作。 你必须持续不断地维系。 需要开放，需要坦诚。 这是我一直在纠结的点， 因为我一直隐藏自己的真实感受， 让自己看起来开心， 我也一直努力帮别人解决问题， 从而让每个人也都开心。 我知道，很多人都有这个问题， 因为这是一种能让我们 忘掉自己烦恼的简单方法， 不是吗？ 对吧，不是吗？\\n\\n---\\n\\n02:37\\n\\nOK.The turning point came when I fell into an emotionally abusive  relationship just a few years ago. He isolated me and left me feeling  more alone than ever. It was the lowest point in my life, but it was  also my wake-up call, because it was the first time that I really felt  loneliness.\\n\\n好的。转折点来了，就是仅仅几年前，我陷入了一段精神受到虐待的糟糕的感情。他孤立了我，让我感觉比之前更加孤独了<font color=\'red\'>（前所未有的）</font>。这便是我人生中的最低谷，但这也给我来了记警钟，因为这是我第一次真正的感受到了孤独。\\n\\n\\n\\n> 好吧。就在几年前我陷入了 一段糟糕的感情，精神遭到虐待， 这对我来说是一个转折点。 他孤立我， 让我感到了前所未有的孤独。 那是我人生最低谷， 但也给我敲响了一记警钟， 因为这是我第一次 真正感受到了孤独。\\n\\n---\\n\\n03:08\\n\\nMany artists put their feelings into their art. There are endless books,  movies, paintings, music, all filled with the real emotion of an  artist. So, as an artist myself, I did the same. I shared my feelings. I wanted to help people cope with loneliness. I wanted, yeah, to make  them understand it, to really experience it through my art in the form  of an interactive story, a video game.\\n\\n很多艺术家将他们的情感投入到他们的艺术中。这有无穷无尽的书籍、电源、绘画、音乐都充满了艺术家的真情实感。所以，作为艺术家的我也不例外。我分享了自己的感受。我想去帮助<font color=\'red\'>人们应对孤独。</font>~~被孤独所包围的人们~~  我想的是，对了，以及帮助他们去了解孤独，~~去真正的通过我的艺术品来~~ <font color=\'red\'>让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。</font>\\n\\n> 许多艺术家将他们的情感注入艺术。 有不计其数的书籍、电影、绘画、音乐 都充满了艺术家的真情实感。 同为艺术家的我也不例外。 我分享自己的感受。 我想要帮助人们应对孤独。 让他们了解孤独， 让他们真正地经历孤独， 通过交互故事的艺术形式—— 电子游戏。\\n\\n---\\n\\n03:42\\n\\nSo, in our game -- we called it \\\"Sea of Solitude\\\" -- you are a person named Kay, who is suffering from such strong loneliness that her inner  feelings -- the anger, the feeling of hopelessness, worthlessness  -- turn to the outside, and she becomes a monster. The game -- well, Kay -- is actually a representation of me and the path I went through to  overcome my struggles. The game plays, actually, in Kay\'s mind, so you  walk through a world that is flooded by her tears, and the weather is  changing by her mood, how her mood is changing. And, well, the only  thing Kay wears, the only thing, is her backpack. It\'s the baggage we  all carry throughout our life. And Kay doesn\'t know how to cope with her emotions in the right way, so her backpack becomes bigger and  bigger until it bursts, and she finally is forced to overcome her own  struggles.\\n\\n~~所以，~~ 在我们的游戏里——我们称这个游戏交“孤独之海”——你是一个名为Kay的人，因为承受着来如此强烈的孤独以至于她内心情感——愤怒，一种绝望、无用感的感情——（从内）像外爆发出来，将她变成了怪物。在游戏中，事实上，kay——也确切的代表了我，以及我曾为了战胜我内心挣扎的心路。这款游戏的背景实际上发生在kay的脑海中，所以你会走过一个被她泪水所淹没的世界，这个世界的天气随她的心情改变而改变。而且kay唯一所携带的东西就是她的背包。这代表着在人生中我们所有人所背负的行囊。Kay不知道如何去正确的应对她的情感，所以她的背包变得越来越大，~~直到爆炸~~ <font color=\'red\'>直到她不堪重负， </font>~~她最终被迫去解决自己的挣扎~~<font color=\'red\'>于是她不得不克服自己的困难。</font>\\n\\n\\n\\n> 在我们的游戏里—— 这个游戏叫《孤独之海》—— 你是一个名叫凯的人， 承受着巨大的孤独， 以至于她内心的情绪—— 那种愤怒， 那种绝望，那种无用感—— 从内向外爆发出来， 将她变成了一个怪物。 这个游戏——其实凯 —— 她的原型就是我， 也展示了我如何战胜内心挣扎的过程。 这个游戏其实发生在凯的脑海中， 所以你会穿梭在  一个被她泪水淹没的世界 天气也会随着她的心情变化 而发生变化。 凯带着的唯一一件东西， 唯一的装备， 就是她的背包。 这是一个伴随我们一生的行囊。 凯也不知道该如何正确处理她的情绪， 所以她的背包变得越来越大， 直到她不堪重负， 于是她不得不克服自己的困难。\\n\\n---\\n\\n#### 4/18\\n\\n04:58\\n\\nIn our sroty, we present many different manifestations of  loneliness. Loneliness through social exclusion（排斥） is very common. In our  game, the brother of Kay got bullied in his school, and he just wants to hide and fly away. And we portray him as a huge bird monster surrounded by thick fog. The player has to actually walk through his school and  experience, really feel the harm, that the brother had been  through, because for a long time, nobody really listens to him. But the  very moment friends and family start to listen, the first step towards  overcoming this form of loneliness had been made.\\n\\n在我们的故事中，我们展现了很多不同的孤独的展现形式。孤独通过社会排斥而产生的情况是十分常见的。在我们的游戏中，Kay的哥哥在他所在的学校受到了**霸凌，**以至于他只想这躲藏还有远走高飞。然后我们将他的形象描绘成一只被浓雾所包围的“大鸟怪”,~~他实实在在的受到了伤害，那个兄弟挣扎了很长一段时间，以至于没有人再听他倾诉了。~~<font color=\'red\'>玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。</font>但在朋友们和家人们开始倾听他的遭遇的那一瞬间，~~走向解决这种孤独的形成的第一步正式落地了~~<font color=\'red\'>其实已经迈出了 克服这类孤独的第一步。</font>\\n\\n\\n\\n> 在我们的故事中，我们展现了 孤独的多种表现形式。 社会排斥所产生的孤独很常见。 在我们的游戏中，凯的哥哥在学校受到霸凌， 他只想躲藏和逃离。 我们把他塑造为一只  被浓雾笼罩的巨型怪鸟。 玩家必须要穿过他的校园， 真实体验凯的哥哥 所经历的伤害， 因为很长时间以来， 没有人真正倾听他。 但是当朋友和家人  开始倾听的那一瞬间， 其实已经迈出了 克服这类孤独的第一步。\\n\\n---\\n\\n05:44\\n\\nWe also show loneliness in relationships, like when parents just stay  together for the sake of their kids but end up hurting the entire  family. We put the player literally in between the two parents while  they are fighting, and you get hurt in the middle. They don\'t even see  that their daughter, Kay, is right there until she breaks down.\\n\\n在感情关系中，我们也展现了孤独，就像当家长仅仅只是为了他们的孩子而待在一起但最终以伤害了整个家庭而告终。当父母在吵架时，我们将玩家放到他们中间，你在~~中间~~其中受到了伤害。他们甚至没有关心他们的女儿Kay就在旁边，直到她崩溃\\n\\n\\n\\n> 我们也展现了感情中的孤独， 比如家长为了孩子 而勉强在一起， 但最终伤害了整个家庭。 父母在吵架的时候， 我们把玩家放在他们中间， 你在其中会受到伤害。 他们甚至看不见女儿凯就在边上， 直到她崩溃。\\n\\n---\\n\\n06:13\\n\\n#### 4/19\\n\\nWe also show loneliness through mental health issues, with the boyfriend  of Kay, who suffers from depression and shows that sometimes it is most  important to focus on your own well-being first. The boyfriend also  tends to camouflage his feelings, so he appears like a lone, shiny white wolf. But the moment he starts to interact with his girlfriend,  Kay, the mask falls off, and we see the black dog beneath  it: depression.\\n\\n我们也通过精神健康疾病来反映出孤独，Kay的男友，受到了~~沮丧~~抑郁症的折磨。这体现出了有时候最重要的就是先关注你自己的情况（<font color=\'red\'>其实有些时候 首先关注自己的健康最为重要。</font>）。Kay的男友也倾向于掩盖他的情感，所有他看上去像一匹孤独且~~害羞~~闪亮的白狼。但在他开始与女友,Kay,建立互动的那一瞬间，脸上的面具便脱落了<!--伪装消失了-->。我们所看到的是一只黑狗藏在下面：沮丧 <!--我们可以看到隐藏其中的一只黑狗的形象：抑郁症。-->\\n\\n\\n\\n> 我们也通过心理健康问题来展现孤独， 例如凯的男友，遭受抑郁症折磨， 其实有些时候 首先关注自己的健康最为重要。 她的男友也倾向于隐藏自己的感受， 所以他的形象是一只孤独却闪亮的白狼。 但在他开始和女友凯互动的瞬间， 伪装消失了， 我们可以看到隐藏其中的 一只黑狗的形象： 抑郁症。\\n\\n---\\n\\n06:51\\n\\nSometimes we put on a smile instead of dealing with the issues at hand, and that  can ultimately make it worse, affect the people around us and damage our relationships.\\n\\n有时我们面带微笑而不是着手去处理问题，~~那便会~~最终使事情变得更糟，影响我们身边的人以及摧毁我们之间的关系\\n\\n> 有时我们面带微笑， 而不去处理手中的问题， 最终会让事情变得更糟， 影响我们身边的人， 破坏我们之间的关系。\\n\\n---\\n\\n07:07\\n\\nSo Kay herself we portray as ripped apart into her basic emotions. Some  help you, some are trying to stop you. Self-Doubt is a huge  creature, always telling Kay how worthless she is and that she should  just give up. Like in real life, Self-Doubt is blocking the path, and it seems impossible to overcome it. Destroying the omnipresence of  Self-Doubt is a slow process. But in the game, you can slowly, like,  shrink her, so she turns from self-doubt to actually healthy doubt, and  you can finally trust her advice. We also show Self-Destruction. It\'s a  huge monster always lurking（潜伏的） nearby under the water\'s  surface. Self-Destruction is actually the main antagonist（敌手） of the  game, and she is always trying to drown you in the ocean of tears. But,  when she actually drowns you, you wake up just a few moments  [before], and you have a chance to progress again. We wanted to  show that we all go through hardships in our life, we all do. But if you at least, like, stand up and try to move forward, you are very likely  to make it through your struggle, step by step.\\n\\n因此我们把Kay塑造成一个处于被她基本情绪所撕裂的人（<font color=\'red\'>被自己的情绪左右的人</font>）。一些情绪可以帮助你，一些情绪正尝试去阻止你。“自我怀疑”是一种<font color=\'red\'>强大的存在</font> ~~巨型的生物~~，它一直告诉Kay说她是多么的无用，那么她应该所做的仅仅是放弃。就像在现实生活中，“自我怀疑”是生命之路上的拦路虎，这看上去是不可能解决的。摧毁无所不在的“自我怀疑”是一段缓慢的过程。但在游戏中，你可以慢慢的缩小她，因此她从“自我怀疑”<font color=\'red\'>转化为合理的怀疑 ~~转变成了一种实际上的健康问题~~</font>到了最后你便可以相信她的建议。我们也会表现出“自我毁灭”的症状。这是一只经常潜伏在水面之下的怪物。“自我毁灭”其实是游戏中的主要敌人。她总是尝试将你淹死在泪水的海洋中。但是，当她要真正淹死你的时候，你会在很短的时间内醒来[之前]，然后获得再一次尝试的机会。我们所想要展示的是，我们都可以穿过生命中的艰难时刻。但如果你至少能站起来，尝试向前进，你将很有可能一步一步的通过自己的奋斗战胜磨难。\\n\\n> 因此我们把凯 塑造为一个被自己的情绪左右的人。 有些情绪能帮到你， 而有些却在阻挠你。 自我怀疑是一种强大的存在， 它总是让凯觉得自己是多么的无用， 她应该就这么放弃。 就像在现实生活中， 自我怀疑阻碍着你前进的道路， 看起来无法被战胜。 消灭日常出现的自我怀疑 是一个缓慢的过程。 但在游戏中，  你可以慢慢地缩小她， 于是她能从自我怀疑 转化为合理的怀疑， 到最后你可以相信她的建议。 我们也展现了自我毁灭。 它是一个巨大的怪物， 总是隐藏在附近的水面下。 “自我毁灭”实际上是游戏中的  主要反派角色， 她总是想把你拖进“泪之海”。 但是，每当她快要淹死你时， 你会回到几分钟前醒来， 获得一个再来一次的机会。 我们想要展现的是， 所有人都在生活中 经历了许多磨难，无人例外。 但如果你哪怕能站起来， 尝试继续前进， 你就非常有可能，挺过这些磨难， 一步一步地。\\n\\n---\\n\\n08:37\\n\\nJoy is something that Kay cannot really embrace or touch. It\'s always  something in the distance. We portrayed（描绘） Joy as a child version of  Kay, with a yellow raincoat, so she is invulnerable to the ocean of  tears. But Joy can also turn into obsession and start to be actually  harmful for Kay, like when she starts obsessing over her boyfriend. Joy  will not turn back to normal until Kay realizes that her happiness  should not depend on anybody else but herself.\\n\\n快乐是一种Kay不能真正拥抱或触碰的东西。快乐经常处在远处。我们将快乐描绘成一个Kay孩童时代的小女孩，穿着黄色雨衣，她是泪水之海所无法摧毁的存在。但快乐也可以<font color=\'red\'>转变为痴迷~~变得充满诱惑~~</font>，开始对Kay变得有害，比如她开始痴迷于Kay的男友。快乐在Kay意识到她的幸福将不再取决于任何人除了她自己之前，是不会变回正常的。\\n\\n> 快乐是凯无法真正触及的东西， 它一直在远处。 我们把快乐用小时候的凯来表示， 她穿着件黄色的雨衣， 所以“泪之海”无法伤害到她。 但是快乐也会转变为痴迷， 从而对凯造成伤害， 比如当她开始痴迷于她的男友。 痴迷无法变回快乐，直到凯能意识到， 她的幸福不应该靠别人， 而只能靠自己。\\n\\n---\\n\\n09:17\\n\\nSo our monsters appear huge and scary, but if you overcome your reluctance and approach them, you soon see that they are no monsters at all, but  just fragile beings that are simply overwhelmed by what life throws at  them.\\n\\n所以我们的怪物看上去又大又可拍，但是如果你克服了自己的犹豫并靠近他们。你便很快看到他们并不是怪物，只是被生活的任意一件事所压倒的脆弱的存在罢了。\\n\\n> 所以我们的怪兽看起来巨大又可怕， 但如果你克服了自己的犹豫， 并靠近它们， 你就会发现，它们根本不是怪兽， 只是被生活压垮的脆弱生命。\\n\\n---\\n\\n#### 4/20\\n\\n09:36\\n\\nAll of those emotions, be it self-doubt or even self-destruction, don\'t  completely vanish in our game. The key message is to not only chase for  joy or happiness but to embrace all your emotions and bring them into  balance, being OK with sometimes not being OK.\\n\\n所有的这些情绪，是自我怀疑还是自我毁灭，在我们的游戏中没有完全消失。（游戏的）关键是不仅仅是为了追求欢愉或幸福，还要拥抱你所有的情绪以及平衡情绪，允许好的情绪存在，有时允许不好的情绪存在。<!--允许一些不好的情绪存在，才是真的好。-->\\n\\n\\n\\n> 所有的这些情绪， 自我怀疑，或甚至自我毁灭， 在我们的游戏中不会完全消失。 游戏的精髓不只是“追逐快乐或幸福”， 同时也是“拥抱你所有的情绪” 并“让它们维持平衡”， 允许一些不好的情绪存在，才是真的好。\\n\\n---\\n\\n10:05\\n\\nEveryone has their own loneliness story to tell. This realization changed  everything for me. Being much more open with my emotions and  concentrating much more on my private life, my friends, my family. When  we released the game, literally thousands of fans wrote us, all sharing  their stories with us and telling us they felt not so alone anymore just because they played our game. Many people wrote us that they felt  hope for a better future for themselves for the first time in  decades. Many wrote us that they seek therapy now, just because they  played our game and felt hopeful to overcome their own struggles. Our  game is not a therapy. It\'s not meant to be a therapy. It\'s just my  friends and me sharing our stories through our art, video games. But we  are so deeply thankful for every single message that people feel  better, just because we shared our story with them.\\n\\n每个人都拥有属于他们自己的一段孤独往事去倾诉，这种意识转变了我的世界观。在与我的情绪相处中，我变得更加开明了，更多的关注着我自己的生活， <!--我坦然面对自己的情绪 也更多关注我的生活，-->和我的朋友、家人们一起。当我们发布了这款游戏，成千上万的粉丝写信给我们，所有人和我们分享着他们的故事，告诉我们他们不再感到那么孤独，仅仅是因为他们玩了我们的游戏。~~很多人写信给我们，在十几年以来他们第一次感受到他们拥有一个更好的未来的希望。~~ <font color=\'red\'>许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 </font>很多人写到：他们现在找到了治愈自己的方式因为玩了我们的游戏，~~充满了克服他们自己的挣扎的希望~~  <font color=\'red\'>对克服他们自己的困难，充满了希望。 </font>我们的游戏并不是一种治疗手段，这不意味着可以通过游戏被治愈。这仅仅是我和我的朋友们通过我们的艺术：这款电子游戏分享着我们的故事。~~但是对于每一条表述着人们变得更好的信息，我们都感到由衷的感激，这只是因为我们和他们分享了我们的故事。~~<font color=\'red\'>但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。</font>\\n\\n> 每个人都有孤独的时候。 认识到这一点改变了我的一切。 我坦然面对自己的情绪 也更多关注我的生活， 我的朋友，我的家庭。 在我们推出这款游戏后， 成千上万的粉丝给我们来信， 分享他们的故事， 告诉我们，他们不再感到那么孤独， 因为他们玩了我们的游戏。 许多人写到：几十年来第一次， 他们对自己更美好的未来，充满了希望。 许多人写到：他们开始寻找心理疗法， 因为他们玩了我们的游戏， 对克服自己的困难，充满了希望。 我们的游戏不是一种疗法。 它本不应该是一种疗法。 它只是我和我的朋友们 通过电子游戏这种艺术形式， 在分享我们的故事。 但对于每一条信息，我们都心怀感激， 因为我们分享了自己的故事， 让大家感觉好多了。\\n\\n---\\n\\n11:19\\n\\nSo ... I didn\'t completely overcome my urge to help others. But I don\'t  want to overcome it anymore. I love it. I just needed to bring it to a  healthy size, so it doesn\'t stand in the way of deeper relationships  anymore, but even help me to connect with people.\\n\\n所以...我并没有完全的克服想要帮助其他人的帮助。但我不再想克服他了。我爱它，我需要做的仅仅是将其把握好，所以这不再是通往更深层次关系的拦路虎了，<font color=\'red\'>而是</font>帮助我与其他人取得联系。\\n\\n> 所以…… 我还是没能完全克服 想要帮助他人的冲动。 但我不想再克服它了。 我爱做这件事。 我只需要把握好一个度， 让它不再成为建立深度联系的绊脚石， 而是帮助我更好地与人相处。\\n\\n---\\n\\n11:44\\n\\nSo, if you have an inner monster that is born out of negative emotions, it  is not only the goal to kill that monster but to understand that we  humans are complex beings. Look at what part of your life is so big that others fall short. Look at what emotions you barely feel or maybe feel  too much and move towards lowering those peaks. Most of all, **it\'s about  understanding that** all the wide range of emotions and struggles makes us what we are: humans.\\n\\n所以，如果你的内心里有一头出生于负面情绪的怪物，消灭这只怪物不仅仅是唯一的目标，还要去理解我们人类是复杂的事物。（<font color=\'red\'>生命体</font>) 看看什么是你生命中的大部分**而导致其他只占据了小部分**。看看是什么情绪你察觉不到或者感应强烈，然后将这些情绪从它们占据的顶峰挪走（<font color=\'red\'> 然后控制这些太过强烈的情绪。</font>) ~~更重要的是，这是关于理解所有所有各式各样的情绪和挣扎才造就了我们：人类~~（<font color=\'red\'>  最重要的是要理解，正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。</font>）\\n\\n> 所以，如果你心里有一个怪物， 充满了负面情绪， 消灭这个怪物不是唯一的目标， 而是要理解，我们人类是复杂的生命体。 看看什么东西占据了你生活的大部分，  影响到了其他。 看看哪些情绪你觉察不到， 或者哪些情绪太强烈， 然后控制这些太过强烈的情绪。 最重要的是要理解， 正是所有这些各式各样的情绪和苦难 才造就了我们： 人类。\\n\\n---\\n\\n12:26\\n\\nThank you.\\n\\n谢谢 :D\\n\\n> 谢谢\",\"articleCover\":\"http://121.89.232.237:83/articles/5c0a55e9be4484180a204b7d0e0de1e0.jpg\",\"articleTitle\":\"手译-A game that helps us understand loneliness\",\"categoryName\":\"English\",\"id\":60,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":3}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 13:29:34',NULL),
(1132,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 2022/3/13\\r\\n\\r\\n计算机网络就是一些互联的、自治的计算机系统的集合\\r\\n\\r\\n三类观点\\r\\n\\r\\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\\r\\n\\r\\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\\r\\n\\r\\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\\r\\n\\r\\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\\r\\n\\r\\n**最基本和最重要的功能：数据通信**\\r\\n\\r\\n---\\r\\n\\r\\n计算机网络的各种分类：\\r\\n\\r\\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\\r\\n\\r\\n**传输技术分类：**1、广播式网络 2、点对点网络\\r\\n\\r\\n**拓扑结构分类：**拓扑结构只要取决于通信子网\\r\\n\\r\\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\\r\\n\\r\\n使用者分类：公用网/专用网\\r\\n\\r\\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\\r\\n\\r\\n传输介质分类：有线类/无线类\\r\\n\\r\\n---\\r\\n\\r\\n**计网性能指标(需理解的)**：\\r\\n\\r\\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\\r\\n\\r\\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \\r\\n\\r\\n3、时延带宽积：=传播时延 X 信道宽度\\r\\n\\r\\n描述数据量，此时此刻的数据容量\\r\\n\\r\\n4、往返时延RTT\\r\\n\\r\\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\\r\\n\\r\\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\\r\\n\\r\\n6、速率：比特在信道上跑的速度\\r\\n\\r\\n7、信道利用率\\r\\n\\r\\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\\r\\n\\r\\n![image-20220326145029611](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220326145029611.png)\\r\\n\\r\\n###### 3/27\\r\\n\\r\\n分层：上层使用下层的服务\\r\\n\\r\\n1、各层之间相互独立\\r\\n\\r\\n2、每层之间的界面自然清晰\\r\\n\\r\\n3、结构上可分割开\\r\\n\\r\\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\\r\\n\\r\\n5、整个分层结构能促进标准化工作\\r\\n\\r\\n\\r\\n\\r\\n###### 4/10\\r\\n\\r\\n第二章 物理层\\r\\n\\r\\n编码和调制的方式：![image-20220410200234421](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200234421.png)\\r\\n\\r\\n![image-20220410200555847](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200555847.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220410174726310](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410174726310.png)\\r\\n\\r\\n电路交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410175551747](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410175551747.png)\\r\\n\\r\\n报文交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410180148943](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410180148943.png)\\r\\n\\r\\n分组交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410181910065](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410181910065.png)\\r\\n\\r\\n计算题总结：\\r\\n\\r\\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\\r\\n\\r\\n则每个码元携带log x比特信息\\r\\n\\r\\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\\r\\n\\r\\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\\r\\n\\r\\n4.有效离散值个数x\\r\\n\\r\\n数据传输率 = 波特率B*log x\\r\\n\\r\\n从而可推出x\\r\\n\\r\\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\\r\\n\\r\\n###### 4/11\\r\\n\\r\\n![image-20220411165713593](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220411165713593.png)\\r\\n\\r\\n**中继器**：五四三规则\\r\\n\\r\\n![image-20220414155503235](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220414155503235.png)\\r\\n\\r\\n分组交换的两种方式的差别\\r\\n\\r\\n### 4/26\\r\\n\\r\\nCRC、fcs\\r\\n\\r\\n![image-20220426120703383](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426120703383.png)\\r\\n\\r\\n海明校验码：已记录在笔记本上\\r\\n\\r\\n![image-20220426155453399](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426155453399.png)\\r\\n\\r\\n滑动窗口可以解决流量控制和可靠传输的\\r\\n\\r\\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\\r\\n\\r\\n![image-20220426162008770](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426162008770.png)\\r\\n\\r\\n可靠不可靠的层的区分\\r\\n\\r\\n##### 计算循环冗余码：\\r\\n\\r\\n1、加0：假设生成多项式的阶为r,则加r个0\\r\\n\\r\\n如10011的阶为4，多项式为N位，则阶为N-1\\r\\n\\r\\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\\r\\n\\r\\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\\r\\n\\r\\n###### 4/29\\r\\n\\r\\nGBN:\\r\\n\\r\\n![image-20220429164818170](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429164818170.png)\\r\\n\\r\\n---\\r\\n\\r\\n介质访问控制\\r\\n\\r\\n![image-20220430173043452](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220430173043452.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/3~\\r\\n\\r\\nCSMA协议分为3种：\\r\\n\\r\\n1-坚持CSMA\\r\\n\\r\\n非坚持CSMA\\r\\n\\r\\np-坚持CSMA（较优）\\r\\n\\r\\n---\\r\\n\\r\\nPPP协议\\r\\n\\r\\n![image-20220512192023907](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512192023907.png)\\r\\n\\r\\nPPP/HDLC异同\\r\\n\\r\\n![image-20220512193909179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512193909179.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### 3.6选择题\\r\\n\\r\\n![image-20220513200509279](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513200509279.png)\\r\\n\\r\\n问某某设备功能的题目解决方案：\\r\\n\\r\\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\\r\\n\\r\\n\\r\\n\\r\\n![image-20220513202718952](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513202718952.png)\\r\\n\\r\\n总结各层设备的特点以及冲突域广播域的分割\\r\\n\\r\\n\\r\\n\\r\\n![image-20220513205445377](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513205445377.png)\\r\\n\\r\\nOSI参考模型中的数据链路层分为以下两个子层：\\r\\n\\r\\nMAC子层：数据封装与解封装\\r\\n\\r\\nLLC子层：给帧加序号\\r\\n\\r\\n\\r\\n\\r\\n###### 3.7习题\\r\\n\\r\\n3.集中控制式 **分布控制式**\\r\\n\\r\\n![image-20220515205146940](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515205146940.png)\\r\\n\\r\\n\\r\\n\\r\\nPPP、HDLC协议\\r\\n\\r\\n![image-20220517170134008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517170134008.png)\\r\\n\\r\\n\\r\\n\\r\\n3.8\\r\\n\\r\\n![image-20220517173054196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173054196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517173537031](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173537031.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n网桥\\r\\n\\r\\n![image-20220515210938702](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515210938702.png)\\r\\n\\r\\n又分为透明网桥以及**源路由网桥**\\r\\n\\r\\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\\r\\n\\r\\n###### 冲突域与广播域的考点\\r\\n\\r\\n![image-20220515213814436](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515213814436.png)\\r\\n\\r\\n（背）\\r\\n\\r\\n![image-20220521144927118](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521144927118.png)\\r\\n\\r\\n（王道书上的）\\r\\n\\r\\n一个网段就是一个冲突域\\r\\n\\r\\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\\r\\n\\r\\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\\r\\n\\r\\n路由器：遇到广播信号不转发形成广播域\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n### 5.21 网络层\\r\\n\\r\\n![image-20220521145846315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521145846315.png)\\r\\n\\r\\n网络层功能\\r\\n\\r\\n![image-20220521150450769](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521150450769.png)\\r\\n\\r\\n路由算法\\r\\n\\r\\n![image-20220522161302439](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522161302439.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nAS概念\\r\\n\\r\\n![image-20220521151931138](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521151931138.png)\\r\\n\\r\\n内部使用的协议外部看不到\\r\\n\\r\\n![image-20220521152221640](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521152221640.png)\\r\\n\\r\\n路由选择协议，内部IGP 外部EGP\\r\\n\\r\\n---\\r\\n\\r\\nSDN\\r\\n\\r\\n每路由器法\\r\\n\\r\\n![image-20220521153045039](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153045039.png)\\r\\n\\r\\n![image-20220521153529671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153529671.png)\\r\\n\\r\\n![image-20220521155328285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155328285.png)\\r\\n\\r\\nSDN控制器的三个层次：网络范围状态管理层、通信层....\\r\\n\\r\\n![image-20220521155701758](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155701758.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220521154751935](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521154751935.png)\\r\\n\\r\\nSDN总结\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n###### 各个层次的协议总结：\\r\\n\\r\\n![image-20220522164627690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522164627690.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\nIP数据报的格式\\r\\n\\r\\n![image-20220522170527291](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522170527291.png)\\r\\n\\r\\n源IP地址和目的IP地址：32位\\r\\n\\r\\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\\r\\n\\r\\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\\r\\n\\r\\n总长度：首部的部分+数据部分  2^16 -1\\r\\n\\r\\n各协议所对应的字段值： 如UDP-17（不建议连接\\r\\n\\r\\n![image-20220522171238690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522171238690.png)\\r\\n\\r\\n \\r\\n\\r\\n###### 5/24 \\r\\n\\r\\n\\\"坏消息传的慢\\\"\\r\\n\\r\\n![image-20220524145342845](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145342845.png)\\r\\n\\r\\nRIP协议\\r\\n\\r\\n![image-20220524145739184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145739184.png)\\r\\n\\r\\n\\r\\n\\r\\nOSPF：\\r\\n\\r\\n![image-20220524153053725](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524153053725.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220524165003184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524165003184.png)\\r\\n\\r\\n**算法分类**\\r\\n\\r\\n###### 5/26 \\r\\n\\r\\n**IP数据报格式以及分片/片偏移**\\r\\n\\r\\n![image-20220526200301772](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526200301772.png)\\r\\n\\r\\n\\r\\n\\r\\n对应的总/片/首长度单位：“一种八片的手势”\\r\\n\\r\\n![image-20220526201234783](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526201234783.png)\\r\\n\\r\\n\\r\\n\\r\\n私有IP地址：IP地址的分类\\r\\n\\r\\n![image-20220526203338021](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203338021.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220526203626818](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203626818.png)\\r\\n\\r\\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\\r\\n>\\r\\n> **广播**地址：主机号全1\\r\\n>\\r\\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\\r\\n>\\r\\n\\r\\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\\r\\n\\r\\n**Practice:**\\r\\n\\r\\n![image-20220528145909542](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528145909542.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220528150734140](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528150734140.png)\\r\\n\\r\\n是否作为源地址？目的地址？\\r\\n\\r\\n小结\\r\\n\\r\\n![image-20220528151523517](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528151523517.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n5/27\\r\\n\\r\\n子网掩码划分\\r\\n\\r\\n![image-20220527192726514](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527192726514.png)\\r\\n\\r\\n点分十进制，子网掩码：255.255.0.0\\r\\n\\r\\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220527200329979](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527200329979.png)\\r\\n\\r\\n超网\\r\\n\\r\\n网络层提供的两种服务：\\r\\n\\r\\n![image-20220528115835171](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528115835171.png)\\r\\n\\r\\n###### 5/28划分子网IPv4地址\\r\\n\\r\\n划分子网的过程：\\r\\n\\r\\n![image-20220528153733212](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528153733212.png)\\r\\n\\r\\n从主机位借用1个比特作为子网号，划分成了2个子网\\r\\n\\r\\n**默认子网掩码：**\\r\\n\\r\\nA类：8位网络号 24位主机号：255.0.0.0\\r\\n\\r\\nB类：16位~ ：255.255.0.0\\r\\n\\r\\nC类：24位~：255.255.255.0\\r\\n\\r\\n小结\\r\\n\\r\\n![image-20220528155810385](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528155810385.png)\\r\\n\\r\\n\\r\\n\\r\\n###### 5/30\\r\\n\\r\\nCIDR相关计算\\r\\n\\r\\n![image-20220530113748646](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530113748646.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220530115327838](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115327838.png)\\r\\n\\r\\n**找共同前缀，然后剩余13个比特全部取0**\\r\\n\\r\\n![image-20220530115459321](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115459321.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n![image-20220530121115278](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530121115278.png)\\r\\n\\r\\ntry 例题\\r\\n\\r\\n![image-20220530145820144](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820144.png)![image-20220530145820055](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820055.png)\\r\\n\\r\\n---\\r\\n\\r\\nARP协议：解决下一跳走哪的问题\\r\\n\\r\\n![image-20220530152954244](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530152954244.png)\\r\\n\\r\\n\\r\\n\\r\\n**ICMP协议**\\r\\n\\r\\n\\r\\n\\r\\n5种差错报告报文![image-20220531202035262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202035262.png)\\r\\n\\r\\n不应发送差错报文的情况（可能在选择题里考）\\r\\n\\r\\n![image-20220531202416345](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202416345.png)\\r\\n\\r\\n\\r\\n\\r\\n###### 4.3.5\\r\\n\\r\\n01：各个协议在各个层次的分布，C选项中均在网络层\\r\\n\\r\\n![image-20220530154801554](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530154801554.png)\\r\\n\\r\\n\\r\\n\\r\\n04：IP分组中的检验字段都只检验首部\\r\\n\\r\\n![image-20220531205032699](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531205032699.png)\\r\\n\\r\\n\\r\\n\\r\\n14：环路地址分辨\\r\\n\\r\\n![image-20220531210024179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531210024179.png)\\r\\n\\r\\n\\r\\n\\r\\n20：\\r\\n\\r\\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\\r\\n\\r\\n内部网络地址0~255，A/B/C类地址\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n##### 6/9  IPv6 \\r\\n\\r\\n\\r\\n\\r\\n![image-20220609203542315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609203542315.png)\\r\\n\\r\\n源地址和目的地址都是128位\\r\\n\\r\\n**IPv6和v4的区别：**\\r\\n\\r\\n![image-20220609204231454](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609204231454.png)\\r\\n\\r\\nipv6没有提供校验和字段，首部长度固定的\\r\\n\\r\\n**QoS简介**\\r\\n\\r\\n![image-20220609210332500](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609210332500.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 6/10 RIP、OSPF、BGP\\r\\n\\r\\n**RIP协议**\\r\\n\\r\\n![image-20220610194501157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194501157.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220610181233743](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610181233743.png)\\r\\n\\r\\nRIP协议“好消息传得快，坏消息传的慢”\\r\\n\\r\\n---\\r\\n\\r\\n**OSPF**(网络层协议)\\r\\n\\r\\n![image-20220610193835557](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610193835557.png)\\r\\n\\r\\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\\r\\n\\r\\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\\r\\n\\r\\n其他特点\\r\\n\\r\\n![image-20220610194256116](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194256116.png)\\r\\n\\r\\n---\\r\\n\\r\\n**BGP协议**\\r\\n\\r\\n![image-20220610195450908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610195450908.png)\\r\\n\\r\\n只需知道BGP协议交换的信息包含的是什么内容就可以了\\r\\n\\r\\n特点\\r\\n\\r\\n![image-20220610200158672](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200158672.png)\\r\\n\\r\\n四种报文\\r\\n\\r\\n![image-20220610200227378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200227378.png)\\r\\n\\r\\n\\r\\n\\r\\nBGP/OSPF/RIP协议所对应的不同报文:\\r\\n\\r\\n![image-20220610200532615](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200532615.png)\\r\\n\\r\\n![image-20220610200852427](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200852427.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n###### 4.5.6\\r\\n\\r\\n01:\\r\\n\\r\\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\\r\\n\\r\\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\\r\\n\\r\\n\\r\\n\\r\\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\\r\\n\\r\\n\\r\\n\\r\\n08：RIP 、OSPF协议的差别\\r\\n\\r\\n![image-20220612111001610](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111001610.png)\\r\\n\\r\\n\\r\\n\\r\\n09：OSPF的分组类型\\r\\n\\r\\n![image-20220612111213495](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111213495.png)\\r\\n\\r\\n\\r\\n\\r\\n15：真题\\r\\n\\r\\n![image-20220614104318801](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614104318801.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n##### 6/10 IP组播、IP分组\\r\\n\\r\\n\\r\\n\\r\\n**IP数据报的三种传输方式**\\r\\n\\r\\n![image-20220612114900045](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612114900045.png)\\r\\n\\r\\n\\r\\n\\r\\n组播\\r\\n\\r\\n![image-20220612115806806](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612115806806.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220612120538681](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120538681.png)\\r\\n\\r\\n可能会考察IP地址和MAC地址进行一个映射\\r\\n\\r\\nIGMP、ICMP\\r\\n\\r\\n![image-20220612120922369](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120922369.png)\\r\\n\\r\\n![image-20220612121149516](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121149516.png)\\r\\n\\r\\n\\r\\n\\r\\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\\r\\n\\r\\n![image-20220612121739087](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121739087.png)\\r\\n\\r\\n组播的分类：\\r\\n\\r\\n![image-20220614110246790](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110246790.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n移动IP\\r\\n\\r\\n相关概念\\r\\n\\r\\n![image-20220612122301568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122301568.png)\\r\\n\\r\\n**具体步骤：** \\r\\n\\r\\n![image-20220612122751908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122751908.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n###### 4.6.4\\r\\n\\r\\n01：仿真：时延更长\\r\\n\\r\\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\\r\\n\\r\\n![image-20220614105107539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614105107539.png)\\r\\n\\r\\n03：\\r\\n\\r\\n![image-20220614110057987](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110057987.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n###### 4.7.3\\r\\n\\r\\n02：\\r\\n\\r\\n![image-20220614112543930](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614112543930.png)\\r\\n\\r\\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\\r\\n\\r\\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\\r\\n\\r\\n\\r\\n\\r\\n#### 6/14 网络层结尾\\r\\n\\r\\n网络层设备\\r\\n\\r\\n![image-20220614115326374](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115326374.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220614115240655](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115240655.png)\\r\\n\\r\\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\\r\\n\\r\\n![image-20220614115540438](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115540438.png)\\r\\n\\r\\n默认路由：相当于场内求助\\r\\n\\r\\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\\r\\n\\r\\n路由转发、路由表：\\r\\n\\r\\n![image-20220614120034513](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120034513.png)\\r\\n\\r\\n---\\r\\n\\r\\n<font size=\\\"6\\\">总结</font>\\r\\n\\r\\n![image-20220614121344471](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121344471.png)\\r\\n\\r\\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \\r\\n\\r\\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\\r\\n\\r\\n**重要协议**\\r\\n\\r\\n![image-20220614120815416](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120815416.png)\\r\\n\\r\\n\\r\\n\\r\\n**路由算法：**\\r\\n\\r\\n![image-20220614120947577](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120947577.png)\\r\\n\\r\\nIPv4\\r\\n\\r\\n![image-20220614121053027](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121053027.png)\\r\\n\\r\\nNAT:私有共有地址的转换\\r\\n\\r\\n分片：链路可接受最大传输单元：MTU\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n4.8.4\\r\\n\\r\\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\\r\\n\\r\\n![image-20220616152431580](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152431580.png)\\r\\n\\r\\n\\r\\n\\r\\n05：路由表一般仅包含从目的网络到下一跳的IP地址\\r\\n\\r\\n\\r\\n\\r\\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\\r\\n\\r\\n![image-20220616152738634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152738634.png)\\r\\n\\r\\n\\r\\n\\r\\n08：\\r\\n\\r\\n![image-20220616153250741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616153250741.png)\\r\\n\\r\\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\\r\\n\\r\\n分组转发组成：交换结构、输入端口、输出端口\\r\\n\\r\\n14：\\r\\n\\r\\n路由器尽最大努力交付，但不确保\\r\\n\\r\\n![image-20220616154821062](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154821062.png)\\r\\n\\r\\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\\r\\n\\r\\n![image-20220616154721728](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154721728.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### 6/16 总结\\r\\n\\r\\n1.“尽最大努力交付”有哪些含义?\\r\\n\\r\\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\\r\\n\\r\\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\\r\\n\\r\\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\\r\\n\\r\\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\\r\\n\\r\\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\\r\\n\\r\\n​\\t但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\\r\\n\\r\\n​\\t现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\\r\\n\\r\\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\\r\\n\\r\\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\\r\\n\\r\\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\\r\\n\\r\\n---\\r\\n\\r\\n### **传输层**\\r\\n\\r\\n![image-20220616162138785](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162138785.png)\\r\\n\\r\\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\\r\\n\\r\\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\\r\\n\\r\\n![image-20220616162727518](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162727518.png)\\r\\n\\r\\n笔记：传输层的两大协议**：TCP和UDP的区别** \\r\\n\\r\\n![image-20220616163227947](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616163227947.png)\\r\\n\\r\\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220616164253795](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164253795.png)\\r\\n\\r\\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \\r\\n\\r\\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\\r\\n\\r\\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\\r\\n\\r\\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \\r\\n\\r\\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n![image-20220616164130771](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164130771.png)\\r\\n\\r\\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\\r\\n\\r\\n---\\r\\n\\r\\n#### 5.1.4习题\\r\\n\\r\\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \\r\\n\\r\\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \\r\\n\\r\\n![image-20220621161048543](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161048543.png)\\r\\n\\r\\n04：面向连接的服务：可靠性和按序到达 \\r\\n\\r\\n![image-20220621161657953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161657953.png)\\r\\n\\r\\n12：报文的头部长度问题\\r\\n\\r\\n![image-20220621162547501](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621162547501.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/17 UDP\\r\\n\\r\\n<h4>UDP的特点</h4>\\r\\n\\r\\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \\r\\n\\r\\n![image-20220617115928628](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617115928628.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220617120318549](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617120318549.png)\\r\\n\\r\\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \\r\\n\\r\\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\\r\\n\\r\\n**UDP检验：** \\r\\n\\r\\n![image-20220617121008248](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617121008248.png)\\r\\n\\r\\n按2进制反码运算求和，将得出结果再求反码 \\r\\n\\r\\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\\r\\n\\r\\n---\\r\\n\\r\\n#### 5.2.3习题\\r\\n\\r\\n02：UDP数据报的长度不包含伪首部的长度\\r\\n\\r\\n【可选】当源主机不想计算校验和，则令该字段为0\\r\\n\\r\\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\\r\\n\\r\\nIP数据报的差别是只能找到目的主机而无法找到目的进程\\r\\n\\r\\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\\r\\n\\r\\n\\r\\n\\r\\n09:伪首部仅在校验和和计算期间建立，并不发送\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/21 TCP\\r\\n\\r\\n<h3>TCP协议的特点</h3> \\r\\n\\r\\n![image-20220621183009893](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621183009893.png)\\r\\n\\r\\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\\r\\n\\r\\n<h4>TCP报文段首部格式</h4>\\r\\n\\r\\n![image-20220621184449953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184449953.png)\\r\\n\\r\\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\\r\\n\\r\\n\\r\\n\\r\\nURG 、 ACK 、  SYN、  FIN \\r\\n\\r\\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\\r\\n\\r\\n窗口：\\r\\n\\r\\n![image-20220621184322344](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184322344.png)\\r\\n\\r\\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\\r\\n\\r\\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\\r\\n\\r\\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n#### 6/23 TCP连接\\r\\n\\r\\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\\r\\n\\r\\n<font color = \\\"red\\\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \\r\\n\\r\\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\\r\\n\\r\\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \\r\\n\\r\\n![image-20220623175221485](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175221485.png)\\r\\n\\r\\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\\r\\n\\r\\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\\r\\n\\r\\nACK:last_quarter_moon_with_face: 期待的下一个信号\\r\\n\\r\\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\\r\\n\\r\\n\\r\\n\\r\\n![image-20220623175024670](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175024670.png)\\r\\n\\r\\nFIN:结束位 只要是请求释放连接，FIN一定置为1\\r\\n\\r\\n四次握手就是断开或者说结束连接时需要的几个步骤。\\r\\n\\r\\n<font color = \\\"red\\\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \\r\\n\\r\\n---\\r\\n\\r\\n6/24 \\r\\n\\r\\n<h4>TCP可靠传输</h4>\\r\\n\\r\\n校验、序号、确认、重传\\r\\n\\r\\n确认：保证可靠传输，接收方要返回一个确认报文段。 \\r\\n\\r\\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\\r\\n\\r\\n\\r\\n\\r\\n冗余ACK：多余的、重复的报文段 \\r\\n\\r\\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\\r\\n\\r\\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\\r\\n\\r\\n---\\r\\n\\r\\n<h3>TCP流量控制</h3>\\r\\n\\r\\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\\r\\n\\r\\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \\r\\n\\r\\n![image-20220624171804134](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171804134.png)\\r\\n\\r\\n接收窗口(动态的调整)：rwnd\\t拥塞窗口：cwnd\\t\\t\\r\\n\\r\\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\\r\\n\\r\\n\\r\\n\\r\\n![image-20220624171723184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171723184.png)\\r\\n\\r\\n持续计时器\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/24 TCP流量控制 \\r\\n\\r\\n<h3>TCP拥塞控制</h3>\\r\\n\\r\\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \\r\\n\\r\\n![image-20220624172758430](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624172758430.png)\\r\\n\\r\\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\\r\\n\\r\\n\\r\\n\\r\\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \\r\\n\\r\\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\\r\\n\\r\\n![image-20220624173503511](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624173503511.png)\\r\\n\\r\\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\\r\\n\\r\\n<h4>慢开始和拥塞避免</h4>\\r\\n\\r\\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \\r\\n\\r\\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\\r\\n\\r\\n![image-20220624174558650](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624174558650.png)\\r\\n\\r\\n往返时延单位：RTT\\r\\n\\r\\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\\r\\n\\r\\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \\r\\n\\r\\n---\\r\\n\\r\\n<h4>快重传和快恢复</h4>\\r\\n\\r\\n只要收到三个重复的确认之后， 就会执行快重传算法\\r\\n\\r\\n快速的执行这样一个重传的过程 省下了很多等待的时间 \\r\\n\\r\\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\\r\\n\\r\\n![image-20220624175442774](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624175442774.png)\\r\\n\\r\\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\\r\\n\\r\\n---\\r\\n\\r\\n### 应用层\\r\\n\\r\\n#### 6/28 模型、DNS\\r\\n\\r\\n概述\\r\\n\\r\\n![image-20220628150804221](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628150804221.png)\\r\\n\\r\\n应用层功能和重要协议：\\r\\n\\r\\n![image-20220628151033867](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151033867.png)\\r\\n\\r\\n\\r\\n\\r\\n网络应用模型：客户/服务器模型（C/S） 主从式\\r\\n\\r\\nP2P模型\\t对等式 \\r\\n\\r\\nC/S 模型：\\r\\n\\r\\n![image-20220628151540247](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151540247.png)\\r\\n\\r\\n\\r\\n\\r\\nP2P模型\\r\\n\\r\\n![image-20220628151857973](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151857973.png)\\r\\n\\r\\n\\r\\n\\r\\n6.1.3\\r\\n\\r\\n01：集中式：集中在一台计算机上，分布式：多台计算机 \\r\\n\\r\\n![image-20220628154113079](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628154113079.png)\\r\\n\\r\\n\\r\\n\\r\\n05：客户机：面向任务的\\t服务器：面向客户的\\r\\n\\r\\n---\\r\\n\\r\\n<h3>DNS </h3>\\r\\n\\r\\n域名组成：顶级域名、二级域名、三级域名...\\r\\n\\r\\n![image-20220628155712157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628155712157.png)\\r\\n\\r\\n\\r\\n\\r\\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \\r\\n\\r\\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \\r\\n\\r\\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\\r\\n\\r\\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\\r\\n\\r\\n![image-20220628160921546](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628160921546.png)\\r\\n\\r\\nabc.org与 y.abc.org是对等关系\\r\\n\\r\\n\\r\\n\\r\\n域名解析过程\\r\\n\\r\\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \\r\\n\\r\\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\\r\\n\\r\\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \\r\\n\\r\\n\\r\\n\\r\\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\\r\\n\\r\\n##### 6.2.4\\r\\n\\r\\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\\r\\n\\r\\n  1个以太网卡：一个IP地址\\t  单个DNS~对应多个主机/多个MAC地址/多个ip\\r\\n\\r\\n 对这些都没有一一对应的关系\\r\\n\\r\\n02：Internet访问主机一定要有IP地址\\r\\n\\r\\n08：选C的原因\\r\\n\\r\\n![image-20220701160815319](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701160815319.png)\\r\\n\\r\\n10：\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/29 传输层协议FTP\\r\\n\\r\\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\\r\\n\\r\\n FTP 它是使用TCP来实现可靠传输的\\r\\n\\r\\n![image-20220629180558599](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629180558599.png)\\r\\n\\r\\n\\r\\n\\r\\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\\r\\n\\r\\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\\r\\n\\r\\n文本模式（ASCII）、二进制模式\\t\\r\\n\\r\\n![image-20220629181142601](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629181142601.png)\\r\\n\\r\\n##### 6.3.3\\r\\n\\r\\n07:FTP的功能：![image-20220701164617822](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701164617822.png)\\r\\n\\r\\n08：封装的过程：自上而下\\t\\r\\n\\r\\n数据 数据段\\t数据报\\t数据帧\\t比特\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/1 电子邮件:e-mail:\\r\\n\\r\\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\\r\\n\\r\\n使用C/S模式\\t\\r\\n\\r\\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\\r\\n\\r\\n![image-20220701170014788](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170014788.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>SMTP</h3>\\r\\n\\r\\n![image-20220701170322680](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170322680.png)\\r\\n\\r\\n\\r\\n\\r\\nSMTP的缺点：\\r\\n\\r\\n ![image-20220701170907231](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170907231.png)\\r\\n\\r\\n扩充手段MINE:\\t使电子邮件系统支持声音、图像....\\r\\n\\r\\n\\r\\n\\r\\n<h4>POP3协议 </h4>\\r\\n\\r\\n端口号、TCP、C/S \\r\\n\\r\\n![image-20220701171059568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171059568.png)\\r\\n\\r\\n\\r\\n\\r\\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\\r\\n\\r\\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\\r\\n\\r\\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\\r\\n\\r\\n![image-20220701171618095](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171618095.png)\\r\\n\\r\\n##### 6.4.4\\r\\n\\r\\n07：\\r\\n\\r\\n![image-20220701174409155](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701174409155.png)\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/2 结尾：万维网和HTTP协议\\r\\n\\r\\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\\r\\n\\r\\n统一资源定位符URL 它是可以唯一标识每一个资源的\\r\\n\\r\\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \\r\\n\\r\\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\\r\\n\\r\\n![image-20220702162918872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702162918872.png)\\r\\n\\r\\n\\r\\n\\r\\nHTTP工作流程：\\r\\n\\r\\n![image-20220702163328133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702163328133.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>HTTP 协议的特点\\t</h3>\\r\\n\\r\\n 它采用TCP作为运输层的协议 是一种面向连接的\\r\\n\\r\\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\\r\\n\\r\\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） \\t那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \\r\\n\\r\\n![image-20220702164017763](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702164017763.png)\\r\\n\\r\\n\\r\\n\\r\\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\\r\\n\\r\\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议\\t\\r\\n\\r\\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\\r\\n\\r\\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\\r\\n\\r\\n---\\r\\n\\r\\nHTTP——报文结构\\r\\n\\r\\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \\r\\n\\r\\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\\r\\n\\r\\n![image-20220702165432365](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165432365.png)\\r\\n\\r\\n请求报文和响应报文\\r\\n\\r\\n![image-20220702165833550](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165833550.png)\\r\\n\\r\\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\\r\\n\\r\\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\\r\\n\\r\\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \\r\\n\\r\\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\\r\\n\\r\\n 5打头表示的就是服务器的差错\\r\\n\\r\\n---\\r\\n\\r\\n<H2>总结 </H2>\\r\\n\\r\\n**常用应用层协议小结：** \\r\\n\\r\\n![image-20220702171327778](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702171327778.png)\\r\\n\\r\\n![image-20220702173120051](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173120051.png)\\r\\n\\r\\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \\r\\n\\r\\n持久性/非持久性连接：考点重点，易考到：\\r\\n\\r\\n![image-20220702180809063](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180809063.png)\\r\\n\\r\\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \\r\\n\\r\\n![image-20220702170248777](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702170248777.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 6.5.3\\r\\n\\r\\n01：FTP：文件传输协议，可靠性高，实时性要求低\\r\\n\\r\\n![image-20220702173738805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173738805.png)\\r\\n\\r\\n\\r\\n\\r\\n07：\\r\\n\\r\\n![image-20220702174726133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702174726133.png)\\r\\n\\r\\n\\r\\n\\r\\n10：\\r\\n\\r\\n根据传输对象来确定传输所需时间\\r\\n\\r\\n**持久性连接流水线：**\\r\\n\\r\\n![image-20220702180422679](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180422679.png)\\r\\n\\r\\n\\r\\n\\r\\n非流水线：\\r\\n\\r\\n![image-20220702180616509](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180616509.png)\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/31 \\r\\n\\r\\n<h3> 选择题小题每章重点</h3>\\r\\n\\r\\n第一章\\r\\n\\r\\n![image-20220731141406536](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731141406536.png)\\r\\n\\r\\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\\r\\n\\r\\n\\r\\n\\r\\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组\\t能否隔离... \\r\\n\\r\\n![image-20220731142248353](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142248353.png)\\r\\n\\r\\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA\\t\\r\\n\\r\\n![image-20220731142707141](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142707141.png)\\r\\n\\r\\n\\r\\n\\r\\n第四章：路由聚合：取交集\\r\\nCDN新增\\r\\n![image-20220731143027256](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143027256.png)\\r\\n\\r\\n第五章：TCP/UDP\\r\\n![image-20220731143305487](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143305487.png)\\r\\n\\r\\n第六章：难点：WWW+HTTP\\r\\n\\r\\nDNS域名解析\\t\\r\\n![image-20220731143645217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143645217.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>计网大题重点</h3>\\r\\n\\r\\n![image-20220731144324262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731144324262.png)\\r\\n\\r\\n路由协议，子网划分：BGP/OSPF/RIP跳数\\r\\n\\r\\n数据交换的分组交换方式：虚电路：面向连接\\r\\n\\r\\n中继器和集线器的差别：端口的个数 \\r\\n\\r\\nIPv4：重中之重 ABCDE五类地址\\t\\r\\n\\r\\nARP：IP转MAC地址\\tDHCP：动态ip地址的划分，回收\\tICMP：差错、控制报文（可不可达...）\\t\\r\\n\\r\\n应用层：HTTP与TCP的关系\\t\\r\\n\\r\\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \\r\\n\\r\\n![image-20220731152658875](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731152658875.png)\\r\\n\\r\\n\\r\\n\\r\\nIP地址解析过程：\\r\\n\\r\\n![image-20220731172153990](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731172153990.png)\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png\",\"articleTitle\":\"计算机网络笔记\",\"categoryName\":\"网络\",\"id\":61,\"isTop\":0,\"status\":1,\"tagNameList\":[\"计算机网络\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 18:50:52',NULL),
(1133,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 2022/3/13\\r\\n\\r\\n计算机网络就是一些互联的、自治的计算机系统的集合\\r\\n\\r\\n三类观点\\r\\n\\r\\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\\r\\n\\r\\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\\r\\n\\r\\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\\r\\n\\r\\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\\r\\n\\r\\n**最基本和最重要的功能：数据通信**\\r\\n\\r\\n---\\r\\n\\r\\n计算机网络的各种分类：\\r\\n\\r\\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\\r\\n\\r\\n**传输技术分类：**1、广播式网络 2、点对点网络\\r\\n\\r\\n**拓扑结构分类：**拓扑结构只要取决于通信子网\\r\\n\\r\\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\\r\\n\\r\\n使用者分类：公用网/专用网\\r\\n\\r\\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\\r\\n\\r\\n传输介质分类：有线类/无线类\\r\\n\\r\\n---\\r\\n\\r\\n**计网性能指标(需理解的)**：\\r\\n\\r\\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\\r\\n\\r\\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \\r\\n\\r\\n3、时延带宽积：=传播时延 X 信道宽度\\r\\n\\r\\n描述数据量，此时此刻的数据容量\\r\\n\\r\\n4、往返时延RTT\\r\\n\\r\\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\\r\\n\\r\\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\\r\\n\\r\\n6、速率：比特在信道上跑的速度\\r\\n\\r\\n7、信道利用率\\r\\n\\r\\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\\r\\n\\r\\n![image-20220326145029611](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220326145029611.png)\\r\\n\\r\\n###### 3/27\\r\\n\\r\\n分层：上层使用下层的服务\\r\\n\\r\\n1、各层之间相互独立\\r\\n\\r\\n2、每层之间的界面自然清晰\\r\\n\\r\\n3、结构上可分割开\\r\\n\\r\\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\\r\\n\\r\\n5、整个分层结构能促进标准化工作\\r\\n\\r\\n\\r\\n\\r\\n###### 4/10\\r\\n\\r\\n第二章 物理层\\r\\n\\r\\n编码和调制的方式：![image-20220410200234421](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200234421.png)\\r\\n\\r\\n![image-20220410200555847](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200555847.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220410174726310](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410174726310.png)\\r\\n\\r\\n电路交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410175551747](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410175551747.png)\\r\\n\\r\\n报文交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410180148943](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410180148943.png)\\r\\n\\r\\n分组交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\r\\n\\r\\n![image-20220410181910065](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410181910065.png)\\r\\n\\r\\n计算题总结：\\r\\n\\r\\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\\r\\n\\r\\n则每个码元携带log x比特信息\\r\\n\\r\\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\\r\\n\\r\\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\\r\\n\\r\\n4.有效离散值个数x\\r\\n\\r\\n数据传输率 = 波特率B*log x\\r\\n\\r\\n从而可推出x\\r\\n\\r\\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\\r\\n\\r\\n###### 4/11\\r\\n\\r\\n![image-20220411165713593](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220411165713593.png)\\r\\n\\r\\n**中继器**：五四三规则\\r\\n\\r\\n![image-20220414155503235](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220414155503235.png)\\r\\n\\r\\n分组交换的两种方式的差别\\r\\n\\r\\n### 4/26\\r\\n\\r\\nCRC、fcs\\r\\n\\r\\n![image-20220426120703383](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426120703383.png)\\r\\n\\r\\n海明校验码：已记录在笔记本上\\r\\n\\r\\n![image-20220426155453399](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426155453399.png)\\r\\n\\r\\n滑动窗口可以解决流量控制和可靠传输的\\r\\n\\r\\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\\r\\n\\r\\n![image-20220426162008770](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426162008770.png)\\r\\n\\r\\n可靠不可靠的层的区分\\r\\n\\r\\n##### 计算循环冗余码：\\r\\n\\r\\n1、加0：假设生成多项式的阶为r,则加r个0\\r\\n\\r\\n如10011的阶为4，多项式为N位，则阶为N-1\\r\\n\\r\\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\\r\\n\\r\\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\\r\\n\\r\\n###### 4/29\\r\\n\\r\\nGBN:\\r\\n\\r\\n![image-20220429164818170](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429164818170.png)\\r\\n\\r\\n---\\r\\n\\r\\n介质访问控制\\r\\n\\r\\n![image-20220430173043452](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220430173043452.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/3~\\r\\n\\r\\nCSMA协议分为3种：\\r\\n\\r\\n1-坚持CSMA\\r\\n\\r\\n非坚持CSMA\\r\\n\\r\\np-坚持CSMA（较优）\\r\\n\\r\\n---\\r\\n\\r\\nPPP协议\\r\\n\\r\\n![image-20220512192023907](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512192023907.png)\\r\\n\\r\\nPPP/HDLC异同\\r\\n\\r\\n![image-20220512193909179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512193909179.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### 3.6选择题\\r\\n\\r\\n![image-20220513200509279](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513200509279.png)\\r\\n\\r\\n问某某设备功能的题目解决方案：\\r\\n\\r\\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\\r\\n\\r\\n\\r\\n\\r\\n![image-20220513202718952](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513202718952.png)\\r\\n\\r\\n总结各层设备的特点以及冲突域广播域的分割\\r\\n\\r\\n\\r\\n\\r\\n![image-20220513205445377](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513205445377.png)\\r\\n\\r\\nOSI参考模型中的数据链路层分为以下两个子层：\\r\\n\\r\\nMAC子层：数据封装与解封装\\r\\n\\r\\nLLC子层：给帧加序号\\r\\n\\r\\n\\r\\n\\r\\n###### 3.7习题\\r\\n\\r\\n3.集中控制式 **分布控制式**\\r\\n\\r\\n![image-20220515205146940](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515205146940.png)\\r\\n\\r\\n\\r\\n\\r\\nPPP、HDLC协议\\r\\n\\r\\n![image-20220517170134008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517170134008.png)\\r\\n\\r\\n\\r\\n\\r\\n3.8\\r\\n\\r\\n![image-20220517173054196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173054196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517173537031](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173537031.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n网桥\\r\\n\\r\\n![image-20220515210938702](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515210938702.png)\\r\\n\\r\\n又分为透明网桥以及**源路由网桥**\\r\\n\\r\\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\\r\\n\\r\\n###### 冲突域与广播域的考点\\r\\n\\r\\n![image-20220515213814436](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515213814436.png)\\r\\n\\r\\n（背）\\r\\n\\r\\n![image-20220521144927118](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521144927118.png)\\r\\n\\r\\n（王道书上的）\\r\\n\\r\\n一个网段就是一个冲突域\\r\\n\\r\\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\\r\\n\\r\\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\\r\\n\\r\\n路由器：遇到广播信号不转发形成广播域\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n### 5.21 网络层\\r\\n\\r\\n![image-20220521145846315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521145846315.png)\\r\\n\\r\\n网络层功能\\r\\n\\r\\n![image-20220521150450769](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521150450769.png)\\r\\n\\r\\n路由算法\\r\\n\\r\\n![image-20220522161302439](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522161302439.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nAS概念\\r\\n\\r\\n![image-20220521151931138](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521151931138.png)\\r\\n\\r\\n内部使用的协议外部看不到\\r\\n\\r\\n![image-20220521152221640](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521152221640.png)\\r\\n\\r\\n路由选择协议，内部IGP 外部EGP\\r\\n\\r\\n---\\r\\n\\r\\nSDN\\r\\n\\r\\n每路由器法\\r\\n\\r\\n![image-20220521153045039](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153045039.png)\\r\\n\\r\\n![image-20220521153529671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153529671.png)\\r\\n\\r\\n![image-20220521155328285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155328285.png)\\r\\n\\r\\nSDN控制器的三个层次：网络范围状态管理层、通信层....\\r\\n\\r\\n![image-20220521155701758](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155701758.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220521154751935](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521154751935.png)\\r\\n\\r\\nSDN总结\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n###### 各个层次的协议总结：\\r\\n\\r\\n![image-20220522164627690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522164627690.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\nIP数据报的格式\\r\\n\\r\\n![image-20220522170527291](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522170527291.png)\\r\\n\\r\\n源IP地址和目的IP地址：32位\\r\\n\\r\\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\\r\\n\\r\\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\\r\\n\\r\\n总长度：首部的部分+数据部分  2^16 -1\\r\\n\\r\\n各协议所对应的字段值： 如UDP-17（不建议连接\\r\\n\\r\\n![image-20220522171238690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522171238690.png)\\r\\n\\r\\n \\r\\n\\r\\n###### 5/24 \\r\\n\\r\\n\\\"坏消息传的慢\\\"\\r\\n\\r\\n![image-20220524145342845](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145342845.png)\\r\\n\\r\\nRIP协议\\r\\n\\r\\n![image-20220524145739184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145739184.png)\\r\\n\\r\\n\\r\\n\\r\\nOSPF：\\r\\n\\r\\n![image-20220524153053725](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524153053725.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220524165003184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524165003184.png)\\r\\n\\r\\n**算法分类**\\r\\n\\r\\n###### 5/26 \\r\\n\\r\\n**IP数据报格式以及分片/片偏移**\\r\\n\\r\\n![image-20220526200301772](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526200301772.png)\\r\\n\\r\\n\\r\\n\\r\\n对应的总/片/首长度单位：“一种八片的手势”\\r\\n\\r\\n![image-20220526201234783](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526201234783.png)\\r\\n\\r\\n\\r\\n\\r\\n私有IP地址：IP地址的分类\\r\\n\\r\\n![image-20220526203338021](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203338021.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220526203626818](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203626818.png)\\r\\n\\r\\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\\r\\n>\\r\\n> **广播**地址：主机号全1\\r\\n>\\r\\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\\r\\n>\\r\\n\\r\\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\\r\\n\\r\\n**Practice:**\\r\\n\\r\\n![image-20220528145909542](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528145909542.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220528150734140](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528150734140.png)\\r\\n\\r\\n是否作为源地址？目的地址？\\r\\n\\r\\n小结\\r\\n\\r\\n![image-20220528151523517](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528151523517.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n5/27\\r\\n\\r\\n子网掩码划分\\r\\n\\r\\n![image-20220527192726514](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527192726514.png)\\r\\n\\r\\n点分十进制，子网掩码：255.255.0.0\\r\\n\\r\\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220527200329979](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527200329979.png)\\r\\n\\r\\n超网\\r\\n\\r\\n网络层提供的两种服务：\\r\\n\\r\\n![image-20220528115835171](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528115835171.png)\\r\\n\\r\\n###### 5/28划分子网IPv4地址\\r\\n\\r\\n划分子网的过程：\\r\\n\\r\\n![image-20220528153733212](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528153733212.png)\\r\\n\\r\\n从主机位借用1个比特作为子网号，划分成了2个子网\\r\\n\\r\\n**默认子网掩码：**\\r\\n\\r\\nA类：8位网络号 24位主机号：255.0.0.0\\r\\n\\r\\nB类：16位~ ：255.255.0.0\\r\\n\\r\\nC类：24位~：255.255.255.0\\r\\n\\r\\n小结\\r\\n\\r\\n![image-20220528155810385](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528155810385.png)\\r\\n\\r\\n\\r\\n\\r\\n###### 5/30\\r\\n\\r\\nCIDR相关计算\\r\\n\\r\\n![image-20220530113748646](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530113748646.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220530115327838](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115327838.png)\\r\\n\\r\\n**找共同前缀，然后剩余13个比特全部取0**\\r\\n\\r\\n![image-20220530115459321](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115459321.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n![image-20220530121115278](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530121115278.png)\\r\\n\\r\\ntry 例题\\r\\n\\r\\n![image-20220530145820144](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820144.png)![image-20220530145820055](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820055.png)\\r\\n\\r\\n---\\r\\n\\r\\nARP协议：解决下一跳走哪的问题\\r\\n\\r\\n![image-20220530152954244](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530152954244.png)\\r\\n\\r\\n\\r\\n\\r\\n**ICMP协议**\\r\\n\\r\\n\\r\\n\\r\\n5种差错报告报文![image-20220531202035262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202035262.png)\\r\\n\\r\\n不应发送差错报文的情况（可能在选择题里考）\\r\\n\\r\\n![image-20220531202416345](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202416345.png)\\r\\n\\r\\n\\r\\n\\r\\n###### 4.3.5\\r\\n\\r\\n01：各个协议在各个层次的分布，C选项中均在网络层\\r\\n\\r\\n![image-20220530154801554](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530154801554.png)\\r\\n\\r\\n\\r\\n\\r\\n04：IP分组中的检验字段都只检验首部\\r\\n\\r\\n![image-20220531205032699](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531205032699.png)\\r\\n\\r\\n\\r\\n\\r\\n14：环路地址分辨\\r\\n\\r\\n![image-20220531210024179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531210024179.png)\\r\\n\\r\\n\\r\\n\\r\\n20：\\r\\n\\r\\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\\r\\n\\r\\n内部网络地址0~255，A/B/C类地址\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n##### 6/9  IPv6 \\r\\n\\r\\n\\r\\n\\r\\n![image-20220609203542315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609203542315.png)\\r\\n\\r\\n源地址和目的地址都是128位\\r\\n\\r\\n**IPv6和v4的区别：**\\r\\n\\r\\n![image-20220609204231454](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609204231454.png)\\r\\n\\r\\nipv6没有提供校验和字段，首部长度固定的\\r\\n\\r\\n**QoS简介**\\r\\n\\r\\n![image-20220609210332500](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609210332500.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 6/10 RIP、OSPF、BGP\\r\\n\\r\\n**RIP协议**\\r\\n\\r\\n![image-20220610194501157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194501157.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220610181233743](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610181233743.png)\\r\\n\\r\\nRIP协议“好消息传得快，坏消息传的慢”\\r\\n\\r\\n---\\r\\n\\r\\n**OSPF**(网络层协议)\\r\\n\\r\\n![image-20220610193835557](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610193835557.png)\\r\\n\\r\\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\\r\\n\\r\\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\\r\\n\\r\\n其他特点\\r\\n\\r\\n![image-20220610194256116](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194256116.png)\\r\\n\\r\\n---\\r\\n\\r\\n**BGP协议**\\r\\n\\r\\n![image-20220610195450908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610195450908.png)\\r\\n\\r\\n只需知道BGP协议交换的信息包含的是什么内容就可以了\\r\\n\\r\\n特点\\r\\n\\r\\n![image-20220610200158672](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200158672.png)\\r\\n\\r\\n四种报文\\r\\n\\r\\n![image-20220610200227378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200227378.png)\\r\\n\\r\\n\\r\\n\\r\\nBGP/OSPF/RIP协议所对应的不同报文:\\r\\n\\r\\n![image-20220610200532615](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200532615.png)\\r\\n\\r\\n![image-20220610200852427](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200852427.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n###### 4.5.6\\r\\n\\r\\n01:\\r\\n\\r\\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\\r\\n\\r\\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\\r\\n\\r\\n\\r\\n\\r\\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\\r\\n\\r\\n\\r\\n\\r\\n08：RIP 、OSPF协议的差别\\r\\n\\r\\n![image-20220612111001610](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111001610.png)\\r\\n\\r\\n\\r\\n\\r\\n09：OSPF的分组类型\\r\\n\\r\\n![image-20220612111213495](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111213495.png)\\r\\n\\r\\n\\r\\n\\r\\n15：真题\\r\\n\\r\\n![image-20220614104318801](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614104318801.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n##### 6/10 IP组播、IP分组\\r\\n\\r\\n\\r\\n\\r\\n**IP数据报的三种传输方式**\\r\\n\\r\\n![image-20220612114900045](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612114900045.png)\\r\\n\\r\\n\\r\\n\\r\\n组播\\r\\n\\r\\n![image-20220612115806806](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612115806806.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220612120538681](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120538681.png)\\r\\n\\r\\n可能会考察IP地址和MAC地址进行一个映射\\r\\n\\r\\nIGMP、ICMP\\r\\n\\r\\n![image-20220612120922369](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120922369.png)\\r\\n\\r\\n![image-20220612121149516](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121149516.png)\\r\\n\\r\\n\\r\\n\\r\\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\\r\\n\\r\\n![image-20220612121739087](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121739087.png)\\r\\n\\r\\n组播的分类：\\r\\n\\r\\n![image-20220614110246790](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110246790.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n移动IP\\r\\n\\r\\n相关概念\\r\\n\\r\\n![image-20220612122301568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122301568.png)\\r\\n\\r\\n**具体步骤：** \\r\\n\\r\\n![image-20220612122751908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122751908.png)\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n###### 4.6.4\\r\\n\\r\\n01：仿真：时延更长\\r\\n\\r\\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\\r\\n\\r\\n![image-20220614105107539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614105107539.png)\\r\\n\\r\\n03：\\r\\n\\r\\n![image-20220614110057987](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110057987.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n###### 4.7.3\\r\\n\\r\\n02：\\r\\n\\r\\n![image-20220614112543930](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614112543930.png)\\r\\n\\r\\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\\r\\n\\r\\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\\r\\n\\r\\n\\r\\n\\r\\n#### 6/14 网络层结尾\\r\\n\\r\\n网络层设备\\r\\n\\r\\n![image-20220614115326374](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115326374.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220614115240655](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115240655.png)\\r\\n\\r\\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\\r\\n\\r\\n![image-20220614115540438](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115540438.png)\\r\\n\\r\\n默认路由：相当于场内求助\\r\\n\\r\\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\\r\\n\\r\\n路由转发、路由表：\\r\\n\\r\\n![image-20220614120034513](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120034513.png)\\r\\n\\r\\n---\\r\\n\\r\\n<font size=\\\"6\\\">总结</font>\\r\\n\\r\\n![image-20220614121344471](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121344471.png)\\r\\n\\r\\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \\r\\n\\r\\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\\r\\n\\r\\n**重要协议**\\r\\n\\r\\n![image-20220614120815416](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120815416.png)\\r\\n\\r\\n\\r\\n\\r\\n**路由算法：**\\r\\n\\r\\n![image-20220614120947577](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120947577.png)\\r\\n\\r\\nIPv4\\r\\n\\r\\n![image-20220614121053027](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121053027.png)\\r\\n\\r\\nNAT:私有共有地址的转换\\r\\n\\r\\n分片：链路可接受最大传输单元：MTU\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n4.8.4\\r\\n\\r\\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\\r\\n\\r\\n![image-20220616152431580](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152431580.png)\\r\\n\\r\\n\\r\\n\\r\\n05：路由表一般仅包含从目的网络到下一跳的IP地址\\r\\n\\r\\n\\r\\n\\r\\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\\r\\n\\r\\n![image-20220616152738634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152738634.png)\\r\\n\\r\\n\\r\\n\\r\\n08：\\r\\n\\r\\n![image-20220616153250741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616153250741.png)\\r\\n\\r\\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\\r\\n\\r\\n分组转发组成：交换结构、输入端口、输出端口\\r\\n\\r\\n14：\\r\\n\\r\\n路由器尽最大努力交付，但不确保\\r\\n\\r\\n![image-20220616154821062](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154821062.png)\\r\\n\\r\\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\\r\\n\\r\\n![image-20220616154721728](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154721728.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### 6/16 总结\\r\\n\\r\\n1.“尽最大努力交付”有哪些含义?\\r\\n\\r\\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\\r\\n\\r\\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\\r\\n\\r\\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\\r\\n\\r\\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\\r\\n\\r\\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\\r\\n\\r\\n​\\t但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\\r\\n\\r\\n​\\t现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\\r\\n\\r\\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\\r\\n\\r\\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\\r\\n\\r\\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\\r\\n\\r\\n---\\r\\n\\r\\n### **传输层**\\r\\n\\r\\n![image-20220616162138785](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162138785.png)\\r\\n\\r\\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\\r\\n\\r\\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\\r\\n\\r\\n![image-20220616162727518](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162727518.png)\\r\\n\\r\\n笔记：传输层的两大协议**：TCP和UDP的区别** \\r\\n\\r\\n![image-20220616163227947](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616163227947.png)\\r\\n\\r\\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220616164253795](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164253795.png)\\r\\n\\r\\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \\r\\n\\r\\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\\r\\n\\r\\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\\r\\n\\r\\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \\r\\n\\r\\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n![image-20220616164130771](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164130771.png)\\r\\n\\r\\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\\r\\n\\r\\n---\\r\\n\\r\\n#### 5.1.4习题\\r\\n\\r\\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \\r\\n\\r\\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \\r\\n\\r\\n![image-20220621161048543](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161048543.png)\\r\\n\\r\\n04：面向连接的服务：可靠性和按序到达 \\r\\n\\r\\n![image-20220621161657953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161657953.png)\\r\\n\\r\\n12：报文的头部长度问题\\r\\n\\r\\n![image-20220621162547501](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621162547501.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/17 UDP\\r\\n\\r\\n<h4>UDP的特点</h4>\\r\\n\\r\\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \\r\\n\\r\\n![image-20220617115928628](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617115928628.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220617120318549](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617120318549.png)\\r\\n\\r\\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \\r\\n\\r\\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\\r\\n\\r\\n**UDP检验：** \\r\\n\\r\\n![image-20220617121008248](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617121008248.png)\\r\\n\\r\\n按2进制反码运算求和，将得出结果再求反码 \\r\\n\\r\\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\\r\\n\\r\\n---\\r\\n\\r\\n#### 5.2.3习题\\r\\n\\r\\n02：UDP数据报的长度不包含伪首部的长度\\r\\n\\r\\n【可选】当源主机不想计算校验和，则令该字段为0\\r\\n\\r\\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\\r\\n\\r\\nIP数据报的差别是只能找到目的主机而无法找到目的进程\\r\\n\\r\\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\\r\\n\\r\\n\\r\\n\\r\\n09:伪首部仅在校验和和计算期间建立，并不发送\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/21 TCP\\r\\n\\r\\n<h3>TCP协议的特点</h3> \\r\\n\\r\\n![image-20220621183009893](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621183009893.png)\\r\\n\\r\\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\\r\\n\\r\\n<h4>TCP报文段首部格式</h4>\\r\\n\\r\\n![image-20220621184449953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184449953.png)\\r\\n\\r\\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\\r\\n\\r\\n\\r\\n\\r\\nURG 、 ACK 、  SYN、  FIN \\r\\n\\r\\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\\r\\n\\r\\n窗口：\\r\\n\\r\\n![image-20220621184322344](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184322344.png)\\r\\n\\r\\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\\r\\n\\r\\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\\r\\n\\r\\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\\r\\n\\r\\n---\\r\\n\\r\\n\\r\\n\\r\\n#### 6/23 TCP连接\\r\\n\\r\\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\\r\\n\\r\\n<font color = \\\"red\\\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \\r\\n\\r\\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\\r\\n\\r\\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \\r\\n\\r\\n![image-20220623175221485](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175221485.png)\\r\\n\\r\\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\\r\\n\\r\\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\\r\\n\\r\\nACK:last_quarter_moon_with_face: 期待的下一个信号\\r\\n\\r\\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\\r\\n\\r\\n\\r\\n\\r\\n![image-20220623175024670](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175024670.png)\\r\\n\\r\\nFIN:结束位 只要是请求释放连接，FIN一定置为1\\r\\n\\r\\n四次握手就是断开或者说结束连接时需要的几个步骤。\\r\\n\\r\\n<font color = \\\"red\\\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \\r\\n\\r\\n---\\r\\n\\r\\n6/24 \\r\\n\\r\\n<h4>TCP可靠传输</h4>\\r\\n\\r\\n校验、序号、确认、重传\\r\\n\\r\\n确认：保证可靠传输，接收方要返回一个确认报文段。 \\r\\n\\r\\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\\r\\n\\r\\n\\r\\n\\r\\n冗余ACK：多余的、重复的报文段 \\r\\n\\r\\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\\r\\n\\r\\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\\r\\n\\r\\n---\\r\\n\\r\\n<h3>TCP流量控制</h3>\\r\\n\\r\\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\\r\\n\\r\\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \\r\\n\\r\\n![image-20220624171804134](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171804134.png)\\r\\n\\r\\n接收窗口(动态的调整)：rwnd\\t拥塞窗口：cwnd\\t\\t\\r\\n\\r\\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\\r\\n\\r\\n\\r\\n\\r\\n![image-20220624171723184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171723184.png)\\r\\n\\r\\n持续计时器\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/24 TCP流量控制 \\r\\n\\r\\n<h3>TCP拥塞控制</h3>\\r\\n\\r\\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \\r\\n\\r\\n![image-20220624172758430](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624172758430.png)\\r\\n\\r\\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\\r\\n\\r\\n\\r\\n\\r\\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \\r\\n\\r\\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\\r\\n\\r\\n![image-20220624173503511](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624173503511.png)\\r\\n\\r\\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\\r\\n\\r\\n<h4>慢开始和拥塞避免</h4>\\r\\n\\r\\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \\r\\n\\r\\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\\r\\n\\r\\n![image-20220624174558650](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624174558650.png)\\r\\n\\r\\n往返时延单位：RTT\\r\\n\\r\\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\\r\\n\\r\\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \\r\\n\\r\\n---\\r\\n\\r\\n<h4>快重传和快恢复</h4>\\r\\n\\r\\n只要收到三个重复的确认之后， 就会执行快重传算法\\r\\n\\r\\n快速的执行这样一个重传的过程 省下了很多等待的时间 \\r\\n\\r\\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\\r\\n\\r\\n![image-20220624175442774](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624175442774.png)\\r\\n\\r\\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\\r\\n\\r\\n---\\r\\n\\r\\n### 应用层\\r\\n\\r\\n#### 6/28 模型、DNS\\r\\n\\r\\n概述\\r\\n\\r\\n![image-20220628150804221](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628150804221.png)\\r\\n\\r\\n应用层功能和重要协议：\\r\\n\\r\\n![image-20220628151033867](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151033867.png)\\r\\n\\r\\n\\r\\n\\r\\n网络应用模型：客户/服务器模型（C/S） 主从式\\r\\n\\r\\nP2P模型\\t对等式 \\r\\n\\r\\nC/S 模型：\\r\\n\\r\\n![image-20220628151540247](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151540247.png)\\r\\n\\r\\n\\r\\n\\r\\nP2P模型\\r\\n\\r\\n![image-20220628151857973](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151857973.png)\\r\\n\\r\\n\\r\\n\\r\\n6.1.3\\r\\n\\r\\n01：集中式：集中在一台计算机上，分布式：多台计算机 \\r\\n\\r\\n![image-20220628154113079](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628154113079.png)\\r\\n\\r\\n\\r\\n\\r\\n05：客户机：面向任务的\\t服务器：面向客户的\\r\\n\\r\\n---\\r\\n\\r\\n<h3>DNS </h3>\\r\\n\\r\\n域名组成：顶级域名、二级域名、三级域名...\\r\\n\\r\\n![image-20220628155712157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628155712157.png)\\r\\n\\r\\n\\r\\n\\r\\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \\r\\n\\r\\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \\r\\n\\r\\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\\r\\n\\r\\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\\r\\n\\r\\n![image-20220628160921546](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628160921546.png)\\r\\n\\r\\nabc.org与 y.abc.org是对等关系\\r\\n\\r\\n\\r\\n\\r\\n域名解析过程\\r\\n\\r\\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \\r\\n\\r\\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\\r\\n\\r\\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \\r\\n\\r\\n\\r\\n\\r\\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\\r\\n\\r\\n##### 6.2.4\\r\\n\\r\\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\\r\\n\\r\\n  1个以太网卡：一个IP地址\\t  单个DNS~对应多个主机/多个MAC地址/多个ip\\r\\n\\r\\n 对这些都没有一一对应的关系\\r\\n\\r\\n02：Internet访问主机一定要有IP地址\\r\\n\\r\\n08：选C的原因\\r\\n\\r\\n![image-20220701160815319](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701160815319.png)\\r\\n\\r\\n10：\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n#### 6/29 传输层协议FTP\\r\\n\\r\\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\\r\\n\\r\\n FTP 它是使用TCP来实现可靠传输的\\r\\n\\r\\n![image-20220629180558599](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629180558599.png)\\r\\n\\r\\n\\r\\n\\r\\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\\r\\n\\r\\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\\r\\n\\r\\n文本模式（ASCII）、二进制模式\\t\\r\\n\\r\\n![image-20220629181142601](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629181142601.png)\\r\\n\\r\\n##### 6.3.3\\r\\n\\r\\n07:FTP的功能：![image-20220701164617822](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701164617822.png)\\r\\n\\r\\n08：封装的过程：自上而下\\t\\r\\n\\r\\n数据 数据段\\t数据报\\t数据帧\\t比特\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/1 电子邮件:e-mail:\\r\\n\\r\\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\\r\\n\\r\\n使用C/S模式\\t\\r\\n\\r\\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\\r\\n\\r\\n![image-20220701170014788](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170014788.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>SMTP</h3>\\r\\n\\r\\n![image-20220701170322680](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170322680.png)\\r\\n\\r\\n\\r\\n\\r\\nSMTP的缺点：\\r\\n\\r\\n ![image-20220701170907231](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170907231.png)\\r\\n\\r\\n扩充手段MINE:\\t使电子邮件系统支持声音、图像....\\r\\n\\r\\n\\r\\n\\r\\n<h4>POP3协议 </h4>\\r\\n\\r\\n端口号、TCP、C/S \\r\\n\\r\\n![image-20220701171059568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171059568.png)\\r\\n\\r\\n\\r\\n\\r\\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\\r\\n\\r\\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\\r\\n\\r\\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\\r\\n\\r\\n![image-20220701171618095](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171618095.png)\\r\\n\\r\\n##### 6.4.4\\r\\n\\r\\n07：\\r\\n\\r\\n![image-20220701174409155](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701174409155.png)\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/2 结尾：万维网和HTTP协议\\r\\n\\r\\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\\r\\n\\r\\n统一资源定位符URL 它是可以唯一标识每一个资源的\\r\\n\\r\\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \\r\\n\\r\\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\\r\\n\\r\\n![image-20220702162918872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702162918872.png)\\r\\n\\r\\n\\r\\n\\r\\nHTTP工作流程：\\r\\n\\r\\n![image-20220702163328133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702163328133.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>HTTP 协议的特点\\t</h3>\\r\\n\\r\\n 它采用TCP作为运输层的协议 是一种面向连接的\\r\\n\\r\\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\\r\\n\\r\\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） \\t那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \\r\\n\\r\\n![image-20220702164017763](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702164017763.png)\\r\\n\\r\\n\\r\\n\\r\\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\\r\\n\\r\\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议\\t\\r\\n\\r\\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\\r\\n\\r\\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\\r\\n\\r\\n---\\r\\n\\r\\nHTTP——报文结构\\r\\n\\r\\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \\r\\n\\r\\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\\r\\n\\r\\n![image-20220702165432365](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165432365.png)\\r\\n\\r\\n请求报文和响应报文\\r\\n\\r\\n![image-20220702165833550](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165833550.png)\\r\\n\\r\\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\\r\\n\\r\\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\\r\\n\\r\\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \\r\\n\\r\\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\\r\\n\\r\\n 5打头表示的就是服务器的差错\\r\\n\\r\\n---\\r\\n\\r\\n<H2>总结 </H2>\\r\\n\\r\\n**常用应用层协议小结：** \\r\\n\\r\\n![image-20220702171327778](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702171327778.png)\\r\\n\\r\\n![image-20220702173120051](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173120051.png)\\r\\n\\r\\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \\r\\n\\r\\n持久性/非持久性连接：考点重点，易考到：\\r\\n\\r\\n![image-20220702180809063](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180809063.png)\\r\\n\\r\\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \\r\\n\\r\\n![image-20220702170248777](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702170248777.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 6.5.3\\r\\n\\r\\n01：FTP：文件传输协议，可靠性高，实时性要求低\\r\\n\\r\\n![image-20220702173738805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173738805.png)\\r\\n\\r\\n\\r\\n\\r\\n07：\\r\\n\\r\\n![image-20220702174726133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702174726133.png)\\r\\n\\r\\n\\r\\n\\r\\n10：\\r\\n\\r\\n根据传输对象来确定传输所需时间\\r\\n\\r\\n**持久性连接流水线：**\\r\\n\\r\\n![image-20220702180422679](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180422679.png)\\r\\n\\r\\n\\r\\n\\r\\n非流水线：\\r\\n\\r\\n![image-20220702180616509](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180616509.png)\\r\\n\\r\\n---\\r\\n\\r\\n#### 7/31 \\r\\n\\r\\n<h3> 选择题小题每章重点</h3>\\r\\n\\r\\n第一章\\r\\n\\r\\n![image-20220731141406536](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731141406536.png)\\r\\n\\r\\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\\r\\n\\r\\n\\r\\n\\r\\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组\\t能否隔离... \\r\\n\\r\\n![image-20220731142248353](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142248353.png)\\r\\n\\r\\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA\\t\\r\\n\\r\\n![image-20220731142707141](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142707141.png)\\r\\n\\r\\n\\r\\n\\r\\n第四章：路由聚合：取交集\\r\\nCDN新增\\r\\n![image-20220731143027256](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143027256.png)\\r\\n\\r\\n第五章：TCP/UDP\\r\\n![image-20220731143305487](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143305487.png)\\r\\n\\r\\n第六章：难点：WWW+HTTP\\r\\n\\r\\nDNS域名解析\\t\\r\\n![image-20220731143645217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143645217.png)\\r\\n\\r\\n\\r\\n\\r\\n<h3>计网大题重点</h3>\\r\\n\\r\\n![image-20220731144324262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731144324262.png)\\r\\n\\r\\n路由协议，子网划分：BGP/OSPF/RIP跳数\\r\\n\\r\\n数据交换的分组交换方式：虚电路：面向连接\\r\\n\\r\\n中继器和集线器的差别：端口的个数 \\r\\n\\r\\nIPv4：重中之重 ABCDE五类地址\\t\\r\\n\\r\\nARP：IP转MAC地址\\tDHCP：动态ip地址的划分，回收\\tICMP：差错、控制报文（可不可达...）\\t\\r\\n\\r\\n应用层：HTTP与TCP的关系\\t\\r\\n\\r\\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \\r\\n\\r\\n![image-20220731152658875](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731152658875.png)\\r\\n\\r\\n\\r\\n\\r\\nIP地址解析过程：\\r\\n\\r\\n![image-20220731172153990](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731172153990.png)\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png\",\"articleTitle\":\"计算机网络笔记\",\"categoryName\":\"网络\",\"id\":61,\"isTop\":0,\"status\":1,\"tagNameList\":[\"学习\",\"408\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 18:51:30',NULL),
(1134,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\r\\n\\r\\n![image-20220308153016669](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308153016669.png)\\r\\n\\r\\n空间复杂度计算\\r\\n\\r\\n![image-20220308163338103](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308163338103.png)\\r\\n\\r\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\r\\n\\r\\nloga(M/N)=logaM - logaN\\r\\n\\r\\n###### 3/13\\r\\n\\r\\n![image-20220313212637718](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313212637718.png)\\r\\n\\r\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\r\\n\\r\\n![image-20220313213230498](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313213230498.png)\\r\\n\\r\\n###### 3/14\\r\\n\\r\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\r\\n\\r\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\r\\n\\r\\n最好情况：均在表尾插入/删除元素\\r\\n\\r\\n最坏：在表头插入、删除元素（移动次数多）\\r\\n\\r\\n![image-20220314173030789](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173030789.png)\\r\\n\\r\\n动态存储\\r\\n\\r\\n![image-20220314173152311](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173152311.png)\\r\\n\\r\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\r\\n\\r\\n![image-20220314181520001](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314181520001.png)\\r\\n\\r\\n复杂度为O(1)\\r\\n\\r\\n```c\\r\\n\\r\\n//头插法 3/15\\r\\nvoid insertListHead(LinkList &l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n    l->next =NULL; //可能有那啥的脏数据\\r\\n\\tNode* newNode;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\tnewNode->next = l->next;\\r\\n\\t\\tl->next = newNode;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//尾插法 3/15\\r\\nvoid insertListTail(LinkList& l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n\\tNode* newNode;\\r\\n\\tNode* tmp =l;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\ttmp->next = newNode;\\r\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\r\\n\\t}\\r\\n    tmp->next =NULL;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n静态链表：![image-20220315213703769](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315213703769.png)\\r\\n\\r\\n\\r\\n\\r\\n增删链表效率高于顺序表\\r\\n\\r\\n![image-20220315215132762](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215132762.png)\\r\\n\\r\\n![image-20220315215427937](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215427937.png)\\r\\n\\r\\n###### 3/18\\r\\n\\r\\n第一章：\\r\\n\\r\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\r\\n\\r\\nP4:综合应用题：\\r\\n\\r\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\r\\n\\r\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\r\\n\\r\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\r\\n\\r\\n答：![image-20220320165638974](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220320165638974.png)\\r\\n\\r\\n\\r\\n\\r\\nP18:综合应用题：\\r\\n\\r\\n01:\\r\\n\\r\\n```apl\\r\\nif(length<1){\\r\\n\\treturn false;\\r\\n}\\r\\nElemtype del = data[length-1];\\r\\nElemtype tmp;\\r\\nint pos=0;\\r\\nfor(int i=0;i<length-1;i++){\\r\\n\\ttmp = data[i];\\r\\n\\tif(data[i]<tmp){\\r\\n\\t\\ttmp = data[i];\\r\\n\\t\\tpos++;\\r\\n\\t}\\r\\n}\\r\\n\\tdata[pos] = del;\\r\\n\\tlength--;\\r\\n\\r\\n\\treturn true;\\r\\n```\\r\\n\\r\\n02:\\r\\n\\r\\n```bash\\r\\nvoid Reverse(Sqlist &l){\\r\\n\\tElemType tmp;\\r\\n\\tint pos = l.length-1;\\r\\n\\tfor(i=0;i<l.length/2;i++){\\r\\n\\t\\ttmp = l.data[i];\\r\\n\\t\\tl.data[i]= l.data[pos];\\r\\n\\t\\tpos--;\\r\\n\\t\\tl.data[pos] = tmp;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n错题总结：\\r\\n\\r\\nP17:\\r\\n\\r\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\r\\n\\r\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\r\\n\\r\\n08：线性表删除第i个元素移动n-i个元素即可\\r\\n\\r\\n###### 3/21\\r\\n\\r\\n![image-20220321163406818](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163406818.png)\\r\\n\\r\\n栈的出栈顺序数量的计算：卡特兰数\\r\\n\\r\\n![image-20220321163828984](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163828984.png)\\r\\n\\r\\ntop++ 和++top的区别\\r\\n\\r\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\r\\n\\r\\n![image-20220321164627443](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321164627443.png)\\r\\n\\r\\n栈满：top==MaxSize\\r\\n\\r\\n共享栈栈满条件：top1+1==top2\\r\\n\\r\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\r\\n\\r\\n![image-20220321171717178](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321171717178.png)\\r\\n\\r\\n括号匹配流程图\\r\\n\\r\\n![image-20220321175550753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175550753.png)\\r\\n\\r\\n用栈实现括号匹配：\\r\\n\\r\\n具体代码：\\r\\n\\r\\n```c\\r\\n#define Maxsize 10            //定义栈中元素的\\r\\ntypedef struct{\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top;                    //栈顶指针\\r\\n}SqStack;\\r\\n//初始化栈\\r\\nvoid InitStack(Sqstack &S)\\r\\n//判断栈是否为空\\r\\nbool stackEmpty(SqStack S)\\r\\n//新元素入栈\\r\\nbool Push(SqStack &S,char x)\\r\\n//栈顶元素出栈，用x返回\\r\\nbool Pop(SqStack &s,char &x)\\r\\n\\r\\n    //有栈的情况\\r\\nbool bracketCheck(char str[],int length) {\\r\\nSqStack s;\\r\\nInitStack(S); //初始化一个栈\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\r\\n}else {\\r\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\nPop(S,topElem);//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return StackEmpty(S);\\r\\n}\\r\\n\\r\\nbool compare(int x,int y){\\r\\n    if(x!=(y-1)){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n       //无栈的情况\\r\\nbool bracketCheck1(char str[],int length) {\\r\\n int MaxSize = length;\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top=-1;  \\r\\n\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n    if(compare(top,length)){\\r\\n\\t\\ttop++;\\r\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\r\\n    }\\r\\n}else {\\r\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\ntopElem = data[top];\\r\\n    top--;//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return top==-1;\\r\\n}\\r\\n    \\r\\n    \\r\\n    \\r\\n```\\r\\n\\r\\n![image-20220321175834694](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175834694.png)\\r\\n\\r\\n###### 3/23~24\\r\\n\\r\\n![image-20220324080429724](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324080429724.png)\\r\\n\\r\\n程序输出结果只能是第一种（唯一性、确定性）\\r\\n\\r\\n后缀表达式的手算方法：\\r\\n\\r\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\r\\n\\r\\n注意：两个操作数的左右顺序\\r\\n\\r\\n机算：\\r\\n\\r\\n![image-20220324100504170](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324100504170.png)\\r\\n\\r\\n用栈实现后缀表达式的计算：\\r\\n\\r\\n①从左往右扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n----\\r\\n\\r\\n前缀表达式：\\r\\n\\r\\n**中缀表达式转前缀表达式（手算）**\\r\\n\\r\\n① 确定中缀表达式中各个运算符的运算顺序\\r\\n\\r\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\r\\n\\r\\n③ 如果还有运算符没被处理，就继续 ②\\r\\n\\r\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\r\\n\\r\\n机算：\\r\\n\\r\\n用栈实现前缀表达式的计算：\\r\\n\\r\\n①从右往左扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n![image-20220323214326729](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214326729.png)\\r\\n\\r\\n\\r\\n\\r\\n中->前\\r\\n\\r\\n注：先弹出的是左操作数，后弹出的是右操作数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220323214621134](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214621134.png)\\r\\n\\r\\n![image-20220324214643950](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324214643950.png)\\r\\n\\r\\n上三角按行存放 <===> 下三角按列存放\\r\\n\\r\\n下三角按行存<====>上三角按列存\\r\\n\\r\\n![image-20220404155200213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404155200213.png)\\r\\n\\r\\n###### 4/1\\r\\n\\r\\n串\\r\\n\\r\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\r\\n\\r\\n 高四位 低四位\\r\\n\\r\\na 0110\\t0001  \\r\\n\\r\\n![image-20220401151418753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401151418753.png)\\r\\n\\r\\nKMP：\\r\\n\\r\\n![image-20220401173325778](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401173325778.png)\\r\\n\\r\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\r\\n\\r\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\r\\n\\r\\n![image-20220401174809686](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401174809686.png)\\r\\n\\r\\n**nextVal数组求法**，先让第一位=0\\r\\n\\r\\n###### 4/3~4/5\\r\\n\\r\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\r\\n\\r\\n![image-20220403110614673](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403110614673.png)\\r\\n\\r\\ni<=n/2是分支结点，i>n/2是叶子结点\\r\\n\\r\\n![image-20220403114319211](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403114319211.png)\\r\\n\\r\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\r\\n\\r\\n![image-20220404164718616](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404164718616.png)\\r\\n\\r\\n线索化二叉树\\r\\n\\r\\n![image-20220404172003418](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404172003418.png)\\r\\n\\r\\n----\\r\\n\\r\\n![image-20220405213126866](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220405213126866.png)\\r\\n\\r\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\r\\n\\r\\n###### 4/6\\r\\n\\r\\n哈夫曼树：最优二叉树\\r\\n\\r\\n带权路径最小的二叉树\\r\\n\\r\\n**并查集代码**\\r\\n\\r\\n![image-20220406120550029](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406120550029.png)\\r\\n\\r\\n最坏情况下时间复杂度与树的高度h相关\\r\\n\\r\\n优化合并操作 小树并入大树\\r\\n\\r\\n![image-20220406121508045](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121508045.png)\\r\\n\\r\\nfind()最坏时间复杂度变为O(logn)\\r\\n\\r\\n![image-20220406121805400](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121805400.png)\\r\\n\\r\\n树越矮，时间复杂度越低\\r\\n\\r\\nfind优化操作\\r\\n\\r\\n![image-20220407095927853](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407095927853.png)\\r\\n\\r\\n```c\\r\\n/*int Find(int nums[],int index){\\r\\n    int root = index;\\r\\n    while(nums[root]>=0){\\r\\n        root = nums[root];\\r\\n    }\\r\\n    while(index!=root){\\r\\n        int record = root;\\r\\n        nums[index] = root;\\r\\n        root = record;\\r\\n    }\\r\\n    return root;\\r\\n}*/\\r\\n//使树的高度不超过O(a(n))的数量级\\r\\n\\r\\n\\r\\n#pragma once\\r\\n#define Size 100\\r\\nint UFSets[Size];\\r\\n\\r\\n//初始化并查集\\r\\nvoid Initial(int S[]) {\\r\\n\\tfor (int i = 0;i < Size;i++) {\\r\\n\\t\\tS[i] = -1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//查找操作，找x的根节点\\r\\nint Find(int s[], int x) {\\r\\n\\twhile (s[x]>0)\\r\\n\\t{\\r\\n\\t\\tx = s[x];\\r\\n\\t}\\r\\n\\treturn x;\\r\\n}\\r\\n\\r\\n//合并操作 根节点统一  树高<=logn + 1\\r\\nvoid Union(int s[], int root1, int root2) {\\r\\n\\tif (root1 == root2) {\\r\\n\\t\\treturn ;\\r\\n\\t}\\r\\n\\tif (s[root2] > s[root1]) { //root2是小树\\r\\n\\t\\ts[root1] += s[root2];\\r\\n\\t\\ts[root2] = root1;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\ts[root2] += s[root1];\\r\\n\\t\\ts[root1] = root2;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n![image-20220407102644213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407102644213.png)\\r\\n\\r\\n错题：\\r\\n\\r\\n![image-20220407151722612](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407151722612.png)\\r\\n\\r\\n![image-20220407153146599](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407153146599.png)\\r\\n\\r\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\r\\n\\r\\n![image-20220407171123064](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171123064.png)\\r\\n\\r\\n![image-20220407171457661](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171457661.png)\\r\\n\\r\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\r\\n\\r\\n###### 4/16\\r\\n\\r\\n图的顶点个数 = 图的阶数\\r\\n\\r\\n![image-20220416121001775](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416121001775.png)\\r\\n\\r\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\r\\n\\r\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\r\\n\\r\\n![image-20220416162035318](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416162035318.png)\\r\\n\\r\\n邻接表、邻接矩阵的**区别**\\r\\n\\r\\n![image-20220416163840634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416163840634.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 4/18\\r\\n\\r\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\r\\n\\r\\n```c\\r\\n// 邻接表中表对应的链表的顶点\\r\\ntypedef struct _ENode\\r\\n{\\r\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\r\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\r\\n}ENode, *PENode;\\r\\n\\r\\n// 邻接表中表的顶点\\r\\ntypedef struct _VNode\\r\\n{\\r\\n    char data;              // 顶点信息\\r\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\r\\n}VNode;\\r\\n\\r\\n// 邻接表\\r\\ntypedef struct _LGraph\\r\\n{\\r\\n    int vexnum;             // 图的顶点的数目\\r\\n    int edgnum;             // 图的边的数目\\r\\n    VNode vexs[MAX];\\r\\n}LGraph;\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\r\\n\\r\\n![image-20220418213147807](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213147807.png)\\r\\n\\r\\n![image-20220418213557320](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213557320.png)\\r\\n\\r\\n访问各个顶点所需时间+访问各边所需时间\\r\\n\\r\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\r\\n\\r\\n**深度优先遍历：**和树的**先根**遍历类似\\r\\n\\r\\n![image-20220419165025285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220419165025285.png)\\r\\n\\r\\n---\\r\\n\\r\\nPrim算法和kruskal算法![image-20220421202140630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421202140630.png)\\r\\n\\r\\n![image-20220421213517892](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421213517892.png)\\r\\n\\r\\n考频只有一题的选择：\\r\\n\\r\\n![image-20220421215042729](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421215042729.png)\\r\\n\\r\\n---\\r\\n\\r\\n关键路径\\r\\n\\r\\n![image-20220424212457566](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220424212457566.png)\\r\\n\\r\\n4/24复习\\r\\n\\r\\n![image-20220422181640348](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220422181640348.png)\\r\\n\\r\\ne(i) :活动ai最早开始的时间\\r\\n\\r\\nl(i) :活动ai最晚开始的时间\\r\\n\\r\\nvl(k)：活动vk最迟发生时间 vek:最早\\r\\n\\r\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\r\\n\\r\\n![image-20220429113037264](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429113037264.png)\\r\\n\\r\\n差值为0的就是关键路径\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#### 5 月\\r\\n\\r\\n![image-20220505203332110](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220505203332110.png)\\r\\n\\r\\n查找判定树\\r\\n\\r\\n判断「平衡二叉树」的 2 个条件：\\r\\n\\r\\n- **1. 是「二叉排序树」**\\r\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\r\\n\\r\\n二叉排序树\\r\\n\\r\\n平衡二叉树\\r\\n\\r\\n二叉搜索树\\r\\n\\r\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\r\\n\\r\\n---\\r\\n\\r\\n<h3>折半查找：</h3>\\r\\n\\r\\n只适用于有序的顺序表\\r\\n\\r\\n![image-20220801105659956](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801105659956.png)\\r\\n\\r\\n\\r\\n\\r\\n折半查找构成了二叉排序树\\r\\n\\r\\n可以把折半查找看成一颗二叉排序树\\r\\n\\r\\n![image-20220506172506706](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506172506706.png)\\r\\n\\r\\n二叉排序树删除操作\\r\\n\\r\\n![image-20220506173438156](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506173438156.png)\\r\\n\\r\\n7.3.3中要重点了解的例1~3，例4\\r\\n\\r\\n**简单路径定义：**\\r\\n\\r\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220512164410294](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512164410294.png)\\r\\n\\r\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\r\\n\\r\\n\\r\\n\\r\\n**红黑树性质**\\r\\n\\r\\n![image-20220512120734504](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512120734504.png)\\r\\n\\r\\n红黑树插入\\r\\n\\r\\n![image-20220512144705058](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512144705058.png)\\r\\n\\r\\n看“叔”脸色\\r\\n\\r\\n\\r\\n\\r\\n红黑树性质+插入总结：\\r\\n\\r\\n![image-20220512153750568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512153750568.png)\\r\\n\\r\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\r\\n\\r\\n**B树**\\r\\n\\r\\n特性\\r\\n\\r\\n![image-20220517191547133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517191547133.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517182017286](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517182017286.png)\\r\\n\\r\\n树的高度\\r\\n\\r\\n![image-20220517195601030](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517195601030.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517183218196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517183218196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517202426310](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517202426310.png)\\r\\n\\r\\n（上下限：除了根节点外，结点关键字个数n: )\\r\\n\\r\\n\\r\\n\\r\\n![image-20220519205336630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220519205336630.png)\\r\\n\\r\\nB树/B+树类比\\r\\n\\r\\n---\\r\\n\\r\\n**散列（哈希表）**\\r\\n\\r\\n拉链法：同义词串成一个链表\\r\\n\\r\\n开放定址法![image-20220520184858217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520184858217.png)\\r\\n\\r\\n着重考察：线性探测法、平方探测法\\r\\n\\r\\n\\r\\n\\r\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185042751.png)\\r\\n\\r\\n总结\\r\\n\\r\\n![image-20220520185629378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185629378.png)\\r\\n\\r\\n装填因子概念也需重视\\r\\n\\r\\nQuestion1:\\r\\n\\r\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\r\\n\\r\\n(1) 请画出所构造的散列表。\\r\\n\\r\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\r\\n\\r\\n![image-20220522195603948](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522195603948.png)\\r\\n\\r\\n\\r\\n\\r\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\r\\n\\r\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/23 排序算法\\r\\n\\r\\n插入排序法\\r\\n\\r\\n![image-20220523120242919](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220523120242919.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/27 快速排序\\r\\n\\r\\n时间、空间复杂度与递归层次有关\\r\\n\\r\\n![image-20220527151635848](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527151635848.png)\\r\\n\\r\\n**快排时间效率分析：**\\r\\n\\r\\n![image-20220527152551897](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527152551897.png)\\r\\n\\r\\n---\\r\\n\\r\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\r\\n\\r\\n![image-20220527153223741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527153223741.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### **8.3.3**\\r\\n\\r\\n---\\r\\n\\r\\n第七题：**x趟排序应产生x个分界线。**\\r\\n\\r\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\r\\n\\r\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\r\\n\\r\\n![image-20220527163829533](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527163829533.png)\\r\\n\\r\\n---\\r\\n\\r\\n第9题：关于快排的**完美**划分\\r\\n\\r\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\r\\n\\r\\n排序速度最慢：原数组已基本有序\\r\\n\\r\\n![image-20220527170237805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527170237805.png)\\r\\n\\r\\n##### 5/29 堆排序\\r\\n\\r\\n最主要的算法还是向下调整HeadAdjust()函数\\r\\n\\r\\n![image-20220529164723637](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529164723637.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220529165608132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529165608132.png)\\r\\n\\r\\n堆排序的空间复杂度：常数级 O(1)\\r\\n\\r\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\r\\n\\r\\n![image-20220529170403872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529170403872.png)\\r\\n\\r\\n堆的插入和删除\\r\\n\\r\\n考试可能考比较次数\\r\\n\\r\\n![image-20220529172811881](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529172811881.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/30 归并排序+基数排序\\r\\n\\r\\n二路归并：把两个已经有序的序列合并成一个\\r\\n\\r\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\r\\n\\r\\n![image-20220530201445366](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530201445366.png)\\r\\n\\r\\n**基数排序：**代码不怎么考，主要手算模拟即可\\r\\n\\r\\n![image-20220530203930350](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530203930350.png)\\r\\n\\r\\n---\\r\\n\\r\\n排序算法的空间、时间复杂度\\r\\n\\r\\n![image-20220531195457004](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531195457004.png)\\r\\n\\r\\n\\r\\n\\r\\n5/31外部排序\\r\\n\\r\\n\\r\\n\\r\\n![image-20220531214333361](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214333361.png)\\r\\n\\r\\nr<=K^h-1 ,树的结点最大的一层\\r\\n\\r\\n要归并的数据都是分块读入内存的\\r\\n\\r\\n![image-20220531214752539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214752539.png)\\r\\n\\r\\n\\r\\n\\r\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\r\\n\\r\\n![image-20220531215026199](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531215026199.png)\\r\\n\\r\\n\\r\\n\\r\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\r\\n\\r\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\r\\n\\r\\n##### 6/2 结尾\\r\\n\\r\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\r\\n\\r\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\r\\n\\r\\n考查手算模拟即可\\r\\n\\r\\n![image-20220602155542194](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602155542194.png)\\r\\n\\r\\n---\\r\\n\\r\\n**置换选择排序：**减少初始归并段的个数\\r\\n\\r\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\r\\n\\r\\n![image-20220602161911437](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602161911437.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n**最佳归并树**\\r\\n\\r\\n![image-20220602174054132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602174054132.png)\\r\\n\\r\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\r\\n\\r\\nk叉最佳归并树：\\r\\n\\r\\n![image-20220602164837160](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602164837160.png)\\r\\n\\r\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\r\\n\\r\\n![image-20220602165011687](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602165011687.png)\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**各种排序算法的性质总结**</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220602170322008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602170322008.png)\\r\\n\\r\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\r\\n\\r\\n\\r\\n\\r\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\r\\n\\r\\n![image-20220602201630861](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602201630861.png)\\r\\n\\r\\n---\\r\\n\\r\\n### 8/1 算法题\\r\\n\\r\\n数组题解题框架：\\r\\n\\r\\n![image-20220801155037671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801155037671.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"2022-3-5~6-5 数据结构所有笔记\",\"categoryName\":\"算法\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 18:51:42',NULL),
(1135,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 2022/3/13\\n\\n计算机网络就是一些互联的、自治的计算机系统的集合\\n\\n三类观点\\n\\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\\n\\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\\n\\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\\n\\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\\n\\n**最基本和最重要的功能：数据通信**\\n\\n---\\n\\n计算机网络的各种分类：\\n\\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\\n\\n**传输技术分类：**1、广播式网络 2、点对点网络\\n\\n**拓扑结构分类：**拓扑结构只要取决于通信子网\\n\\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\\n\\n使用者分类：公用网/专用网\\n\\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\\n\\n传输介质分类：有线类/无线类\\n\\n---\\n\\n**计网性能指标(需理解的)**：\\n\\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\\n\\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \\n\\n3、时延带宽积：=传播时延 X 信道宽度\\n\\n描述数据量，此时此刻的数据容量\\n\\n4、往返时延RTT\\n\\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\\n\\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\\n\\n6、速率：比特在信道上跑的速度\\n\\n7、信道利用率\\n\\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\\n\\n![image-20220326145029611](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220326145029611.png)\\n\\n###### 3/27\\n\\n分层：上层使用下层的服务\\n\\n1、各层之间相互独立\\n\\n2、每层之间的界面自然清晰\\n\\n3、结构上可分割开\\n\\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\\n\\n5、整个分层结构能促进标准化工作\\n\\n\\n\\n###### 4/10\\n\\n第二章 物理层\\n\\n编码和调制的方式：![image-20220410200234421](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200234421.png)\\n\\n![image-20220410200555847](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200555847.png)\\n\\n\\n\\n![image-20220410174726310](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410174726310.png)\\n\\n电路交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410175551747](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410175551747.png)\\n\\n报文交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410180148943](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410180148943.png)\\n\\n分组交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410181910065](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410181910065.png)\\n\\n计算题总结：\\n\\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\\n\\n则每个码元携带log x比特信息\\n\\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\\n\\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\\n\\n4.有效离散值个数x\\n\\n数据传输率 = 波特率B*log x\\n\\n从而可推出x\\n\\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\\n\\n###### 4/11\\n\\n![image-20220411165713593](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220411165713593.png)\\n\\n**中继器**：五四三规则\\n\\n![image-20220414155503235](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220414155503235.png)\\n\\n分组交换的两种方式的差别\\n\\n### 4/26\\n\\nCRC、fcs\\n\\n![image-20220426120703383](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426120703383.png)\\n\\n海明校验码：已记录在笔记本上\\n\\n![image-20220426155453399](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426155453399.png)\\n\\n滑动窗口可以解决流量控制和可靠传输的\\n\\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\\n\\n![image-20220426162008770](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426162008770.png)\\n\\n可靠不可靠的层的区分\\n\\n##### 计算循环冗余码：\\n\\n1、加0：假设生成多项式的阶为r,则加r个0\\n\\n如10011的阶为4，多项式为N位，则阶为N-1\\n\\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\\n\\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\\n\\n###### 4/29\\n\\nGBN:\\n\\n![image-20220429164818170](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429164818170.png)\\n\\n---\\n\\n介质访问控制\\n\\n![image-20220430173043452](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220430173043452.png)\\n\\n\\n\\n##### 5/3~\\n\\nCSMA协议分为3种：\\n\\n1-坚持CSMA\\n\\n非坚持CSMA\\n\\np-坚持CSMA（较优）\\n\\n---\\n\\nPPP协议\\n\\n![image-20220512192023907](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512192023907.png)\\n\\nPPP/HDLC异同\\n\\n![image-20220512193909179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512193909179.png)\\n\\n---\\n\\n###### 3.6选择题\\n\\n![image-20220513200509279](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513200509279.png)\\n\\n问某某设备功能的题目解决方案：\\n\\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\\n\\n\\n\\n![image-20220513202718952](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513202718952.png)\\n\\n总结各层设备的特点以及冲突域广播域的分割\\n\\n\\n\\n![image-20220513205445377](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513205445377.png)\\n\\nOSI参考模型中的数据链路层分为以下两个子层：\\n\\nMAC子层：数据封装与解封装\\n\\nLLC子层：给帧加序号\\n\\n\\n\\n###### 3.7习题\\n\\n3.集中控制式 **分布控制式**\\n\\n![image-20220515205146940](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515205146940.png)\\n\\n\\n\\nPPP、HDLC协议\\n\\n![image-20220517170134008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517170134008.png)\\n\\n\\n\\n3.8\\n\\n![image-20220517173054196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173054196.png)\\n\\n\\n\\n![image-20220517173537031](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173537031.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n网桥\\n\\n![image-20220515210938702](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515210938702.png)\\n\\n又分为透明网桥以及**源路由网桥**\\n\\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\\n\\n###### 冲突域与广播域的考点\\n\\n![image-20220515213814436](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515213814436.png)\\n\\n（背）\\n\\n![image-20220521144927118](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521144927118.png)\\n\\n（王道书上的）\\n\\n一个网段就是一个冲突域\\n\\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\\n\\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\\n\\n路由器：遇到广播信号不转发形成广播域\\n\\n---\\n\\n\\n\\n### 5.21 网络层\\n\\n![image-20220521145846315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521145846315.png)\\n\\n网络层功能\\n\\n![image-20220521150450769](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521150450769.png)\\n\\n路由算法\\n\\n![image-20220522161302439](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522161302439.png)\\n\\n\\n\\n---\\n\\n\\n\\n\\n\\nAS概念\\n\\n![image-20220521151931138](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521151931138.png)\\n\\n内部使用的协议外部看不到\\n\\n![image-20220521152221640](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521152221640.png)\\n\\n路由选择协议，内部IGP 外部EGP\\n\\n---\\n\\nSDN\\n\\n每路由器法\\n\\n![image-20220521153045039](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153045039.png)\\n\\n![image-20220521153529671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153529671.png)\\n\\n![image-20220521155328285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155328285.png)\\n\\nSDN控制器的三个层次：网络范围状态管理层、通信层....\\n\\n![image-20220521155701758](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155701758.png)\\n\\n\\n\\n![image-20220521154751935](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521154751935.png)\\n\\nSDN总结\\n\\n\\n\\n---\\n\\n\\n\\n###### 各个层次的协议总结：\\n\\n![image-20220522164627690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522164627690.png)\\n\\n---\\n\\n\\n\\nIP数据报的格式\\n\\n![image-20220522170527291](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522170527291.png)\\n\\n源IP地址和目的IP地址：32位\\n\\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\\n\\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\\n\\n总长度：首部的部分+数据部分  2^16 -1\\n\\n各协议所对应的字段值： 如UDP-17（不建议连接\\n\\n![image-20220522171238690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522171238690.png)\\n\\n \\n\\n###### 5/24 \\n\\n\\\"坏消息传的慢\\\"\\n\\n![image-20220524145342845](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145342845.png)\\n\\nRIP协议\\n\\n![image-20220524145739184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145739184.png)\\n\\n\\n\\nOSPF：\\n\\n![image-20220524153053725](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524153053725.png)\\n\\n\\n\\n---\\n\\n![image-20220524165003184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524165003184.png)\\n\\n**算法分类**\\n\\n###### 5/26 \\n\\n**IP数据报格式以及分片/片偏移**\\n\\n![image-20220526200301772](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526200301772.png)\\n\\n\\n\\n对应的总/片/首长度单位：“一种八片的手势”\\n\\n![image-20220526201234783](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526201234783.png)\\n\\n\\n\\n私有IP地址：IP地址的分类\\n\\n![image-20220526203338021](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203338021.png)\\n\\n\\n\\n![image-20220526203626818](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203626818.png)\\n\\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\\n>\\n> **广播**地址：主机号全1\\n>\\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\\n>\\n\\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\\n\\n**Practice:**\\n\\n![image-20220528145909542](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528145909542.png)\\n\\n\\n\\n![image-20220528150734140](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528150734140.png)\\n\\n是否作为源地址？目的地址？\\n\\n小结\\n\\n![image-20220528151523517](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528151523517.png)\\n\\n\\n\\n---\\n\\n5/27\\n\\n子网掩码划分\\n\\n![image-20220527192726514](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527192726514.png)\\n\\n点分十进制，子网掩码：255.255.0.0\\n\\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\\n\\n\\n\\n![image-20220527200329979](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527200329979.png)\\n\\n超网\\n\\n网络层提供的两种服务：\\n\\n![image-20220528115835171](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528115835171.png)\\n\\n###### 5/28划分子网IPv4地址\\n\\n划分子网的过程：\\n\\n![image-20220528153733212](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528153733212.png)\\n\\n从主机位借用1个比特作为子网号，划分成了2个子网\\n\\n**默认子网掩码：**\\n\\nA类：8位网络号 24位主机号：255.0.0.0\\n\\nB类：16位~ ：255.255.0.0\\n\\nC类：24位~：255.255.255.0\\n\\n小结\\n\\n![image-20220528155810385](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528155810385.png)\\n\\n\\n\\n###### 5/30\\n\\nCIDR相关计算\\n\\n![image-20220530113748646](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530113748646.png)\\n\\n\\n\\n![image-20220530115327838](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115327838.png)\\n\\n**找共同前缀，然后剩余13个比特全部取0**\\n\\n![image-20220530115459321](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115459321.png)\\n\\n---\\n\\n\\n\\n![image-20220530121115278](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530121115278.png)\\n\\ntry 例题\\n\\n![image-20220530145820144](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820144.png)![image-20220530145820055](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820055.png)\\n\\n---\\n\\nARP协议：解决下一跳走哪的问题\\n\\n![image-20220530152954244](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530152954244.png)\\n\\n\\n\\n**ICMP协议**\\n\\n\\n\\n5种差错报告报文![image-20220531202035262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202035262.png)\\n\\n不应发送差错报文的情况（可能在选择题里考）\\n\\n![image-20220531202416345](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202416345.png)\\n\\n\\n\\n###### 4.3.5\\n\\n01：各个协议在各个层次的分布，C选项中均在网络层\\n\\n![image-20220530154801554](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530154801554.png)\\n\\n\\n\\n04：IP分组中的检验字段都只检验首部\\n\\n![image-20220531205032699](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531205032699.png)\\n\\n\\n\\n14：环路地址分辨\\n\\n![image-20220531210024179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531210024179.png)\\n\\n\\n\\n20：\\n\\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\\n\\n内部网络地址0~255，A/B/C类地址\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n##### 6/9  IPv6 \\n\\n\\n\\n![image-20220609203542315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609203542315.png)\\n\\n源地址和目的地址都是128位\\n\\n**IPv6和v4的区别：**\\n\\n![image-20220609204231454](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609204231454.png)\\n\\nipv6没有提供校验和字段，首部长度固定的\\n\\n**QoS简介**\\n\\n![image-20220609210332500](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609210332500.png)\\n\\n\\n\\n##### 6/10 RIP、OSPF、BGP\\n\\n**RIP协议**\\n\\n![image-20220610194501157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194501157.png)\\n\\n\\n\\n![image-20220610181233743](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610181233743.png)\\n\\nRIP协议“好消息传得快，坏消息传的慢”\\n\\n---\\n\\n**OSPF**(网络层协议)\\n\\n![image-20220610193835557](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610193835557.png)\\n\\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\\n\\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\\n\\n其他特点\\n\\n![image-20220610194256116](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194256116.png)\\n\\n---\\n\\n**BGP协议**\\n\\n![image-20220610195450908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610195450908.png)\\n\\n只需知道BGP协议交换的信息包含的是什么内容就可以了\\n\\n特点\\n\\n![image-20220610200158672](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200158672.png)\\n\\n四种报文\\n\\n![image-20220610200227378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200227378.png)\\n\\n\\n\\nBGP/OSPF/RIP协议所对应的不同报文:\\n\\n![image-20220610200532615](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200532615.png)\\n\\n![image-20220610200852427](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200852427.png)\\n\\n\\n\\n\\n\\n###### 4.5.6\\n\\n01:\\n\\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\\n\\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\\n\\n\\n\\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\\n\\n\\n\\n08：RIP 、OSPF协议的差别\\n\\n![image-20220612111001610](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111001610.png)\\n\\n\\n\\n09：OSPF的分组类型\\n\\n![image-20220612111213495](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111213495.png)\\n\\n\\n\\n15：真题\\n\\n![image-20220614104318801](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614104318801.png)\\n\\n\\n\\n---\\n\\n\\n\\n##### 6/10 IP组播、IP分组\\n\\n\\n\\n**IP数据报的三种传输方式**\\n\\n![image-20220612114900045](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612114900045.png)\\n\\n\\n\\n组播\\n\\n![image-20220612115806806](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612115806806.png)\\n\\n\\n\\n![image-20220612120538681](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120538681.png)\\n\\n可能会考察IP地址和MAC地址进行一个映射\\n\\nIGMP、ICMP\\n\\n![image-20220612120922369](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120922369.png)\\n\\n![image-20220612121149516](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121149516.png)\\n\\n\\n\\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\\n\\n![image-20220612121739087](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121739087.png)\\n\\n组播的分类：\\n\\n![image-20220614110246790](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110246790.png)\\n\\n\\n\\n---\\n\\n移动IP\\n\\n相关概念\\n\\n![image-20220612122301568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122301568.png)\\n\\n**具体步骤：** \\n\\n![image-20220612122751908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122751908.png)\\n\\n---\\n\\n\\n\\n###### 4.6.4\\n\\n01：仿真：时延更长\\n\\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\\n\\n![image-20220614105107539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614105107539.png)\\n\\n03：\\n\\n![image-20220614110057987](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110057987.png)\\n\\n\\n\\n\\n\\n###### 4.7.3\\n\\n02：\\n\\n![image-20220614112543930](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614112543930.png)\\n\\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\\n\\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\\n\\n\\n\\n#### 6/14 网络层结尾\\n\\n网络层设备\\n\\n![image-20220614115326374](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115326374.png)\\n\\n\\n\\n![image-20220614115240655](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115240655.png)\\n\\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\\n\\n![image-20220614115540438](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115540438.png)\\n\\n默认路由：相当于场内求助\\n\\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\\n\\n路由转发、路由表：\\n\\n![image-20220614120034513](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120034513.png)\\n\\n---\\n\\n<font size=\\\"6\\\">总结</font>\\n\\n![image-20220614121344471](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121344471.png)\\n\\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \\n\\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\\n\\n**重要协议**\\n\\n![image-20220614120815416](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120815416.png)\\n\\n\\n\\n**路由算法：**\\n\\n![image-20220614120947577](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120947577.png)\\n\\nIPv4\\n\\n![image-20220614121053027](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121053027.png)\\n\\nNAT:私有共有地址的转换\\n\\n分片：链路可接受最大传输单元：MTU\\n\\n\\n\\n---\\n\\n4.8.4\\n\\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\\n\\n![image-20220616152431580](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152431580.png)\\n\\n\\n\\n05：路由表一般仅包含从目的网络到下一跳的IP地址\\n\\n\\n\\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\\n\\n![image-20220616152738634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152738634.png)\\n\\n\\n\\n08：\\n\\n![image-20220616153250741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616153250741.png)\\n\\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\\n\\n分组转发组成：交换结构、输入端口、输出端口\\n\\n14：\\n\\n路由器尽最大努力交付，但不确保\\n\\n![image-20220616154821062](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154821062.png)\\n\\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\\n\\n![image-20220616154721728](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154721728.png)\\n\\n---\\n\\n###### 6/16 总结\\n\\n1.“尽最大努力交付”有哪些含义?\\n\\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\\n\\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\\n\\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\\n\\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\\n\\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\\n\\n​\\t但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\\n\\n​\\t现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\\n\\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\\n\\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\\n\\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\\n\\n---\\n\\n### **传输层**\\n\\n![image-20220616162138785](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162138785.png)\\n\\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\\n\\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\\n\\n![image-20220616162727518](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162727518.png)\\n\\n笔记：传输层的两大协议**：TCP和UDP的区别** \\n\\n![image-20220616163227947](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616163227947.png)\\n\\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\\n\\n---\\n\\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\\n\\n\\n\\n![image-20220616164253795](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164253795.png)\\n\\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \\n\\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\\n\\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\\n\\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \\n\\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\\n\\n---\\n\\n\\n\\n![image-20220616164130771](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164130771.png)\\n\\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\\n\\n---\\n\\n#### 5.1.4习题\\n\\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \\n\\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \\n\\n![image-20220621161048543](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161048543.png)\\n\\n04：面向连接的服务：可靠性和按序到达 \\n\\n![image-20220621161657953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161657953.png)\\n\\n12：报文的头部长度问题\\n\\n![image-20220621162547501](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621162547501.png)\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/17 UDP\\n\\n<h4>UDP的特点</h4>\\n\\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \\n\\n![image-20220617115928628](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617115928628.png)\\n\\n\\n\\n![image-20220617120318549](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617120318549.png)\\n\\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \\n\\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\\n\\n**UDP检验：** \\n\\n![image-20220617121008248](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617121008248.png)\\n\\n按2进制反码运算求和，将得出结果再求反码 \\n\\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\\n\\n---\\n\\n#### 5.2.3习题\\n\\n02：UDP数据报的长度不包含伪首部的长度\\n\\n【可选】当源主机不想计算校验和，则令该字段为0\\n\\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\\n\\nIP数据报的差别是只能找到目的主机而无法找到目的进程\\n\\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\\n\\n\\n\\n09:伪首部仅在校验和和计算期间建立，并不发送\\n\\n---\\n\\n#### 6/21 TCP\\n\\n<h3>TCP协议的特点</h3> \\n\\n![image-20220621183009893](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621183009893.png)\\n\\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\\n\\n<h4>TCP报文段首部格式</h4>\\n\\n![image-20220621184449953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184449953.png)\\n\\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\\n\\n\\n\\nURG 、 ACK 、  SYN、  FIN \\n\\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\\n\\n窗口：\\n\\n![image-20220621184322344](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184322344.png)\\n\\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\\n\\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\\n\\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\\n\\n---\\n\\n\\n\\n#### 6/23 TCP连接\\n\\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\\n\\n<font color = \\\"red\\\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \\n\\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\\n\\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \\n\\n![image-20220623175221485](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175221485.png)\\n\\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\\n\\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\\n\\nACK:last_quarter_moon_with_face: 期待的下一个信号\\n\\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\\n\\n\\n\\n![image-20220623175024670](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175024670.png)\\n\\nFIN:结束位 只要是请求释放连接，FIN一定置为1\\n\\n四次握手就是断开或者说结束连接时需要的几个步骤。\\n\\n<font color = \\\"red\\\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \\n\\n---\\n\\n6/24 \\n\\n<h4>TCP可靠传输</h4>\\n\\n校验、序号、确认、重传\\n\\n确认：保证可靠传输，接收方要返回一个确认报文段。 \\n\\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\\n\\n\\n\\n冗余ACK：多余的、重复的报文段 \\n\\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\\n\\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\\n\\n---\\n\\n<h3>TCP流量控制</h3>\\n\\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\\n\\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \\n\\n![image-20220624171804134](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171804134.png)\\n\\n接收窗口(动态的调整)：rwnd\\t拥塞窗口：cwnd\\t\\t\\n\\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\\n\\n\\n\\n![image-20220624171723184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171723184.png)\\n\\n持续计时器\\n\\n---\\n\\n#### 6/24 TCP流量控制 \\n\\n<h3>TCP拥塞控制</h3>\\n\\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \\n\\n![image-20220624172758430](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624172758430.png)\\n\\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\\n\\n\\n\\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \\n\\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\\n\\n![image-20220624173503511](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624173503511.png)\\n\\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\\n\\n<h4>慢开始和拥塞避免</h4>\\n\\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \\n\\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\\n\\n![image-20220624174558650](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624174558650.png)\\n\\n往返时延单位：RTT\\n\\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\\n\\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \\n\\n---\\n\\n<h4>快重传和快恢复</h4>\\n\\n只要收到三个重复的确认之后， 就会执行快重传算法\\n\\n快速的执行这样一个重传的过程 省下了很多等待的时间 \\n\\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\\n\\n![image-20220624175442774](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624175442774.png)\\n\\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\\n\\n---\\n\\n### 应用层\\n\\n#### 6/28 模型、DNS\\n\\n概述\\n\\n![image-20220628150804221](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628150804221.png)\\n\\n应用层功能和重要协议：\\n\\n![image-20220628151033867](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151033867.png)\\n\\n\\n\\n网络应用模型：客户/服务器模型（C/S） 主从式\\n\\nP2P模型\\t对等式 \\n\\nC/S 模型：\\n\\n![image-20220628151540247](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151540247.png)\\n\\n\\n\\nP2P模型\\n\\n![image-20220628151857973](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151857973.png)\\n\\n\\n\\n6.1.3\\n\\n01：集中式：集中在一台计算机上，分布式：多台计算机 \\n\\n![image-20220628154113079](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628154113079.png)\\n\\n\\n\\n05：客户机：面向任务的\\t服务器：面向客户的\\n\\n---\\n\\n<h3>DNS </h3>\\n\\n域名组成：顶级域名、二级域名、三级域名...\\n\\n![image-20220628155712157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628155712157.png)\\n\\n\\n\\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \\n\\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \\n\\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\\n\\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\\n\\n![image-20220628160921546](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628160921546.png)\\n\\nabc.org与 y.abc.org是对等关系\\n\\n\\n\\n域名解析过程\\n\\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \\n\\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\\n\\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \\n\\n\\n\\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\\n\\n##### 6.2.4\\n\\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\\n\\n  1个以太网卡：一个IP地址\\t  单个DNS~对应多个主机/多个MAC地址/多个ip\\n\\n 对这些都没有一一对应的关系\\n\\n02：Internet访问主机一定要有IP地址\\n\\n08：选C的原因\\n\\n![image-20220701160815319](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701160815319.png)\\n\\n10：\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/29 传输层协议FTP\\n\\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\\n\\n FTP 它是使用TCP来实现可靠传输的\\n\\n![image-20220629180558599](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629180558599.png)\\n\\n\\n\\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\\n\\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\\n\\n文本模式（ASCII）、二进制模式\\t\\n\\n![image-20220629181142601](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629181142601.png)\\n\\n##### 6.3.3\\n\\n07:FTP的功能：![image-20220701164617822](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701164617822.png)\\n\\n08：封装的过程：自上而下\\t\\n\\n数据 数据段\\t数据报\\t数据帧\\t比特\\n\\n---\\n\\n#### 7/1 电子邮件:e-mail:\\n\\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\\n\\n使用C/S模式\\t\\n\\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\\n\\n![image-20220701170014788](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170014788.png)\\n\\n\\n\\n<h3>SMTP</h3>\\n\\n![image-20220701170322680](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170322680.png)\\n\\n\\n\\nSMTP的缺点：\\n\\n ![image-20220701170907231](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170907231.png)\\n\\n扩充手段MINE:\\t使电子邮件系统支持声音、图像....\\n\\n\\n\\n<h4>POP3协议 </h4>\\n\\n端口号、TCP、C/S \\n\\n![image-20220701171059568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171059568.png)\\n\\n\\n\\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\\n\\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\\n\\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\\n\\n![image-20220701171618095](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171618095.png)\\n\\n##### 6.4.4\\n\\n07：\\n\\n![image-20220701174409155](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701174409155.png)\\n\\n---\\n\\n#### 7/2 结尾：万维网和HTTP协议\\n\\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\\n\\n统一资源定位符URL 它是可以唯一标识每一个资源的\\n\\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \\n\\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\\n\\n![image-20220702162918872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702162918872.png)\\n\\n\\n\\nHTTP工作流程：\\n\\n![image-20220702163328133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702163328133.png)\\n\\n\\n\\n<h3>HTTP 协议的特点\\t</h3>\\n\\n 它采用TCP作为运输层的协议 是一种面向连接的\\n\\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\\n\\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） \\t那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \\n\\n![image-20220702164017763](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702164017763.png)\\n\\n\\n\\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\\n\\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议\\t\\n\\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\\n\\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\\n\\n---\\n\\nHTTP——报文结构\\n\\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \\n\\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\\n\\n![image-20220702165432365](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165432365.png)\\n\\n请求报文和响应报文\\n\\n![image-20220702165833550](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165833550.png)\\n\\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\\n\\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\\n\\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \\n\\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\\n\\n 5打头表示的就是服务器的差错\\n\\n---\\n\\n<H2>总结 </H2>\\n\\n**常用应用层协议小结：** \\n\\n![image-20220702171327778](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702171327778.png)\\n\\n![image-20220702173120051](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173120051.png)\\n\\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \\n\\n持久性/非持久性连接：考点重点，易考到：\\n\\n![image-20220702180809063](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180809063.png)\\n\\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \\n\\n![image-20220702170248777](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702170248777.png)\\n\\n---\\n\\n##### 6.5.3\\n\\n01：FTP：文件传输协议，可靠性高，实时性要求低\\n\\n![image-20220702173738805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173738805.png)\\n\\n\\n\\n07：\\n\\n![image-20220702174726133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702174726133.png)\\n\\n\\n\\n10：\\n\\n根据传输对象来确定传输所需时间\\n\\n**持久性连接流水线：**\\n\\n![image-20220702180422679](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180422679.png)\\n\\n\\n\\n非流水线：\\n\\n![image-20220702180616509](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180616509.png)\\n\\n---\\n\\n#### 7/31 \\n\\n<h3> 选择题小题每章重点</h3>\\n\\n第一章\\n\\n![image-20220731141406536](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731141406536.png)\\n\\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\\n\\n\\n\\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组\\t能否隔离... \\n\\n![image-20220731142248353](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142248353.png)\\n\\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA\\t\\n\\n![image-20220731142707141](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142707141.png)\\n\\n\\n\\n第四章：路由聚合：取交集\\nCDN新增\\n![image-20220731143027256](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143027256.png)\\n\\n第五章：TCP/UDP\\n![image-20220731143305487](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143305487.png)\\n\\n第六章：难点：WWW+HTTP\\n\\nDNS域名解析\\t\\n![image-20220731143645217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143645217.png)\\n\\n\\n\\n<h3>计网大题重点</h3>\\n\\n![image-20220731144324262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731144324262.png)\\n\\n路由协议，子网划分：BGP/OSPF/RIP跳数\\n\\n数据交换的分组交换方式：虚电路：面向连接\\n\\n中继器和集线器的差别：端口的个数 \\n\\nIPv4：重中之重 ABCDE五类地址\\t\\n\\nARP：IP转MAC地址\\tDHCP：动态ip地址的划分，回收\\tICMP：差错、控制报文（可不可达...）\\t\\n\\n应用层：HTTP与TCP的关系\\t\\n\\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \\n\\n![image-20220731152658875](http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png)\\n\\n\\n\\nIP地址解析过程：\\n\\n![image-20220731172153990](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731172153990.png)\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png\",\"articleTitle\":\"计算机网络笔记\",\"categoryName\":\"网络\",\"id\":61,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 18:53:04',NULL),
(1136,'分类模块','新增或修改','/admin/categories','com.minzheng.blog.controller.CategoryController.saveOrUpdateCategory','添加或修改分类','[{\"categoryName\":\"学习\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:27:32',NULL),
(1137,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 2022/3/13\\n\\n计算机网络就是一些互联的、自治的计算机系统的集合\\n\\n三类观点\\n\\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\\n\\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\\n\\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\\n\\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\\n\\n**最基本和最重要的功能：数据通信**\\n\\n---\\n\\n计算机网络的各种分类：\\n\\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\\n\\n**传输技术分类：**1、广播式网络 2、点对点网络\\n\\n**拓扑结构分类：**拓扑结构只要取决于通信子网\\n\\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\\n\\n使用者分类：公用网/专用网\\n\\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\\n\\n传输介质分类：有线类/无线类\\n\\n---\\n\\n**计网性能指标(需理解的)**：\\n\\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\\n\\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \\n\\n3、时延带宽积：=传播时延 X 信道宽度\\n\\n描述数据量，此时此刻的数据容量\\n\\n4、往返时延RTT\\n\\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\\n\\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\\n\\n6、速率：比特在信道上跑的速度\\n\\n7、信道利用率\\n\\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\\n\\n![image-20220326145029611](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220326145029611.png)\\n\\n###### 3/27\\n\\n分层：上层使用下层的服务\\n\\n1、各层之间相互独立\\n\\n2、每层之间的界面自然清晰\\n\\n3、结构上可分割开\\n\\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\\n\\n5、整个分层结构能促进标准化工作\\n\\n\\n\\n###### 4/10\\n\\n第二章 物理层\\n\\n编码和调制的方式：![image-20220410200234421](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200234421.png)\\n\\n![image-20220410200555847](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200555847.png)\\n\\n\\n\\n![image-20220410174726310](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410174726310.png)\\n\\n电路交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410175551747](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410175551747.png)\\n\\n报文交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410180148943](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410180148943.png)\\n\\n分组交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410181910065](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410181910065.png)\\n\\n计算题总结：\\n\\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\\n\\n则每个码元携带log x比特信息\\n\\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\\n\\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\\n\\n4.有效离散值个数x\\n\\n数据传输率 = 波特率B*log x\\n\\n从而可推出x\\n\\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\\n\\n###### 4/11\\n\\n![image-20220411165713593](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220411165713593.png)\\n\\n**中继器**：五四三规则\\n\\n![image-20220414155503235](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220414155503235.png)\\n\\n分组交换的两种方式的差别\\n\\n### 4/26\\n\\nCRC、fcs\\n\\n![image-20220426120703383](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426120703383.png)\\n\\n海明校验码：已记录在笔记本上\\n\\n![image-20220426155453399](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426155453399.png)\\n\\n滑动窗口可以解决流量控制和可靠传输的\\n\\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\\n\\n![image-20220426162008770](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426162008770.png)\\n\\n可靠不可靠的层的区分\\n\\n##### 计算循环冗余码：\\n\\n1、加0：假设生成多项式的阶为r,则加r个0\\n\\n如10011的阶为4，多项式为N位，则阶为N-1\\n\\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\\n\\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\\n\\n###### 4/29\\n\\nGBN:\\n\\n![image-20220429164818170](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429164818170.png)\\n\\n---\\n\\n介质访问控制\\n\\n![image-20220430173043452](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220430173043452.png)\\n\\n\\n\\n##### 5/3~\\n\\nCSMA协议分为3种：\\n\\n1-坚持CSMA\\n\\n非坚持CSMA\\n\\np-坚持CSMA（较优）\\n\\n---\\n\\nPPP协议\\n\\n![image-20220512192023907](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512192023907.png)\\n\\nPPP/HDLC异同\\n\\n![image-20220512193909179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512193909179.png)\\n\\n---\\n\\n###### 3.6选择题\\n\\n![image-20220513200509279](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513200509279.png)\\n\\n问某某设备功能的题目解决方案：\\n\\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\\n\\n\\n\\n![image-20220513202718952](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513202718952.png)\\n\\n总结各层设备的特点以及冲突域广播域的分割\\n\\n\\n\\n![image-20220513205445377](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513205445377.png)\\n\\nOSI参考模型中的数据链路层分为以下两个子层：\\n\\nMAC子层：数据封装与解封装\\n\\nLLC子层：给帧加序号\\n\\n\\n\\n###### 3.7习题\\n\\n3.集中控制式 **分布控制式**\\n\\n![image-20220515205146940](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515205146940.png)\\n\\n\\n\\nPPP、HDLC协议\\n\\n![image-20220517170134008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517170134008.png)\\n\\n\\n\\n3.8\\n\\n![image-20220517173054196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173054196.png)\\n\\n\\n\\n![image-20220517173537031](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173537031.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n网桥\\n\\n![image-20220515210938702](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515210938702.png)\\n\\n又分为透明网桥以及**源路由网桥**\\n\\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\\n\\n###### 冲突域与广播域的考点\\n\\n![image-20220515213814436](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515213814436.png)\\n\\n（背）\\n\\n![image-20220521144927118](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521144927118.png)\\n\\n（王道书上的）\\n\\n一个网段就是一个冲突域\\n\\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\\n\\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\\n\\n路由器：遇到广播信号不转发形成广播域\\n\\n---\\n\\n\\n\\n### 5.21 网络层\\n\\n![image-20220521145846315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521145846315.png)\\n\\n网络层功能\\n\\n![image-20220521150450769](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521150450769.png)\\n\\n路由算法\\n\\n![image-20220522161302439](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522161302439.png)\\n\\n\\n\\n---\\n\\n\\n\\n\\n\\nAS概念\\n\\n![image-20220521151931138](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521151931138.png)\\n\\n内部使用的协议外部看不到\\n\\n![image-20220521152221640](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521152221640.png)\\n\\n路由选择协议，内部IGP 外部EGP\\n\\n---\\n\\nSDN\\n\\n每路由器法\\n\\n![image-20220521153045039](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153045039.png)\\n\\n![image-20220521153529671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153529671.png)\\n\\n![image-20220521155328285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155328285.png)\\n\\nSDN控制器的三个层次：网络范围状态管理层、通信层....\\n\\n![image-20220521155701758](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155701758.png)\\n\\n\\n\\n![image-20220521154751935](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521154751935.png)\\n\\nSDN总结\\n\\n\\n\\n---\\n\\n\\n\\n###### 各个层次的协议总结：\\n\\n![image-20220522164627690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522164627690.png)\\n\\n---\\n\\n\\n\\nIP数据报的格式\\n\\n![image-20220522170527291](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522170527291.png)\\n\\n源IP地址和目的IP地址：32位\\n\\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\\n\\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\\n\\n总长度：首部的部分+数据部分  2^16 -1\\n\\n各协议所对应的字段值： 如UDP-17（不建议连接\\n\\n![image-20220522171238690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522171238690.png)\\n\\n \\n\\n###### 5/24 \\n\\n\\\"坏消息传的慢\\\"\\n\\n![image-20220524145342845](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145342845.png)\\n\\nRIP协议\\n\\n![image-20220524145739184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145739184.png)\\n\\n\\n\\nOSPF：\\n\\n![image-20220524153053725](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524153053725.png)\\n\\n\\n\\n---\\n\\n![image-20220524165003184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524165003184.png)\\n\\n**算法分类**\\n\\n###### 5/26 \\n\\n**IP数据报格式以及分片/片偏移**\\n\\n![image-20220526200301772](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526200301772.png)\\n\\n\\n\\n对应的总/片/首长度单位：“一种八片的手势”\\n\\n![image-20220526201234783](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526201234783.png)\\n\\n\\n\\n私有IP地址：IP地址的分类\\n\\n![image-20220526203338021](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203338021.png)\\n\\n\\n\\n![image-20220526203626818](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203626818.png)\\n\\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\\n>\\n> **广播**地址：主机号全1\\n>\\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\\n>\\n\\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\\n\\n**Practice:**\\n\\n![image-20220528145909542](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528145909542.png)\\n\\n\\n\\n![image-20220528150734140](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528150734140.png)\\n\\n是否作为源地址？目的地址？\\n\\n小结\\n\\n![image-20220528151523517](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528151523517.png)\\n\\n\\n\\n---\\n\\n5/27\\n\\n子网掩码划分\\n\\n![image-20220527192726514](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527192726514.png)\\n\\n点分十进制，子网掩码：255.255.0.0\\n\\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\\n\\n\\n\\n![image-20220527200329979](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527200329979.png)\\n\\n超网\\n\\n网络层提供的两种服务：\\n\\n![image-20220528115835171](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528115835171.png)\\n\\n###### 5/28划分子网IPv4地址\\n\\n划分子网的过程：\\n\\n![image-20220528153733212](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528153733212.png)\\n\\n从主机位借用1个比特作为子网号，划分成了2个子网\\n\\n**默认子网掩码：**\\n\\nA类：8位网络号 24位主机号：255.0.0.0\\n\\nB类：16位~ ：255.255.0.0\\n\\nC类：24位~：255.255.255.0\\n\\n小结\\n\\n![image-20220528155810385](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528155810385.png)\\n\\n\\n\\n###### 5/30\\n\\nCIDR相关计算\\n\\n![image-20220530113748646](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530113748646.png)\\n\\n\\n\\n![image-20220530115327838](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115327838.png)\\n\\n**找共同前缀，然后剩余13个比特全部取0**\\n\\n![image-20220530115459321](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115459321.png)\\n\\n---\\n\\n\\n\\n![image-20220530121115278](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530121115278.png)\\n\\ntry 例题\\n\\n![image-20220530145820144](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820144.png)![image-20220530145820055](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820055.png)\\n\\n---\\n\\nARP协议：解决下一跳走哪的问题\\n\\n![image-20220530152954244](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530152954244.png)\\n\\n\\n\\n**ICMP协议**\\n\\n\\n\\n5种差错报告报文![image-20220531202035262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202035262.png)\\n\\n不应发送差错报文的情况（可能在选择题里考）\\n\\n![image-20220531202416345](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202416345.png)\\n\\n\\n\\n###### 4.3.5\\n\\n01：各个协议在各个层次的分布，C选项中均在网络层\\n\\n![image-20220530154801554](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530154801554.png)\\n\\n\\n\\n04：IP分组中的检验字段都只检验首部\\n\\n![image-20220531205032699](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531205032699.png)\\n\\n\\n\\n14：环路地址分辨\\n\\n![image-20220531210024179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531210024179.png)\\n\\n\\n\\n20：\\n\\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\\n\\n内部网络地址0~255，A/B/C类地址\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n##### 6/9  IPv6 \\n\\n\\n\\n![image-20220609203542315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609203542315.png)\\n\\n源地址和目的地址都是128位\\n\\n**IPv6和v4的区别：**\\n\\n![image-20220609204231454](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609204231454.png)\\n\\nipv6没有提供校验和字段，首部长度固定的\\n\\n**QoS简介**\\n\\n![image-20220609210332500](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609210332500.png)\\n\\n\\n\\n##### 6/10 RIP、OSPF、BGP\\n\\n**RIP协议**\\n\\n![image-20220610194501157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194501157.png)\\n\\n\\n\\n![image-20220610181233743](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610181233743.png)\\n\\nRIP协议“好消息传得快，坏消息传的慢”\\n\\n---\\n\\n**OSPF**(网络层协议)\\n\\n![image-20220610193835557](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610193835557.png)\\n\\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\\n\\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\\n\\n其他特点\\n\\n![image-20220610194256116](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194256116.png)\\n\\n---\\n\\n**BGP协议**\\n\\n![image-20220610195450908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610195450908.png)\\n\\n只需知道BGP协议交换的信息包含的是什么内容就可以了\\n\\n特点\\n\\n![image-20220610200158672](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200158672.png)\\n\\n四种报文\\n\\n![image-20220610200227378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200227378.png)\\n\\n\\n\\nBGP/OSPF/RIP协议所对应的不同报文:\\n\\n![image-20220610200532615](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200532615.png)\\n\\n![image-20220610200852427](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200852427.png)\\n\\n\\n\\n\\n\\n###### 4.5.6\\n\\n01:\\n\\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\\n\\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\\n\\n\\n\\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\\n\\n\\n\\n08：RIP 、OSPF协议的差别\\n\\n![image-20220612111001610](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111001610.png)\\n\\n\\n\\n09：OSPF的分组类型\\n\\n![image-20220612111213495](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111213495.png)\\n\\n\\n\\n15：真题\\n\\n![image-20220614104318801](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614104318801.png)\\n\\n\\n\\n---\\n\\n\\n\\n##### 6/10 IP组播、IP分组\\n\\n\\n\\n**IP数据报的三种传输方式**\\n\\n![image-20220612114900045](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612114900045.png)\\n\\n\\n\\n组播\\n\\n![image-20220612115806806](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612115806806.png)\\n\\n\\n\\n![image-20220612120538681](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120538681.png)\\n\\n可能会考察IP地址和MAC地址进行一个映射\\n\\nIGMP、ICMP\\n\\n![image-20220612120922369](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120922369.png)\\n\\n![image-20220612121149516](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121149516.png)\\n\\n\\n\\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\\n\\n![image-20220612121739087](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121739087.png)\\n\\n组播的分类：\\n\\n![image-20220614110246790](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110246790.png)\\n\\n\\n\\n---\\n\\n移动IP\\n\\n相关概念\\n\\n![image-20220612122301568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122301568.png)\\n\\n**具体步骤：** \\n\\n![image-20220612122751908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122751908.png)\\n\\n---\\n\\n\\n\\n###### 4.6.4\\n\\n01：仿真：时延更长\\n\\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\\n\\n![image-20220614105107539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614105107539.png)\\n\\n03：\\n\\n![image-20220614110057987](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110057987.png)\\n\\n\\n\\n\\n\\n###### 4.7.3\\n\\n02：\\n\\n![image-20220614112543930](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614112543930.png)\\n\\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\\n\\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\\n\\n\\n\\n#### 6/14 网络层结尾\\n\\n网络层设备\\n\\n![image-20220614115326374](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115326374.png)\\n\\n\\n\\n![image-20220614115240655](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115240655.png)\\n\\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\\n\\n![image-20220614115540438](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115540438.png)\\n\\n默认路由：相当于场内求助\\n\\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\\n\\n路由转发、路由表：\\n\\n![image-20220614120034513](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120034513.png)\\n\\n---\\n\\n<font size=\\\"6\\\">总结</font>\\n\\n![image-20220614121344471](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121344471.png)\\n\\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \\n\\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\\n\\n**重要协议**\\n\\n![image-20220614120815416](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120815416.png)\\n\\n\\n\\n**路由算法：**\\n\\n![image-20220614120947577](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120947577.png)\\n\\nIPv4\\n\\n![image-20220614121053027](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121053027.png)\\n\\nNAT:私有共有地址的转换\\n\\n分片：链路可接受最大传输单元：MTU\\n\\n\\n\\n---\\n\\n4.8.4\\n\\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\\n\\n![image-20220616152431580](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152431580.png)\\n\\n\\n\\n05：路由表一般仅包含从目的网络到下一跳的IP地址\\n\\n\\n\\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\\n\\n![image-20220616152738634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152738634.png)\\n\\n\\n\\n08：\\n\\n![image-20220616153250741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616153250741.png)\\n\\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\\n\\n分组转发组成：交换结构、输入端口、输出端口\\n\\n14：\\n\\n路由器尽最大努力交付，但不确保\\n\\n![image-20220616154821062](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154821062.png)\\n\\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\\n\\n![image-20220616154721728](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154721728.png)\\n\\n---\\n\\n###### 6/16 总结\\n\\n1.“尽最大努力交付”有哪些含义?\\n\\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\\n\\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\\n\\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\\n\\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\\n\\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\\n\\n​\\t但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\\n\\n​\\t现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\\n\\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\\n\\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\\n\\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\\n\\n---\\n\\n### **传输层**\\n\\n![image-20220616162138785](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162138785.png)\\n\\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\\n\\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\\n\\n![image-20220616162727518](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162727518.png)\\n\\n笔记：传输层的两大协议**：TCP和UDP的区别** \\n\\n![image-20220616163227947](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616163227947.png)\\n\\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\\n\\n---\\n\\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\\n\\n\\n\\n![image-20220616164253795](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164253795.png)\\n\\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \\n\\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\\n\\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\\n\\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \\n\\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\\n\\n---\\n\\n\\n\\n![image-20220616164130771](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164130771.png)\\n\\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\\n\\n---\\n\\n#### 5.1.4习题\\n\\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \\n\\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \\n\\n![image-20220621161048543](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161048543.png)\\n\\n04：面向连接的服务：可靠性和按序到达 \\n\\n![image-20220621161657953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161657953.png)\\n\\n12：报文的头部长度问题\\n\\n![image-20220621162547501](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621162547501.png)\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/17 UDP\\n\\n<h4>UDP的特点</h4>\\n\\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \\n\\n![image-20220617115928628](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617115928628.png)\\n\\n\\n\\n![image-20220617120318549](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617120318549.png)\\n\\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \\n\\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\\n\\n**UDP检验：** \\n\\n![image-20220617121008248](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617121008248.png)\\n\\n按2进制反码运算求和，将得出结果再求反码 \\n\\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\\n\\n---\\n\\n#### 5.2.3习题\\n\\n02：UDP数据报的长度不包含伪首部的长度\\n\\n【可选】当源主机不想计算校验和，则令该字段为0\\n\\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\\n\\nIP数据报的差别是只能找到目的主机而无法找到目的进程\\n\\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\\n\\n\\n\\n09:伪首部仅在校验和和计算期间建立，并不发送\\n\\n---\\n\\n#### 6/21 TCP\\n\\n<h3>TCP协议的特点</h3> \\n\\n![image-20220621183009893](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621183009893.png)\\n\\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\\n\\n<h4>TCP报文段首部格式</h4>\\n\\n![image-20220621184449953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184449953.png)\\n\\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\\n\\n\\n\\nURG 、 ACK 、  SYN、  FIN \\n\\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\\n\\n窗口：\\n\\n![image-20220621184322344](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184322344.png)\\n\\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\\n\\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\\n\\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\\n\\n---\\n\\n\\n\\n#### 6/23 TCP连接\\n\\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\\n\\n<font color = \\\"red\\\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \\n\\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\\n\\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \\n\\n![image-20220623175221485](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175221485.png)\\n\\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\\n\\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\\n\\nACK:last_quarter_moon_with_face: 期待的下一个信号\\n\\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\\n\\n\\n\\n![image-20220623175024670](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175024670.png)\\n\\nFIN:结束位 只要是请求释放连接，FIN一定置为1\\n\\n四次握手就是断开或者说结束连接时需要的几个步骤。\\n\\n<font color = \\\"red\\\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \\n\\n---\\n\\n6/24 \\n\\n<h4>TCP可靠传输</h4>\\n\\n校验、序号、确认、重传\\n\\n确认：保证可靠传输，接收方要返回一个确认报文段。 \\n\\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\\n\\n\\n\\n冗余ACK：多余的、重复的报文段 \\n\\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\\n\\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\\n\\n---\\n\\n<h3>TCP流量控制</h3>\\n\\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\\n\\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \\n\\n![image-20220624171804134](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171804134.png)\\n\\n接收窗口(动态的调整)：rwnd\\t拥塞窗口：cwnd\\t\\t\\n\\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\\n\\n\\n\\n![image-20220624171723184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171723184.png)\\n\\n持续计时器\\n\\n---\\n\\n#### 6/24 TCP流量控制 \\n\\n<h3>TCP拥塞控制</h3>\\n\\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \\n\\n![image-20220624172758430](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624172758430.png)\\n\\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\\n\\n\\n\\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \\n\\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\\n\\n![image-20220624173503511](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624173503511.png)\\n\\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\\n\\n<h4>慢开始和拥塞避免</h4>\\n\\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \\n\\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\\n\\n![image-20220624174558650](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624174558650.png)\\n\\n往返时延单位：RTT\\n\\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\\n\\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \\n\\n---\\n\\n<h4>快重传和快恢复</h4>\\n\\n只要收到三个重复的确认之后， 就会执行快重传算法\\n\\n快速的执行这样一个重传的过程 省下了很多等待的时间 \\n\\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\\n\\n![image-20220624175442774](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624175442774.png)\\n\\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\\n\\n---\\n\\n### 应用层\\n\\n#### 6/28 模型、DNS\\n\\n概述\\n\\n![image-20220628150804221](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628150804221.png)\\n\\n应用层功能和重要协议：\\n\\n![image-20220628151033867](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151033867.png)\\n\\n\\n\\n网络应用模型：客户/服务器模型（C/S） 主从式\\n\\nP2P模型\\t对等式 \\n\\nC/S 模型：\\n\\n![image-20220628151540247](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151540247.png)\\n\\n\\n\\nP2P模型\\n\\n![image-20220628151857973](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151857973.png)\\n\\n\\n\\n6.1.3\\n\\n01：集中式：集中在一台计算机上，分布式：多台计算机 \\n\\n![image-20220628154113079](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628154113079.png)\\n\\n\\n\\n05：客户机：面向任务的\\t服务器：面向客户的\\n\\n---\\n\\n<h3>DNS </h3>\\n\\n域名组成：顶级域名、二级域名、三级域名...\\n\\n![image-20220628155712157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628155712157.png)\\n\\n\\n\\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \\n\\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \\n\\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\\n\\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\\n\\n![image-20220628160921546](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628160921546.png)\\n\\nabc.org与 y.abc.org是对等关系\\n\\n\\n\\n域名解析过程\\n\\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \\n\\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\\n\\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \\n\\n\\n\\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\\n\\n##### 6.2.4\\n\\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\\n\\n  1个以太网卡：一个IP地址\\t  单个DNS~对应多个主机/多个MAC地址/多个ip\\n\\n 对这些都没有一一对应的关系\\n\\n02：Internet访问主机一定要有IP地址\\n\\n08：选C的原因\\n\\n![image-20220701160815319](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701160815319.png)\\n\\n10：\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/29 传输层协议FTP\\n\\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\\n\\n FTP 它是使用TCP来实现可靠传输的\\n\\n![image-20220629180558599](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629180558599.png)\\n\\n\\n\\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\\n\\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\\n\\n文本模式（ASCII）、二进制模式\\t\\n\\n![image-20220629181142601](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629181142601.png)\\n\\n##### 6.3.3\\n\\n07:FTP的功能：![image-20220701164617822](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701164617822.png)\\n\\n08：封装的过程：自上而下\\t\\n\\n数据 数据段\\t数据报\\t数据帧\\t比特\\n\\n---\\n\\n#### 7/1 电子邮件:e-mail:\\n\\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\\n\\n使用C/S模式\\t\\n\\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\\n\\n![image-20220701170014788](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170014788.png)\\n\\n\\n\\n<h3>SMTP</h3>\\n\\n![image-20220701170322680](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170322680.png)\\n\\n\\n\\nSMTP的缺点：\\n\\n ![image-20220701170907231](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170907231.png)\\n\\n扩充手段MINE:\\t使电子邮件系统支持声音、图像....\\n\\n\\n\\n<h4>POP3协议 </h4>\\n\\n端口号、TCP、C/S \\n\\n![image-20220701171059568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171059568.png)\\n\\n\\n\\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\\n\\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\\n\\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\\n\\n![image-20220701171618095](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171618095.png)\\n\\n##### 6.4.4\\n\\n07：\\n\\n![image-20220701174409155](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701174409155.png)\\n\\n---\\n\\n#### 7/2 结尾：万维网和HTTP协议\\n\\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\\n\\n统一资源定位符URL 它是可以唯一标识每一个资源的\\n\\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \\n\\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\\n\\n![image-20220702162918872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702162918872.png)\\n\\n\\n\\nHTTP工作流程：\\n\\n![image-20220702163328133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702163328133.png)\\n\\n\\n\\n<h3>HTTP 协议的特点\\t</h3>\\n\\n 它采用TCP作为运输层的协议 是一种面向连接的\\n\\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\\n\\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） \\t那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \\n\\n![image-20220702164017763](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702164017763.png)\\n\\n\\n\\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\\n\\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议\\t\\n\\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\\n\\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\\n\\n---\\n\\nHTTP——报文结构\\n\\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \\n\\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\\n\\n![image-20220702165432365](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165432365.png)\\n\\n请求报文和响应报文\\n\\n![image-20220702165833550](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165833550.png)\\n\\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\\n\\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\\n\\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \\n\\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\\n\\n 5打头表示的就是服务器的差错\\n\\n---\\n\\n<H2>总结 </H2>\\n\\n**常用应用层协议小结：** \\n\\n![image-20220702171327778](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702171327778.png)\\n\\n![image-20220702173120051](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173120051.png)\\n\\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \\n\\n持久性/非持久性连接：考点重点，易考到：\\n\\n![image-20220702180809063](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180809063.png)\\n\\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \\n\\n![image-20220702170248777](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702170248777.png)\\n\\n---\\n\\n##### 6.5.3\\n\\n01：FTP：文件传输协议，可靠性高，实时性要求低\\n\\n![image-20220702173738805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173738805.png)\\n\\n\\n\\n07：\\n\\n![image-20220702174726133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702174726133.png)\\n\\n\\n\\n10：\\n\\n根据传输对象来确定传输所需时间\\n\\n**持久性连接流水线：**\\n\\n![image-20220702180422679](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180422679.png)\\n\\n\\n\\n非流水线：\\n\\n![image-20220702180616509](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180616509.png)\\n\\n---\\n\\n#### 7/31 \\n\\n<h3> 选择题小题每章重点</h3>\\n\\n第一章\\n\\n![image-20220731141406536](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731141406536.png)\\n\\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\\n\\n\\n\\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组\\t能否隔离... \\n\\n![image-20220731142248353](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142248353.png)\\n\\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA\\t\\n\\n![image-20220731142707141](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142707141.png)\\n\\n\\n\\n第四章：路由聚合：取交集\\nCDN新增\\n![image-20220731143027256](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143027256.png)\\n\\n第五章：TCP/UDP\\n![image-20220731143305487](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143305487.png)\\n\\n第六章：难点：WWW+HTTP\\n\\nDNS域名解析\\t\\n![image-20220731143645217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143645217.png)\\n\\n\\n\\n<h3>计网大题重点</h3>\\n\\n![image-20220731144324262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731144324262.png)\\n\\n路由协议，子网划分：BGP/OSPF/RIP跳数\\n\\n数据交换的分组交换方式：虚电路：面向连接\\n\\n中继器和集线器的差别：端口的个数 \\n\\nIPv4：重中之重 ABCDE五类地址\\t\\n\\nARP：IP转MAC地址\\tDHCP：动态ip地址的划分，回收\\tICMP：差错、控制报文（可不可达...）\\t\\n\\n应用层：HTTP与TCP的关系\\t\\n\\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \\n\\n![image-20220731152658875](http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png)\\n\\n\\n\\nIP地址解析过程：\\n\\n![image-20220731172153990](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731172153990.png)\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png\",\"articleTitle\":\"计算机网络笔记\",\"categoryName\":\"网络\",\"id\":61,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:28:25',NULL),
(1138,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\r\\n\\r\\n![image-20220308153016669](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308153016669.png)\\r\\n\\r\\n空间复杂度计算\\r\\n\\r\\n![image-20220308163338103](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220308163338103.png)\\r\\n\\r\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\r\\n\\r\\nloga(M/N)=logaM - logaN\\r\\n\\r\\n###### 3/13\\r\\n\\r\\n![image-20220313212637718](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313212637718.png)\\r\\n\\r\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\r\\n\\r\\n![image-20220313213230498](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220313213230498.png)\\r\\n\\r\\n###### 3/14\\r\\n\\r\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\r\\n\\r\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\r\\n\\r\\n最好情况：均在表尾插入/删除元素\\r\\n\\r\\n最坏：在表头插入、删除元素（移动次数多）\\r\\n\\r\\n![image-20220314173030789](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173030789.png)\\r\\n\\r\\n动态存储\\r\\n\\r\\n![image-20220314173152311](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314173152311.png)\\r\\n\\r\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\r\\n\\r\\n![image-20220314181520001](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220314181520001.png)\\r\\n\\r\\n复杂度为O(1)\\r\\n\\r\\n```c\\r\\n\\r\\n//头插法 3/15\\r\\nvoid insertListHead(LinkList &l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n    l->next =NULL; //可能有那啥的脏数据\\r\\n\\tNode* newNode;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\tnewNode->next = l->next;\\r\\n\\t\\tl->next = newNode;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//尾插法 3/15\\r\\nvoid insertListTail(LinkList& l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n\\tNode* newNode;\\r\\n\\tNode* tmp =l;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\ttmp->next = newNode;\\r\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\r\\n\\t}\\r\\n    tmp->next =NULL;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n静态链表：![image-20220315213703769](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315213703769.png)\\r\\n\\r\\n\\r\\n\\r\\n增删链表效率高于顺序表\\r\\n\\r\\n![image-20220315215132762](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215132762.png)\\r\\n\\r\\n![image-20220315215427937](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220315215427937.png)\\r\\n\\r\\n###### 3/18\\r\\n\\r\\n第一章：\\r\\n\\r\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\r\\n\\r\\nP4:综合应用题：\\r\\n\\r\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\r\\n\\r\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\r\\n\\r\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\r\\n\\r\\n答：![image-20220320165638974](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220320165638974.png)\\r\\n\\r\\n\\r\\n\\r\\nP18:综合应用题：\\r\\n\\r\\n01:\\r\\n\\r\\n```apl\\r\\nif(length<1){\\r\\n\\treturn false;\\r\\n}\\r\\nElemtype del = data[length-1];\\r\\nElemtype tmp;\\r\\nint pos=0;\\r\\nfor(int i=0;i<length-1;i++){\\r\\n\\ttmp = data[i];\\r\\n\\tif(data[i]<tmp){\\r\\n\\t\\ttmp = data[i];\\r\\n\\t\\tpos++;\\r\\n\\t}\\r\\n}\\r\\n\\tdata[pos] = del;\\r\\n\\tlength--;\\r\\n\\r\\n\\treturn true;\\r\\n```\\r\\n\\r\\n02:\\r\\n\\r\\n```bash\\r\\nvoid Reverse(Sqlist &l){\\r\\n\\tElemType tmp;\\r\\n\\tint pos = l.length-1;\\r\\n\\tfor(i=0;i<l.length/2;i++){\\r\\n\\t\\ttmp = l.data[i];\\r\\n\\t\\tl.data[i]= l.data[pos];\\r\\n\\t\\tpos--;\\r\\n\\t\\tl.data[pos] = tmp;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n错题总结：\\r\\n\\r\\nP17:\\r\\n\\r\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\r\\n\\r\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\r\\n\\r\\n08：线性表删除第i个元素移动n-i个元素即可\\r\\n\\r\\n###### 3/21\\r\\n\\r\\n![image-20220321163406818](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163406818.png)\\r\\n\\r\\n栈的出栈顺序数量的计算：卡特兰数\\r\\n\\r\\n![image-20220321163828984](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321163828984.png)\\r\\n\\r\\ntop++ 和++top的区别\\r\\n\\r\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\r\\n\\r\\n![image-20220321164627443](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321164627443.png)\\r\\n\\r\\n栈满：top==MaxSize\\r\\n\\r\\n共享栈栈满条件：top1+1==top2\\r\\n\\r\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\r\\n\\r\\n![image-20220321171717178](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321171717178.png)\\r\\n\\r\\n括号匹配流程图\\r\\n\\r\\n![image-20220321175550753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175550753.png)\\r\\n\\r\\n用栈实现括号匹配：\\r\\n\\r\\n具体代码：\\r\\n\\r\\n```c\\r\\n#define Maxsize 10            //定义栈中元素的\\r\\ntypedef struct{\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top;                    //栈顶指针\\r\\n}SqStack;\\r\\n//初始化栈\\r\\nvoid InitStack(Sqstack &S)\\r\\n//判断栈是否为空\\r\\nbool stackEmpty(SqStack S)\\r\\n//新元素入栈\\r\\nbool Push(SqStack &S,char x)\\r\\n//栈顶元素出栈，用x返回\\r\\nbool Pop(SqStack &s,char &x)\\r\\n\\r\\n    //有栈的情况\\r\\nbool bracketCheck(char str[],int length) {\\r\\nSqStack s;\\r\\nInitStack(S); //初始化一个栈\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\r\\n}else {\\r\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\nPop(S,topElem);//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return StackEmpty(S);\\r\\n}\\r\\n\\r\\nbool compare(int x,int y){\\r\\n    if(x!=(y-1)){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n       //无栈的情况\\r\\nbool bracketCheck1(char str[],int length) {\\r\\n int MaxSize = length;\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top=-1;  \\r\\n\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n    if(compare(top,length)){\\r\\n\\t\\ttop++;\\r\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\r\\n    }\\r\\n}else {\\r\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\ntopElem = data[top];\\r\\n    top--;//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return top==-1;\\r\\n}\\r\\n    \\r\\n    \\r\\n    \\r\\n```\\r\\n\\r\\n![image-20220321175834694](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220321175834694.png)\\r\\n\\r\\n###### 3/23~24\\r\\n\\r\\n![image-20220324080429724](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324080429724.png)\\r\\n\\r\\n程序输出结果只能是第一种（唯一性、确定性）\\r\\n\\r\\n后缀表达式的手算方法：\\r\\n\\r\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\r\\n\\r\\n注意：两个操作数的左右顺序\\r\\n\\r\\n机算：\\r\\n\\r\\n![image-20220324100504170](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324100504170.png)\\r\\n\\r\\n用栈实现后缀表达式的计算：\\r\\n\\r\\n①从左往右扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n----\\r\\n\\r\\n前缀表达式：\\r\\n\\r\\n**中缀表达式转前缀表达式（手算）**\\r\\n\\r\\n① 确定中缀表达式中各个运算符的运算顺序\\r\\n\\r\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\r\\n\\r\\n③ 如果还有运算符没被处理，就继续 ②\\r\\n\\r\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\r\\n\\r\\n机算：\\r\\n\\r\\n用栈实现前缀表达式的计算：\\r\\n\\r\\n①从右往左扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n![image-20220323214326729](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214326729.png)\\r\\n\\r\\n\\r\\n\\r\\n中->前\\r\\n\\r\\n注：先弹出的是左操作数，后弹出的是右操作数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220323214621134](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220323214621134.png)\\r\\n\\r\\n![image-20220324214643950](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220324214643950.png)\\r\\n\\r\\n上三角按行存放 <===> 下三角按列存放\\r\\n\\r\\n下三角按行存<====>上三角按列存\\r\\n\\r\\n![image-20220404155200213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404155200213.png)\\r\\n\\r\\n###### 4/1\\r\\n\\r\\n串\\r\\n\\r\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\r\\n\\r\\n 高四位 低四位\\r\\n\\r\\na 0110\\t0001  \\r\\n\\r\\n![image-20220401151418753](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401151418753.png)\\r\\n\\r\\nKMP：\\r\\n\\r\\n![image-20220401173325778](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401173325778.png)\\r\\n\\r\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\r\\n\\r\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\r\\n\\r\\n![image-20220401174809686](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220401174809686.png)\\r\\n\\r\\n**nextVal数组求法**，先让第一位=0\\r\\n\\r\\n###### 4/3~4/5\\r\\n\\r\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\r\\n\\r\\n![image-20220403110614673](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403110614673.png)\\r\\n\\r\\ni<=n/2是分支结点，i>n/2是叶子结点\\r\\n\\r\\n![image-20220403114319211](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220403114319211.png)\\r\\n\\r\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\r\\n\\r\\n![image-20220404164718616](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404164718616.png)\\r\\n\\r\\n线索化二叉树\\r\\n\\r\\n![image-20220404172003418](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220404172003418.png)\\r\\n\\r\\n----\\r\\n\\r\\n![image-20220405213126866](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220405213126866.png)\\r\\n\\r\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\r\\n\\r\\n###### 4/6\\r\\n\\r\\n哈夫曼树：最优二叉树\\r\\n\\r\\n带权路径最小的二叉树\\r\\n\\r\\n**并查集代码**\\r\\n\\r\\n![image-20220406120550029](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406120550029.png)\\r\\n\\r\\n最坏情况下时间复杂度与树的高度h相关\\r\\n\\r\\n优化合并操作 小树并入大树\\r\\n\\r\\n![image-20220406121508045](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121508045.png)\\r\\n\\r\\nfind()最坏时间复杂度变为O(logn)\\r\\n\\r\\n![image-20220406121805400](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220406121805400.png)\\r\\n\\r\\n树越矮，时间复杂度越低\\r\\n\\r\\nfind优化操作\\r\\n\\r\\n![image-20220407095927853](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407095927853.png)\\r\\n\\r\\n```c\\r\\n/*int Find(int nums[],int index){\\r\\n    int root = index;\\r\\n    while(nums[root]>=0){\\r\\n        root = nums[root];\\r\\n    }\\r\\n    while(index!=root){\\r\\n        int record = root;\\r\\n        nums[index] = root;\\r\\n        root = record;\\r\\n    }\\r\\n    return root;\\r\\n}*/\\r\\n//使树的高度不超过O(a(n))的数量级\\r\\n\\r\\n\\r\\n#pragma once\\r\\n#define Size 100\\r\\nint UFSets[Size];\\r\\n\\r\\n//初始化并查集\\r\\nvoid Initial(int S[]) {\\r\\n\\tfor (int i = 0;i < Size;i++) {\\r\\n\\t\\tS[i] = -1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//查找操作，找x的根节点\\r\\nint Find(int s[], int x) {\\r\\n\\twhile (s[x]>0)\\r\\n\\t{\\r\\n\\t\\tx = s[x];\\r\\n\\t}\\r\\n\\treturn x;\\r\\n}\\r\\n\\r\\n//合并操作 根节点统一  树高<=logn + 1\\r\\nvoid Union(int s[], int root1, int root2) {\\r\\n\\tif (root1 == root2) {\\r\\n\\t\\treturn ;\\r\\n\\t}\\r\\n\\tif (s[root2] > s[root1]) { //root2是小树\\r\\n\\t\\ts[root1] += s[root2];\\r\\n\\t\\ts[root2] = root1;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\ts[root2] += s[root1];\\r\\n\\t\\ts[root1] = root2;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n![image-20220407102644213](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407102644213.png)\\r\\n\\r\\n错题：\\r\\n\\r\\n![image-20220407151722612](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407151722612.png)\\r\\n\\r\\n![image-20220407153146599](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407153146599.png)\\r\\n\\r\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\r\\n\\r\\n![image-20220407171123064](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171123064.png)\\r\\n\\r\\n![image-20220407171457661](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220407171457661.png)\\r\\n\\r\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\r\\n\\r\\n###### 4/16\\r\\n\\r\\n图的顶点个数 = 图的阶数\\r\\n\\r\\n![image-20220416121001775](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416121001775.png)\\r\\n\\r\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\r\\n\\r\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\r\\n\\r\\n![image-20220416162035318](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416162035318.png)\\r\\n\\r\\n邻接表、邻接矩阵的**区别**\\r\\n\\r\\n![image-20220416163840634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220416163840634.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 4/18\\r\\n\\r\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\r\\n\\r\\n```c\\r\\n// 邻接表中表对应的链表的顶点\\r\\ntypedef struct _ENode\\r\\n{\\r\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\r\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\r\\n}ENode, *PENode;\\r\\n\\r\\n// 邻接表中表的顶点\\r\\ntypedef struct _VNode\\r\\n{\\r\\n    char data;              // 顶点信息\\r\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\r\\n}VNode;\\r\\n\\r\\n// 邻接表\\r\\ntypedef struct _LGraph\\r\\n{\\r\\n    int vexnum;             // 图的顶点的数目\\r\\n    int edgnum;             // 图的边的数目\\r\\n    VNode vexs[MAX];\\r\\n}LGraph;\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\r\\n\\r\\n![image-20220418213147807](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213147807.png)\\r\\n\\r\\n![image-20220418213557320](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220418213557320.png)\\r\\n\\r\\n访问各个顶点所需时间+访问各边所需时间\\r\\n\\r\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\r\\n\\r\\n**深度优先遍历：**和树的**先根**遍历类似\\r\\n\\r\\n![image-20220419165025285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220419165025285.png)\\r\\n\\r\\n---\\r\\n\\r\\nPrim算法和kruskal算法![image-20220421202140630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421202140630.png)\\r\\n\\r\\n![image-20220421213517892](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421213517892.png)\\r\\n\\r\\n考频只有一题的选择：\\r\\n\\r\\n![image-20220421215042729](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220421215042729.png)\\r\\n\\r\\n---\\r\\n\\r\\n关键路径\\r\\n\\r\\n![image-20220424212457566](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220424212457566.png)\\r\\n\\r\\n4/24复习\\r\\n\\r\\n![image-20220422181640348](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220422181640348.png)\\r\\n\\r\\ne(i) :活动ai最早开始的时间\\r\\n\\r\\nl(i) :活动ai最晚开始的时间\\r\\n\\r\\nvl(k)：活动vk最迟发生时间 vek:最早\\r\\n\\r\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\r\\n\\r\\n![image-20220429113037264](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429113037264.png)\\r\\n\\r\\n差值为0的就是关键路径\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#### 5 月\\r\\n\\r\\n![image-20220505203332110](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220505203332110.png)\\r\\n\\r\\n查找判定树\\r\\n\\r\\n判断「平衡二叉树」的 2 个条件：\\r\\n\\r\\n- **1. 是「二叉排序树」**\\r\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\r\\n\\r\\n二叉排序树\\r\\n\\r\\n平衡二叉树\\r\\n\\r\\n二叉搜索树\\r\\n\\r\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\r\\n\\r\\n---\\r\\n\\r\\n<h3>折半查找：</h3>\\r\\n\\r\\n只适用于有序的顺序表\\r\\n\\r\\n![image-20220801105659956](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801105659956.png)\\r\\n\\r\\n\\r\\n\\r\\n折半查找构成了二叉排序树\\r\\n\\r\\n可以把折半查找看成一颗二叉排序树\\r\\n\\r\\n![image-20220506172506706](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506172506706.png)\\r\\n\\r\\n二叉排序树删除操作\\r\\n\\r\\n![image-20220506173438156](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220506173438156.png)\\r\\n\\r\\n7.3.3中要重点了解的例1~3，例4\\r\\n\\r\\n**简单路径定义：**\\r\\n\\r\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220512164410294](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512164410294.png)\\r\\n\\r\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\r\\n\\r\\n\\r\\n\\r\\n**红黑树性质**\\r\\n\\r\\n![image-20220512120734504](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512120734504.png)\\r\\n\\r\\n红黑树插入\\r\\n\\r\\n![image-20220512144705058](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512144705058.png)\\r\\n\\r\\n看“叔”脸色\\r\\n\\r\\n\\r\\n\\r\\n红黑树性质+插入总结：\\r\\n\\r\\n![image-20220512153750568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512153750568.png)\\r\\n\\r\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\r\\n\\r\\n**B树**\\r\\n\\r\\n特性\\r\\n\\r\\n![image-20220517191547133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517191547133.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517182017286](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517182017286.png)\\r\\n\\r\\n树的高度\\r\\n\\r\\n![image-20220517195601030](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517195601030.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517183218196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517183218196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517202426310](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517202426310.png)\\r\\n\\r\\n（上下限：除了根节点外，结点关键字个数n: )\\r\\n\\r\\n\\r\\n\\r\\n![image-20220519205336630](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220519205336630.png)\\r\\n\\r\\nB树/B+树类比\\r\\n\\r\\n---\\r\\n\\r\\n**散列（哈希表）**\\r\\n\\r\\n拉链法：同义词串成一个链表\\r\\n\\r\\n开放定址法![image-20220520184858217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520184858217.png)\\r\\n\\r\\n着重考察：线性探测法、平方探测法\\r\\n\\r\\n\\r\\n\\r\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185042751.png)\\r\\n\\r\\n总结\\r\\n\\r\\n![image-20220520185629378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220520185629378.png)\\r\\n\\r\\n装填因子概念也需重视\\r\\n\\r\\nQuestion1:\\r\\n\\r\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\r\\n\\r\\n(1) 请画出所构造的散列表。\\r\\n\\r\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\r\\n\\r\\n![image-20220522195603948](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522195603948.png)\\r\\n\\r\\n\\r\\n\\r\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\r\\n\\r\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/23 排序算法\\r\\n\\r\\n插入排序法\\r\\n\\r\\n![image-20220523120242919](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220523120242919.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/27 快速排序\\r\\n\\r\\n时间、空间复杂度与递归层次有关\\r\\n\\r\\n![image-20220527151635848](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527151635848.png)\\r\\n\\r\\n**快排时间效率分析：**\\r\\n\\r\\n![image-20220527152551897](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527152551897.png)\\r\\n\\r\\n---\\r\\n\\r\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\r\\n\\r\\n![image-20220527153223741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527153223741.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### **8.3.3**\\r\\n\\r\\n---\\r\\n\\r\\n第七题：**x趟排序应产生x个分界线。**\\r\\n\\r\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\r\\n\\r\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\r\\n\\r\\n![image-20220527163829533](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527163829533.png)\\r\\n\\r\\n---\\r\\n\\r\\n第9题：关于快排的**完美**划分\\r\\n\\r\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\r\\n\\r\\n排序速度最慢：原数组已基本有序\\r\\n\\r\\n![image-20220527170237805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527170237805.png)\\r\\n\\r\\n##### 5/29 堆排序\\r\\n\\r\\n最主要的算法还是向下调整HeadAdjust()函数\\r\\n\\r\\n![image-20220529164723637](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529164723637.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220529165608132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529165608132.png)\\r\\n\\r\\n堆排序的空间复杂度：常数级 O(1)\\r\\n\\r\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\r\\n\\r\\n![image-20220529170403872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529170403872.png)\\r\\n\\r\\n堆的插入和删除\\r\\n\\r\\n考试可能考比较次数\\r\\n\\r\\n![image-20220529172811881](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220529172811881.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/30 归并排序+基数排序\\r\\n\\r\\n二路归并：把两个已经有序的序列合并成一个\\r\\n\\r\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\r\\n\\r\\n![image-20220530201445366](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530201445366.png)\\r\\n\\r\\n**基数排序：**代码不怎么考，主要手算模拟即可\\r\\n\\r\\n![image-20220530203930350](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530203930350.png)\\r\\n\\r\\n---\\r\\n\\r\\n排序算法的空间、时间复杂度\\r\\n\\r\\n![image-20220531195457004](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531195457004.png)\\r\\n\\r\\n\\r\\n\\r\\n5/31外部排序\\r\\n\\r\\n\\r\\n\\r\\n![image-20220531214333361](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214333361.png)\\r\\n\\r\\nr<=K^h-1 ,树的结点最大的一层\\r\\n\\r\\n要归并的数据都是分块读入内存的\\r\\n\\r\\n![image-20220531214752539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531214752539.png)\\r\\n\\r\\n\\r\\n\\r\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\r\\n\\r\\n![image-20220531215026199](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531215026199.png)\\r\\n\\r\\n\\r\\n\\r\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\r\\n\\r\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\r\\n\\r\\n##### 6/2 结尾\\r\\n\\r\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\r\\n\\r\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\r\\n\\r\\n考查手算模拟即可\\r\\n\\r\\n![image-20220602155542194](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602155542194.png)\\r\\n\\r\\n---\\r\\n\\r\\n**置换选择排序：**减少初始归并段的个数\\r\\n\\r\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\r\\n\\r\\n![image-20220602161911437](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602161911437.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n**最佳归并树**\\r\\n\\r\\n![image-20220602174054132](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602174054132.png)\\r\\n\\r\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\r\\n\\r\\nk叉最佳归并树：\\r\\n\\r\\n![image-20220602164837160](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602164837160.png)\\r\\n\\r\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\r\\n\\r\\n![image-20220602165011687](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602165011687.png)\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**各种排序算法的性质总结**</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220602170322008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602170322008.png)\\r\\n\\r\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\r\\n\\r\\n\\r\\n\\r\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\r\\n\\r\\n![image-20220602201630861](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220602201630861.png)\\r\\n\\r\\n---\\r\\n\\r\\n### 8/1 算法题\\r\\n\\r\\n数组题解题框架：\\r\\n\\r\\n![image-20220801155037671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220801155037671.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"2022-3-5~6-5 数据结构所有笔记\",\"categoryName\":\"学习\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:28:48',NULL),
(1139,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 2022/3/13\\n\\n计算机网络就是一些互联的、自治的计算机系统的集合\\n\\n三类观点\\n\\n计算机网络的组成：1、组成部分上来看：由软件、硬件、协议三大部分组成\\n\\n2、工作方式上来看：可分为边缘部分(用于通信传输数据和资源共享)和核心部分(为边缘部分提供连通性和交换服务)\\n\\n3、功能上来看：由通信子网（数据传输、交换、控制和存储）和资源子网（实现资源共享的设备及其软件的集合）组成\\n\\n计算机网络功能：1、数据通信 2、资源共享 3、分布式处理 4、提高可靠性 5、负载均衡\\n\\n**最基本和最重要的功能：数据通信**\\n\\n---\\n\\n计算机网络的各种分类：\\n\\n**分布范围分类：**1、广域网(WAN) 2、城域网(MAN) 3、局域网(LAN) 4、个人区域网(PAN)\\n\\n**传输技术分类：**1、广播式网络 2、点对点网络\\n\\n**拓扑结构分类：**拓扑结构只要取决于通信子网\\n\\n1、总线形网络 2、星型网络 3、环形网络 4、网状网络\\n\\n使用者分类：公用网/专用网\\n\\n交换技术分类：1、电路交换网络 2、报文交换网络  3、分组交换网络\\n\\n传输介质分类：有线类/无线类\\n\\n---\\n\\n**计网性能指标(需理解的)**：\\n\\n1、带宽 :最高数据传输的速率称为带宽，发送比特的速率变快了\\n\\n2、时延：1)发送时延 2)传播时延 3)处理时延 4)排队时延 \\n\\n3、时延带宽积：=传播时延 X 信道宽度\\n\\n描述数据量，此时此刻的数据容量\\n\\n4、往返时延RTT\\n\\n从发送方发送数据开始，到发送方收到接收方的确认(收到第一个bit的确认为止)\\n\\n5、吞吐量：在单位时间内通过某个网络/信道的数据量，每秒**实际**通过的最高数据量\\n\\n6、速率：比特在信道上跑的速度\\n\\n7、信道利用率\\n\\n随着利用率增大 如果利用率接近百分之百了 我们的时延也会急剧增加 导致我们这个网络出现一定的拥塞的情况\\n\\n![image-20220326145029611](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220326145029611.png)\\n\\n###### 3/27\\n\\n分层：上层使用下层的服务\\n\\n1、各层之间相互独立\\n\\n2、每层之间的界面自然清晰\\n\\n3、结构上可分割开\\n\\n4、保持下层对上层的独立性，上层单向使用下层提供的服务\\n\\n5、整个分层结构能促进标准化工作\\n\\n\\n\\n###### 4/10\\n\\n第二章 物理层\\n\\n编码和调制的方式：![image-20220410200234421](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200234421.png)\\n\\n![image-20220410200555847](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410200555847.png)\\n\\n\\n\\n![image-20220410174726310](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410174726310.png)\\n\\n电路交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410175551747](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410175551747.png)\\n\\n报文交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410180148943](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410180148943.png)\\n\\n分组交换的优点\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t缺点\\n\\n![image-20220410181910065](C:\\\\Users\\\\kai\\\\AppData\\\\Roaming\\\\Typora\\\\typora-user-images\\\\image-20220410181910065.png)\\n\\n计算题总结：\\n\\n1.该信号首先采用了a种相位，每种相位有b种的QAM调试方法，设该信号有x种变化，则x = a*b\\n\\n则每个码元携带log x比特信息\\n\\n2.一个信号每1/x秒s采样一次，则该信号带宽W为 **x**\\n\\n3.以太网采用曼彻斯特编码，每位数据都需要两个电平（两个脉冲信号，对于码元传输速率）来表示，因此**波特率B**是数据率的2倍\\n\\n4.有效离散值个数x\\n\\n数据传输率 = 波特率B*log x\\n\\n从而可推出x\\n\\n5.要注意题目“二进制信号”的限制，考虑奈奎斯定理\\n\\n###### 4/11\\n\\n![image-20220411165713593](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220411165713593.png)\\n\\n**中继器**：五四三规则\\n\\n![image-20220414155503235](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220414155503235.png)\\n\\n分组交换的两种方式的差别\\n\\n### 4/26\\n\\nCRC、fcs\\n\\n![image-20220426120703383](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426120703383.png)\\n\\n海明校验码：已记录在笔记本上\\n\\n![image-20220426155453399](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426155453399.png)\\n\\n滑动窗口可以解决流量控制和可靠传输的\\n\\n滑动窗口协议又分为：**GBN协议(后退N帧协议）** 和 **SR协议（选择重传协议）**\\n\\n![image-20220426162008770](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220426162008770.png)\\n\\n可靠不可靠的层的区分\\n\\n##### 计算循环冗余码：\\n\\n1、加0：假设生成多项式的阶为r,则加r个0\\n\\n如10011的阶为4，多项式为N位，则阶为N-1\\n\\n2、模2除法:shallow_pan_of_food: 原数据后加N-1位的0后除以多项式，余数为冗余码/FCS/CRC检验码的比特序列\\n\\n**最终，将取得的余数结果加在原有数据后面形成新的数据（答案）**。那么如何检验呢？方法很简单，只需要将得到的新数据与原来的多项式相除即可，新生成的余数为0则获得的结果正确，反之则有差错\\n\\n###### 4/29\\n\\nGBN:\\n\\n![image-20220429164818170](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220429164818170.png)\\n\\n---\\n\\n介质访问控制\\n\\n![image-20220430173043452](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220430173043452.png)\\n\\n\\n\\n##### 5/3~\\n\\nCSMA协议分为3种：\\n\\n1-坚持CSMA\\n\\n非坚持CSMA\\n\\np-坚持CSMA（较优）\\n\\n---\\n\\nPPP协议\\n\\n![image-20220512192023907](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512192023907.png)\\n\\nPPP/HDLC异同\\n\\n![image-20220512193909179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220512193909179.png)\\n\\n---\\n\\n###### 3.6选择题\\n\\n![image-20220513200509279](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513200509279.png)\\n\\n问某某设备功能的题目解决方案：\\n\\n看该设备位于哪一层，然后该设备的功能位于本层及以下所有层，排除掉该层以上的层的答案即可\\n\\n\\n\\n![image-20220513202718952](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513202718952.png)\\n\\n总结各层设备的特点以及冲突域广播域的分割\\n\\n\\n\\n![image-20220513205445377](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220513205445377.png)\\n\\nOSI参考模型中的数据链路层分为以下两个子层：\\n\\nMAC子层：数据封装与解封装\\n\\nLLC子层：给帧加序号\\n\\n\\n\\n###### 3.7习题\\n\\n3.集中控制式 **分布控制式**\\n\\n![image-20220515205146940](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515205146940.png)\\n\\n\\n\\nPPP、HDLC协议\\n\\n![image-20220517170134008](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517170134008.png)\\n\\n\\n\\n3.8\\n\\n![image-20220517173054196](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173054196.png)\\n\\n\\n\\n![image-20220517173537031](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220517173537031.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n网桥\\n\\n![image-20220515210938702](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515210938702.png)\\n\\n又分为透明网桥以及**源路由网桥**\\n\\n交换机：多接口网桥，分为直通式交换机和存储转发式交换机\\n\\n###### 冲突域与广播域的考点\\n\\n![image-20220515213814436](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220515213814436.png)\\n\\n（背）\\n\\n![image-20220521144927118](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521144927118.png)\\n\\n（王道书上的）\\n\\n一个网段就是一个冲突域\\n\\n中继器、集线器属于物理层设备，物理层设备没法处理两个及两个以上的信号输入，会产生冲突，所以没法分隔冲突域\\n\\n网桥、交换机属于链路层设备，能处理同时输入的多个信息，遇到广播信息广播到所有窗口\\n\\n路由器：遇到广播信号不转发形成广播域\\n\\n---\\n\\n\\n\\n### 5.21 网络层\\n\\n![image-20220521145846315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521145846315.png)\\n\\n网络层功能\\n\\n![image-20220521150450769](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521150450769.png)\\n\\n路由算法\\n\\n![image-20220522161302439](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522161302439.png)\\n\\n\\n\\n---\\n\\n\\n\\n\\n\\nAS概念\\n\\n![image-20220521151931138](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521151931138.png)\\n\\n内部使用的协议外部看不到\\n\\n![image-20220521152221640](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521152221640.png)\\n\\n路由选择协议，内部IGP 外部EGP\\n\\n---\\n\\nSDN\\n\\n每路由器法\\n\\n![image-20220521153045039](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153045039.png)\\n\\n![image-20220521153529671](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521153529671.png)\\n\\n![image-20220521155328285](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155328285.png)\\n\\nSDN控制器的三个层次：网络范围状态管理层、通信层....\\n\\n![image-20220521155701758](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521155701758.png)\\n\\n\\n\\n![image-20220521154751935](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220521154751935.png)\\n\\nSDN总结\\n\\n\\n\\n---\\n\\n\\n\\n###### 各个层次的协议总结：\\n\\n![image-20220522164627690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522164627690.png)\\n\\n---\\n\\n\\n\\nIP数据报的格式\\n\\n![image-20220522170527291](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522170527291.png)\\n\\n源IP地址和目的IP地址：32位\\n\\n首部长度：2进制：1111 所以是15 ,然后长度为15 *4B（单位）=60字节\\n\\n固定部分：20字节，所以**可变部分**为60-20 = 40字节，**首部长度一定是4字节的整数倍**\\n\\n总长度：首部的部分+数据部分  2^16 -1\\n\\n各协议所对应的字段值： 如UDP-17（不建议连接\\n\\n![image-20220522171238690](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220522171238690.png)\\n\\n \\n\\n###### 5/24 \\n\\n\\\"坏消息传的慢\\\"\\n\\n![image-20220524145342845](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145342845.png)\\n\\nRIP协议\\n\\n![image-20220524145739184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524145739184.png)\\n\\n\\n\\nOSPF：\\n\\n![image-20220524153053725](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524153053725.png)\\n\\n\\n\\n---\\n\\n![image-20220524165003184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220524165003184.png)\\n\\n**算法分类**\\n\\n###### 5/26 \\n\\n**IP数据报格式以及分片/片偏移**\\n\\n![image-20220526200301772](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526200301772.png)\\n\\n\\n\\n对应的总/片/首长度单位：“一种八片的手势”\\n\\n![image-20220526201234783](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526201234783.png)\\n\\n\\n\\n私有IP地址：IP地址的分类\\n\\n![image-20220526203338021](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203338021.png)\\n\\n\\n\\n![image-20220526203626818](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220526203626818.png)\\n\\n> 只有A类、B类、C类地址可以分配给网络中的主机或路由器的各接口\\n>\\n> **广播**地址：主机号全1\\n>\\n> 网络地址：主机号为“全0”，广播地址、网络地址均不能分配给主机或路由器的各接口\\n>\\n\\n主要是ABC类，最大主机数都是减去全0的和全1的，所以每项都减2（表第五列）\\n\\n**Practice:**\\n\\n![image-20220528145909542](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528145909542.png)\\n\\n\\n\\n![image-20220528150734140](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528150734140.png)\\n\\n是否作为源地址？目的地址？\\n\\n小结\\n\\n![image-20220528151523517](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528151523517.png)\\n\\n\\n\\n---\\n\\n5/27\\n\\n子网掩码划分\\n\\n![image-20220527192726514](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527192726514.png)\\n\\n点分十进制，子网掩码：255.255.0.0\\n\\n网络号有多少位，1就有多少位，剩下的主机位自然是0的位数\\n\\n\\n\\n![image-20220527200329979](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220527200329979.png)\\n\\n超网\\n\\n网络层提供的两种服务：\\n\\n![image-20220528115835171](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528115835171.png)\\n\\n###### 5/28划分子网IPv4地址\\n\\n划分子网的过程：\\n\\n![image-20220528153733212](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528153733212.png)\\n\\n从主机位借用1个比特作为子网号，划分成了2个子网\\n\\n**默认子网掩码：**\\n\\nA类：8位网络号 24位主机号：255.0.0.0\\n\\nB类：16位~ ：255.255.0.0\\n\\nC类：24位~：255.255.255.0\\n\\n小结\\n\\n![image-20220528155810385](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220528155810385.png)\\n\\n\\n\\n###### 5/30\\n\\nCIDR相关计算\\n\\n![image-20220530113748646](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530113748646.png)\\n\\n\\n\\n![image-20220530115327838](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115327838.png)\\n\\n**找共同前缀，然后剩余13个比特全部取0**\\n\\n![image-20220530115459321](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530115459321.png)\\n\\n---\\n\\n\\n\\n![image-20220530121115278](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530121115278.png)\\n\\ntry 例题\\n\\n![image-20220530145820144](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820144.png)![image-20220530145820055](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530145820055.png)\\n\\n---\\n\\nARP协议：解决下一跳走哪的问题\\n\\n![image-20220530152954244](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530152954244.png)\\n\\n\\n\\n**ICMP协议**\\n\\n\\n\\n5种差错报告报文![image-20220531202035262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202035262.png)\\n\\n不应发送差错报文的情况（可能在选择题里考）\\n\\n![image-20220531202416345](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531202416345.png)\\n\\n\\n\\n###### 4.3.5\\n\\n01：各个协议在各个层次的分布，C选项中均在网络层\\n\\n![image-20220530154801554](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220530154801554.png)\\n\\n\\n\\n04：IP分组中的检验字段都只检验首部\\n\\n![image-20220531205032699](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531205032699.png)\\n\\n\\n\\n14：环路地址分辨\\n\\n![image-20220531210024179](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220531210024179.png)\\n\\n\\n\\n20：\\n\\n一台主机可以有多个IP地址，但是必须属于多个逻辑网络（这些网络号不能相同）\\n\\n内部网络地址0~255，A/B/C类地址\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n##### 6/9  IPv6 \\n\\n\\n\\n![image-20220609203542315](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609203542315.png)\\n\\n源地址和目的地址都是128位\\n\\n**IPv6和v4的区别：**\\n\\n![image-20220609204231454](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609204231454.png)\\n\\nipv6没有提供校验和字段，首部长度固定的\\n\\n**QoS简介**\\n\\n![image-20220609210332500](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220609210332500.png)\\n\\n\\n\\n##### 6/10 RIP、OSPF、BGP\\n\\n**RIP协议**\\n\\n![image-20220610194501157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194501157.png)\\n\\n\\n\\n![image-20220610181233743](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610181233743.png)\\n\\nRIP协议“好消息传得快，坏消息传的慢”\\n\\n---\\n\\n**OSPF**(网络层协议)\\n\\n![image-20220610193835557](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610193835557.png)\\n\\n洪泛法：当链路状态发生变化时，全网内的路由器全部可以收到信息\\n\\n**收敛：经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛**\\n\\n其他特点\\n\\n![image-20220610194256116](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610194256116.png)\\n\\n---\\n\\n**BGP协议**\\n\\n![image-20220610195450908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610195450908.png)\\n\\n只需知道BGP协议交换的信息包含的是什么内容就可以了\\n\\n特点\\n\\n![image-20220610200158672](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200158672.png)\\n\\n四种报文\\n\\n![image-20220610200227378](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200227378.png)\\n\\n\\n\\nBGP/OSPF/RIP协议所对应的不同报文:\\n\\n![image-20220610200532615](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200532615.png)\\n\\n![image-20220610200852427](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220610200852427.png)\\n\\n\\n\\n\\n\\n###### 4.5.6\\n\\n01:\\n\\n洪泛法：OSPF路由算法，向所有可能的路径发送信息\\n\\n OSPF:系统内的主机知道系统内部全部网络的情况，不知道系统外的情况\\n\\n\\n\\n07：收敛越快，路由器就能越快适应网络拓扑结构的变化\\n\\n\\n\\n08：RIP 、OSPF协议的差别\\n\\n![image-20220612111001610](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111001610.png)\\n\\n\\n\\n09：OSPF的分组类型\\n\\n![image-20220612111213495](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612111213495.png)\\n\\n\\n\\n15：真题\\n\\n![image-20220614104318801](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614104318801.png)\\n\\n\\n\\n---\\n\\n\\n\\n##### 6/10 IP组播、IP分组\\n\\n\\n\\n**IP数据报的三种传输方式**\\n\\n![image-20220612114900045](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612114900045.png)\\n\\n\\n\\n组播\\n\\n![image-20220612115806806](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612115806806.png)\\n\\n\\n\\n![image-20220612120538681](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120538681.png)\\n\\n可能会考察IP地址和MAC地址进行一个映射\\n\\nIGMP、ICMP\\n\\n![image-20220612120922369](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612120922369.png)\\n\\n![image-20220612121149516](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121149516.png)\\n\\n\\n\\n协议无关组播（稀疏/密集）建立于任何路由器协议之上\\n\\n![image-20220612121739087](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612121739087.png)\\n\\n组播的分类：\\n\\n![image-20220614110246790](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110246790.png)\\n\\n\\n\\n---\\n\\n移动IP\\n\\n相关概念\\n\\n![image-20220612122301568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122301568.png)\\n\\n**具体步骤：** \\n\\n![image-20220612122751908](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220612122751908.png)\\n\\n---\\n\\n\\n\\n###### 4.6.4\\n\\n01：仿真：时延更长\\n\\n多个单播可以仿真组播，但是单播带宽之和相比组播增加\\n\\n![image-20220614105107539](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614105107539.png)\\n\\n03：\\n\\n![image-20220614110057987](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614110057987.png)\\n\\n\\n\\n\\n\\n###### 4.7.3\\n\\n02：\\n\\n![image-20220614112543930](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614112543930.png)\\n\\n本地代理接受，通过隧道技术，将分组封装在以辅地址为目的地址的IP包内转交给外部代理，然后外部代理转交给移动节点\\n\\n注册：在外网段时，发消息首先需要在本地代理注册一个新的地址然后以这个地址进行通讯\\n\\n\\n\\n#### 6/14 网络层结尾\\n\\n网络层设备\\n\\n![image-20220614115326374](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115326374.png)\\n\\n\\n\\n![image-20220614115240655](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115240655.png)\\n\\n三层设备的区别：路由器、集线器、网桥（之前有讲过）\\n\\n![image-20220614115540438](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614115540438.png)\\n\\n默认路由：相当于场内求助\\n\\n有发不出去的分组全都找他，填充一个默认路由的表项，填写路由表：这个目的网络IP地址和子网掩码全部填上全0就可以了\\n\\n路由转发、路由表：\\n\\n![image-20220614120034513](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120034513.png)\\n\\n---\\n\\n<font size=\\\"6\\\">总结</font>\\n\\n![image-20220614121344471](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121344471.png)\\n\\n开环控制：静态的拥塞控制，把所有能导致拥塞的因素全部考虑到 做一个事先的预防 \\n\\n闭环控制： 它是一种动态的拥塞控制手段 它采用监测网络系统，一检测到拥塞问题就及时进行控制\\n\\n**重要协议**\\n\\n![image-20220614120815416](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120815416.png)\\n\\n\\n\\n**路由算法：**\\n\\n![image-20220614120947577](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614120947577.png)\\n\\nIPv4\\n\\n![image-20220614121053027](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220614121053027.png)\\n\\nNAT:私有共有地址的转换\\n\\n分片：链路可接受最大传输单元：MTU\\n\\n\\n\\n---\\n\\n4.8.4\\n\\n04：路由器只能根据IP地址转发，交换机根据MAC地址转发。路由器借助软件查找\\n\\n![image-20220616152431580](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152431580.png)\\n\\n\\n\\n05：路由表一般仅包含从目的网络到下一跳的IP地址\\n\\n\\n\\n07：笔记：路由体系结构：路由选择  +  分组转发， 转发表根据路由表生成，更详细的信息，记录了端口\\n\\n![image-20220616152738634](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616152738634.png)\\n\\n\\n\\n08：\\n\\n![image-20220616153250741](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616153250741.png)\\n\\n笔记：交换结构、路由选择处理机、路由选择的三大部分是路由选择处理机、路由选择协议、路由表\\n\\n分组转发组成：交换结构、输入端口、输出端口\\n\\n14：\\n\\n路由器尽最大努力交付，但不确保\\n\\n![image-20220616154821062](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154821062.png)\\n\\nIP分组头进行差错检验，只检验分组首部，不检验数据部分\\n\\n![image-20220616154721728](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616154721728.png)\\n\\n---\\n\\n###### 6/16 总结\\n\\n1.“尽最大努力交付”有哪些含义?\\n\\n1)不保证源主机发送的卫数据报**一定无差错地**交付到自的主机。\\n\\n2)不保证源主机发送的IP数据报都在**某一规定的时间**内交付到目的主机。\\n\\n3)不保证源主机发送的IP数据报一定**按发送时的顺序**交付到目的主机。\\n\\n4)不保证源主机发送的IP数据报不会重复交付给目的主机。\\n\\n5)不故意丢弃IP数据报。丢弃IP数据报的情况是:路由器检测出首部校验和有错误;或由于网络中通信量过大，路由器或目的主机中的缓存已无空闲空间。\\n\\n​\\t但要注意，IP数据报的首部中有一个“首部校验和”。当它检验出IP数据报的首部出现了**差错**时，**就丢弃该数据报**。因此，凡交付给目的主机的IP数据报都是IP首部没有差错的或没有检测出差错的。也就是说，**在传输过程中，出现差错的IP数据报都被丢弃了。**\\n\\n​\\t现在因特网上绝大多数的通信量都属于“尽最大努力交付”。如果数据必须可靠地交付给目的地，那么使用IP的高层软件必须负责解决这一问题。\\n\\n**2.“IP网关”和“IP路由器”是否为同义语?“互连网”和“互联网”有没有区别?**\\n\\n当初发明TCP/IP的研究人员使用IP Gateway作为网际互联的设备，可以认为“IP网关”和“IP路由器”是同义词。\\n\\n“互连网”和“互联网”都是推荐名，都可以使用，不过建议优先使用“互联网”。\\n\\n---\\n\\n### **传输层**\\n\\n![image-20220616162138785](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162138785.png)\\n\\n主机才有的层次，为应用层提供通信服务，使用网络层的服务\\n\\n（提供进程和进程之间的逻辑通信，网络层则是提供主机与主机之间的逻辑通信）\\n\\n![image-20220616162727518](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616162727518.png)\\n\\n笔记：传输层的两大协议**：TCP和UDP的区别** \\n\\n![image-20220616163227947](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616163227947.png)\\n\\nTCP它是面向连接 一个可靠的传输层协议， UDP是无连接不可靠的一个传输层协议\\n\\n---\\n\\n<h3>**复用**指的就是应用层所有的应用进程都可以通过传输层再传输到网络层*   *分用**指的是传输层从网络层收到数据后可以交付给指明的 或者是对应的应用进程</h3>\\n\\n\\n\\n![image-20220616164253795](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164253795.png)\\n\\n**端口：**它是传输层的SAP 也就是服务访问点 它可以唯一的标识主机当中具体的一个应用进程 \\n\\n传输层的端口是我们**看不见 摸不着的 所以我们叫它逻辑端口 或者是软件端口 那这个端口 我们会有一个具体的数字来标识，叫做端口号**\\n\\n端口号有唯一性 可以唯一标识一个进程就可以了 在不同主机之间 这个端口号是没有区分的意义的\\n\\n服务端口号和客户端口号，服务端使用的端口号 我们也可以分成两种一个是熟知端口号 一个叫做登记端口号 那熟知端口号的范围  是0~1023 \\n\\n登记端口号是1024-49151因此**服务端使用的端口号就是从0~49151**\\n\\n---\\n\\n\\n\\n![image-20220616164130771](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220616164130771.png)\\n\\n套接字：它其实就是一个**主机IP地址和端口号**的组合 那看到这个大家就应该清楚：**根据IP地址可以找到主机 根据端口号可以找到主机当中的具体进程**\\n\\n---\\n\\n#### 5.1.4习题\\n\\n传输层：在OSI参考模型中提供端到端的透明数据传输服务、差错控制和流量控制，**为进程之间提供逻辑通信**   \\n\\n05~06：如果一个协议使用确认机制对传输的数据进行确认，那么可以认为它是一个可靠的协议，“尽力而为” 则是不可靠的 \\n\\n![image-20220621161048543](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161048543.png)\\n\\n04：面向连接的服务：可靠性和按序到达 \\n\\n![image-20220621161657953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621161657953.png)\\n\\n12：报文的头部长度问题\\n\\n![image-20220621162547501](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621162547501.png)\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/17 UDP\\n\\n<h4>UDP的特点</h4>\\n\\n如果传输层使用了UDP协议 那么就要**靠应用层来实现可靠传输** \\n\\n![image-20220617115928628](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617115928628.png)\\n\\n\\n\\n![image-20220617120318549](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617120318549.png)\\n\\nUDP最少8B（首部）：首**部它是有8字节 分别是源端口号 ,目的端口号, 长度以及校验和** \\n\\n伪首部：模它仿的就是这个IP首部 那这个伪首部**什么时候**会出现 它只会在计算校验和的时候 出现\\n\\n**UDP检验：** \\n\\n![image-20220617121008248](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220617121008248.png)\\n\\n按2进制反码运算求和，将得出结果再求反码 \\n\\nUDP的校验方式 是通过在发送端以及接收端添加上一个**伪首部来校验数据**部分有没有发生差错\\n\\n---\\n\\n#### 5.2.3习题\\n\\n02：UDP数据报的长度不包含伪首部的长度\\n\\n【可选】当源主机不想计算校验和，则令该字段为0\\n\\n05：UDP 提供端口功能及复用和分用功能，可以将数据报投递给对应的进程\\n\\nIP数据报的差别是只能找到目的主机而无法找到目的进程\\n\\n**08：** 不使用校验和，将校验和字段设置为0。如果校验和的计算结果恰好为0，那么将校验和字段置为全1\\n\\n\\n\\n09:伪首部仅在校验和和计算期间建立，并不发送\\n\\n---\\n\\n#### 6/21 TCP\\n\\n<h3>TCP协议的特点</h3> \\n\\n![image-20220621183009893](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621183009893.png)\\n\\n 有连接的 ，一对一的 ，提供可靠交付的协议，他使用的是全双工的通讯方式 是一种面向字节流的协议\\n\\n<h4>TCP报文段首部格式</h4>\\n\\n![image-20220621184449953](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184449953.png)\\n\\nTCP的首部格式 ：它是有20字节 **包括源端口, 目的端口, 确认号、序号以及一些非常重要的控制信息 ，控制位**\\n\\n\\n\\nURG 、 ACK 、  SYN、  FIN \\n\\n那这个push位和复位reset这两个位  我们考试当中是几乎不会考的,主要考标红的地方\\n\\n窗口：\\n\\n![image-20220621184322344](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220621184322344.png)\\n\\n紧急指针 ：指出的就是紧急数据的末尾 在报文段当中的一个位置，如果这个紧急指针现在是50 那么说明这个TCP数据部分从第1个字节到第50个字节 这些都是紧急数据，剩下来的就是普通数据 ，就是不着急的这些数据\\n\\n所以说紧急指针就是告诉我们这个紧急数据 他所在的位置 以及他总共占的这个字节数\\n\\n填充：选项字段并不是四字节的整数倍 那么就需要填充一部分0 使得我们最后这个TCP的首部是四字节的整数倍\\n\\n---\\n\\n\\n\\n#### 6/23 TCP连接\\n\\n那通过面向连接 就建立了一点和一点之间的这种点对点一对一的通信 那在通信的时候 是可以采用全双工的通信方式\\n\\n<font color = \\\"red\\\">TCP连接的三个阶段：第一个就是**连接的建立** 第二个阶段就是**数据的传输** 第三个阶段就是**连接的释放过程** </font> \\n\\n那对于TCP连接的两个端点 或者说两个主机的两台进程：他们采用的是**客户和服务器的方式**；     主动发起连接：客户 被动等待连接建立的应用进程：服务器\\n\\n**那考试的重点 是考察我们对于这几种报文段 也就是三次握手过程当中所产生报文段当中首部的一些非常重要的字段** \\n\\n![image-20220623175221485](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175221485.png)\\n\\nSYN同步位只有在两种情况下置为1 ：一个是连接请求 一个是连接请求的接受 或者说连接请求的确认\\n\\nSYN他已经置为0： 因为只有在连接请求和连接请求接受 SYN才是1。那其他情况都是0\\n\\nACK:last_quarter_moon_with_face: 期待的下一个信号\\n\\n洪泛攻击： 它是由于三次握手才产生的这样一种黑客攻击问题 攻击者会发送TCP SYN，服务器返回了一个确认之后 这个攻击者就不会对他进行确认 那么这个TCP连接就处于挂起状态 那么服务器端如果收不到这个确认的话 如果收不到第三次握手所发送的报文段的话 就会重复发送ACK给攻击者，那这样一直发送ACK的话一定会浪费服务器的资源  那攻击者的就会借用这种情况 发送非常大量的这个第一个报文 也就是连接请求的这个报文段，那由于他发送的每一个都没有办法完成三次握手，  所以在服务器上 这些TCP连接会因为挂起状态一直在消耗资源包括CPU和内存等等 最后这个服务器就可能会死机 也就没有办法为用户提供服务了\\n\\n\\n\\n![image-20220623175024670](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220623175024670.png)\\n\\nFIN:结束位 只要是请求释放连接，FIN一定置为1\\n\\n四次握手就是断开或者说结束连接时需要的几个步骤。\\n\\n<font color = \\\"red\\\">报文段里面的**一些控制位大家也要清楚是置为0还是置为1， 以及序号和确认号的一些相关关系**  </font> \\n\\n---\\n\\n6/24 \\n\\n<h4>TCP可靠传输</h4>\\n\\n校验、序号、确认、重传\\n\\n确认：保证可靠传输，接收方要返回一个确认报文段。 \\n\\n**那这个重传就是**一旦发生了差错 发送方就要重传自己已发送的报文段。具体来讲有两种 ：一个是超时重传 ，这个是指计时器到期但是没有收到确认的时候， 就重传这样一个报文段。那**冗余确认** 指的就是当收到失去报文的时候 就会向发送端发送冗余ack 那如果发送三个冗余的ack的话 发送方就确认我这个报文段是丢失了 ，那就重传报文段， 这样就可以在超时计时器过期之前或者说到期之前 ，就可以及时的了解这个报文段是否丢失 ，好进行下一步的重传\\n\\n\\n\\n冗余ACK：多余的、重复的报文段 \\n\\n不用非要等到这个1号报文段的1号确认到了之后再发送这个2号报文段 也就是TCP它是不常使用**停等协议**的,它可以使用**GBN协议或者是SR协议,**  一次性可以发送多个报文段 然后接收方可以使用累计确认\\n\\n**TCP主要考察的 是TCP的拥塞控制以及流量控制 所以, 我们这个地方就不作为重点来讲解**\\n\\n---\\n\\n<h3>TCP流量控制</h3>\\n\\n在确认报文中设置接收窗口的值来限制发送方的一个发送速度\\n\\n> **引言：**为什么需要流量控制 ？主要是因为在平时发送数据的时候， 我们通常都会希望这个发送数据的速率可以更快一些。**但是如果发送的速率过快， 就会使得接收方可能来不及接收， 那这样的就会导致非常严重的丢包现象，** 所以才需要有流量控制来控制发送方的一个发送速率，那在TCP这一块 我们使用的是滑动窗口的机制来实现流量的控制 \\n\\n![image-20220624171804134](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171804134.png)\\n\\n接收窗口(动态的调整)：rwnd\\t拥塞窗口：cwnd\\t\\t\\n\\n发送窗口大小不仅取决于接收方发来的这个接收窗口大小 ，同时也取决于这样一个拥塞窗口的大小\\n\\n\\n\\n![image-20220624171723184](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624171723184.png)\\n\\n持续计时器\\n\\n---\\n\\n#### 6/24 TCP流量控制 \\n\\n<h3>TCP拥塞控制</h3>\\n\\n拥塞控制的原理 ：根据发送方自己估算的网络拥塞程度来设置一个拥塞的窗口，并且根据拥塞窗口设置自己的发送窗口 ，那当然要注意的是， 发送窗口的大小是要取**拥塞窗口以及接收窗口当中的最小值** \\n\\n![image-20220624172758430](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624172758430.png)\\n\\n主要问题：**拥塞控制：网络发生了堵塞**，导致很多发送方发送来的数据， 迟迟到不了接收方。**流量控制**：就是这个发送方**的速率过快**，导致这个接收方它接收缓存不够 或者说它的接收窗口不够（来不及接受）\\n\\n\\n\\n拥塞控制的四种算法：分别是慢开始 拥塞避免 快重传、快恢复 \\n\\n那下图同一个颜色 我们就是组合使用的：也就是慢开始和拥塞避免 我们是放在一起来学习和使用， 而快重传和快恢复 ，它们也是放在一种情形下来使用的\\n\\n![image-20220624173503511](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624173503511.png)\\n\\n所以我们要非常清楚这四种算法的一个应用过程 但是对于这四种算法的**具体细节** 是不做考察的\\n\\n<h4>慢开始和拥塞避免</h4>\\n\\n拥塞窗口最开始的初始值 是默认设置为1的 也就是cwnd等于1 那这个1代表的并不是一个字节，我们为了讨论方便： 在这里面1指的就是一个报文段，**而这一个报文段 它的长度是一个最大报文段的长度MSS** \\n\\n那至于拥塞窗口长度变到几， 就说明我们现在的发送窗口是几 也就是我们现在可以发送多少个报文段 也就是说我们现在可以发送多少个最大报文段的长度MSS\\n\\n![image-20220624174558650](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624174558650.png)\\n\\n往返时延单位：RTT\\n\\nssthresh:慢开始门限,到了这个初始值 我现在速度就要稍微减一点了, 就是由慢开始进入到拥塞避免, 因为我们现在注入的报文段有点多, 所以担心之后很快会发生拥塞情况 ,那我们现在就把这个速度稍微降一降\\n\\n那这个新的门限值是**什么时候确定的？** 就是在网络拥塞的情况下马上确定的，只要发生了网络拥塞，立刻把当时的**拥塞窗口除以2定义为新的门限值** \\n\\n---\\n\\n<h4>快重传和快恢复</h4>\\n\\n只要收到三个重复的确认之后， 就会执行快重传算法\\n\\n快速的执行这样一个重传的过程 省下了很多等待的时间 \\n\\n**快恢复：**可能发送的报文段出现了丢失之后 ，我们就马上执行快恢复， 那这里面的快恢复不用降到拥塞窗口为1 ，降到新的门限值 那这个新的门限值如何确定的 就只需要把出现了这个重复确认的时候 ，把这个拥塞窗口cwnd除以2, 从这个值进行快恢复，那接下来就执行这个拥塞避免 ，也就是线性的加法增大\\n\\n![image-20220624175442774](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220624175442774.png)\\n\\n不用降到拥塞窗口为1，直接降到新的门限值这，然后使用拥塞避免的算法\\n\\n---\\n\\n### 应用层\\n\\n#### 6/28 模型、DNS\\n\\n概述\\n\\n![image-20220628150804221](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628150804221.png)\\n\\n应用层功能和重要协议：\\n\\n![image-20220628151033867](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151033867.png)\\n\\n\\n\\n网络应用模型：客户/服务器模型（C/S） 主从式\\n\\nP2P模型\\t对等式 \\n\\nC/S 模型：\\n\\n![image-20220628151540247](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151540247.png)\\n\\n\\n\\nP2P模型\\n\\n![image-20220628151857973](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628151857973.png)\\n\\n\\n\\n6.1.3\\n\\n01：集中式：集中在一台计算机上，分布式：多台计算机 \\n\\n![image-20220628154113079](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628154113079.png)\\n\\n\\n\\n05：客户机：面向任务的\\t服务器：面向客户的\\n\\n---\\n\\n<h3>DNS </h3>\\n\\n域名组成：顶级域名、二级域名、三级域名...\\n\\n![image-20220628155712157](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628155712157.png)\\n\\n\\n\\n这个查询请求报文就会首先发给**本地域名服务器** 那这个本地域名服务器可以看到 它离主机的距离一定是**非常近的** 相对于以上三种服务器来说都是非常近的 \\n\\n**所以说有了本地域名的服务器的存在 可以使整个DNS查询的过程变得更加的简单 而且更加的快速** \\n\\n如果一个顶级域名服务器还不能够得到域名和IP地址的一个完整解析 就要继续往下请求,那就请求到这个权限域名服务器这里\\n\\n以下就是域名服务器的层次结构 还有我们在发出DNS请求时所要经历的一些过程：\\n\\n![image-20220628160921546](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220628160921546.png)\\n\\nabc.org与 y.abc.org是对等关系\\n\\n\\n\\n域名解析过程\\n\\n那这个域名解析过程 主要有两种类别 一个叫做**递归查询 一个叫做迭代查询** \\n\\n递归查询的过程：根域名服务器要请求顶级域名服务器的一个帮助，如果顶级域名服务器还不能解析完整这个域名的话 就要继续请求权限域名服务器的帮助 那就是这样一个接着一个寻求另一个人的帮助\\n\\n迭代查询：它是一种靠自己的方式 **什么叫靠自己呢** 这里面的自己还是别人说的就是本地域名服务器。迭代查询的方式就是 ：如果本地域名服务器当中并没有这个域名他所对应的IP地址 它首先就要查询根域名服务器 ,那如果根域名服务器没有，就不是由根域名来去查询了 而是由本地域名服务器再去查询顶级域名服务器，本地域名服务器它一直在进行一个查询的过程 所以**迭代查询靠自己 递归查询靠别人** \\n\\n\\n\\n 有关于这一部分的知识 我们要重点掌握域名解析的这两个过程递归以及迭代 它们两个过程不能够弄混 而且要清楚要经历哪几个域名服务器 并且要清楚这几个域名服务器他们的具体功能\\n\\n##### 6.2.4\\n\\n01：域名系统DNS：IP地址与特定含义的主机名相互转换\\n\\n  1个以太网卡：一个IP地址\\t  单个DNS~对应多个主机/多个MAC地址/多个ip\\n\\n 对这些都没有一一对应的关系\\n\\n02：Internet访问主机一定要有IP地址\\n\\n08：选C的原因\\n\\n![image-20220701160815319](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701160815319.png)\\n\\n10：\\n\\n\\n\\n\\n\\n\\n\\n---\\n\\n#### 6/29 传输层协议FTP\\n\\n那这个FTP协议 它最主要的就是可以提供不同种类主机系统 也就是硬件软件体系都可以不同的这些系统之间的一个文件传输的能力\\n\\n FTP 它是使用TCP来实现可靠传输的\\n\\n![image-20220629180558599](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629180558599.png)\\n\\n\\n\\n因此我们总结一下 这个控制连接它传的是请求 数据连接传的就是文件 那要注意的一点是 这个控制连接是在全程都打开的\\n\\n传输模式 主要包括两种： 一种叫做主动的传输模式 一种叫做被动的传输模式\\n\\n文本模式（ASCII）、二进制模式\\t\\n\\n![image-20220629181142601](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220629181142601.png)\\n\\n##### 6.3.3\\n\\n07:FTP的功能：![image-20220701164617822](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701164617822.png)\\n\\n08：封装的过程：自上而下\\t\\n\\n数据 数据段\\t数据报\\t数据帧\\t比特\\n\\n---\\n\\n#### 7/1 电子邮件:e-mail:\\n\\n电子邮件分为信封部分和内容部分，内容又分为首部和主体部分\\n\\n使用C/S模式\\t\\n\\n协议：SMTP协议（发送） POP3、IMAP（接收协议）\\n\\n![image-20220701170014788](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170014788.png)\\n\\n\\n\\n<h3>SMTP</h3>\\n\\n![image-20220701170322680](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170322680.png)\\n\\n\\n\\nSMTP的缺点：\\n\\n ![image-20220701170907231](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701170907231.png)\\n\\n扩充手段MINE:\\t使电子邮件系统支持声音、图像....\\n\\n\\n\\n<h4>POP3协议 </h4>\\n\\n端口号、TCP、C/S \\n\\n![image-20220701171059568](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171059568.png)\\n\\n\\n\\nIMAP：比POP协议复杂，看到邮箱的首部（也就是省点流量\\n\\n**基于万维网的电子邮件：**不同的就是在协议的使用上， 从用户代理到**发送方**邮件服务器这一个过程 使用的是HTTP协议了，那从这个发送方的邮件服务器到接收方的邮件服务器没有改变 还是使用的是SMTP协议。那读取邮件这儿使用的就不是POP3了 使用的是这个HTTP协议\\n\\n**也就是这种基于万维网的电子邮件 只要是与用户代理接触的 这样两个环节都使用HTTP协议 但是在中间这个发送邮件的环节 使用的是SMTP协议**\\n\\n![image-20220701171618095](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701171618095.png)\\n\\n##### 6.4.4\\n\\n07：\\n\\n![image-20220701174409155](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220701174409155.png)\\n\\n---\\n\\n#### 7/2 结尾：万维网和HTTP协议\\n\\n是无数个网络站点和网页的集合 也就是把全球的所有网站统一在一起 我们就称之为万维网\\n\\n统一资源定位符URL 它是可以唯一标识每一个资源的\\n\\n格式：协议冒号：加两个英文的斜杠 然后主机：端口再加一个/+路径 \\n\\n用户使用的浏览器就是万维网的客户程序 ，而这个万维网的文档所驻留的主机 就会运行一个服务器的程序\\n\\n![image-20220702162918872](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702162918872.png)\\n\\n\\n\\nHTTP工作流程：\\n\\n![image-20220702163328133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702163328133.png)\\n\\n\\n\\n<h3>HTTP 协议的特点\\t</h3>\\n\\n 它采用TCP作为运输层的协议 是一种面向连接的\\n\\n但是 HTTP协议本身是无连接的, 什么意思呢? 指的就是通信双方在交换这个HTTP的**请求和响应报文之前 是不需要事先建立HTTP的连接的**  这一点大家要区分开的\\n\\nHTTP连接方式主要包括两种 :一种是（HTTP/1.1版本）持久连接 keep alive。 一种是非持久连接:close（HTTP/1.0版本） \\t那在持久连接这还细分成了两种具体的持久连接方式 :一个是非流水线式的持久连接,一个是流水线式的持久连接 \\n\\n![image-20220702164017763](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702164017763.png)\\n\\n\\n\\n持久连接： 就是在服务器发送响应之后 在一段时间内仍然保持着这条连接，这样就可以使得客户 也就是这个浏览器和服务器 可以继续在这条连接之上传送后续的一些HTTP的请求报文以及响应报文\\n\\n非流水式连接（持久连接中的）：在等收到资源后才能继续发请求，类似于停等协议\\t\\n\\n流水线式： 流水线式就好比我们之前学过的这个GBN或者是SR协议 它是可以连续发送的。比如说现在主机 它有好几个请求报文等待发送 它想请求好几个资源 那这几个请求报文就可以**同时**的发送出去，可以一起发送出去。 那这个服务器收到之后 就**会依次的返回相应的请求**\\n\\n对比：**使用这种流水线的方式 客户访问所有的对象只需要花费大概一个RTT的时间 流水线工作的方式就可以使得这个TCP连接** 它的空闲时间比较少 不需要**等待太久** 因此就可以提高文档下载的一个效率\\n\\n---\\n\\nHTTP——报文结构\\n\\n那HTTP报文 它的特点是面向文本的 所以在报文当中每一个字段都是一些ASCII的码串 \\n\\nCRLF:那这个回车换行就是必备的 相当于是标识请求还是结束 首部行的开始\\n\\n![image-20220702165432365](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165432365.png)\\n\\n请求报文和响应报文\\n\\n![image-20220702165833550](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702165833550.png)\\n\\n那1打头表示的是通知信息的 比如说请求收到了 或者是正在处理的这样一些响应报文\\n\\n那2打头的 表示就是成功的,表示是成功的一些响应报文 比如说接受或者是知道了(比如说这个202 Accepted,这个响应报文表示的是接受)\\n\\n3打头的 表示重定向 比如说要完成请求 还必须采取进一步的哪些行动 \\n\\n那4打头 表示的是客户的差错,比如说请求当中有错误的语法 或者是不能完成(404 NOT FOUND:那这个表示的就是这个网页找不到了 可能是请求当中有错误的语法 或者是根本就不能完成 )\\n\\n 5打头表示的就是服务器的差错\\n\\n---\\n\\n<H2>总结 </H2>\\n\\n**常用应用层协议小结：** \\n\\n![image-20220702171327778](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702171327778.png)\\n\\n![image-20220702173120051](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173120051.png)\\n\\nP2P:每台机器既是服务器又是客户机 是一种对等的关系 \\n\\n持久性/非持久性连接：考点重点，易考到：\\n\\n![image-20220702180809063](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180809063.png)\\n\\n接下来就学习了文件传输协议 那这一块其实并不是重点 我们只需要掌握这个文件传输协议 它的作用就是允许用户在因特网上面存取文件,而且它的协议与端口也需要记忆 \\n\\n![image-20220702170248777](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702170248777.png)\\n\\n---\\n\\n##### 6.5.3\\n\\n01：FTP：文件传输协议，可靠性高，实时性要求低\\n\\n![image-20220702173738805](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702173738805.png)\\n\\n\\n\\n07：\\n\\n![image-20220702174726133](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702174726133.png)\\n\\n\\n\\n10：\\n\\n根据传输对象来确定传输所需时间\\n\\n**持久性连接流水线：**\\n\\n![image-20220702180422679](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180422679.png)\\n\\n\\n\\n非流水线：\\n\\n![image-20220702180616509](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220702180616509.png)\\n\\n---\\n\\n#### 7/31 \\n\\n<h3> 选择题小题每章重点</h3>\\n\\n第一章\\n\\n![image-20220731141406536](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731141406536.png)\\n\\nTips:基本都在考体系结构与参考模型，计算机网络概述还没考过\\n\\n\\n\\n第二章：曼彻斯特编码/差分~ ，归零/非归零编码的区别、数据交换方式：电路报文和分组\\t能否隔离... \\n\\n![image-20220731142248353](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142248353.png)\\n\\n第三章：GBN、SR、停等、介质访问、CSMA/CD/CA\\t\\n\\n![image-20220731142707141](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731142707141.png)\\n\\n\\n\\n第四章：路由聚合：取交集\\nCDN新增\\n![image-20220731143027256](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143027256.png)\\n\\n第五章：TCP/UDP\\n![image-20220731143305487](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143305487.png)\\n\\n第六章：难点：WWW+HTTP\\n\\nDNS域名解析\\t\\n![image-20220731143645217](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731143645217.png)\\n\\n\\n\\n<h3>计网大题重点</h3>\\n\\n![image-20220731144324262](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731144324262.png)\\n\\n路由协议，子网划分：BGP/OSPF/RIP跳数\\n\\n数据交换的分组交换方式：虚电路：面向连接\\n\\n中继器和集线器的差别：端口的个数 \\n\\nIPv4：重中之重 ABCDE五类地址\\t\\n\\nARP：IP转MAC地址\\tDHCP：动态ip地址的划分，回收\\tICMP：差错、控制报文（可不可达...）\\t\\n\\n应用层：HTTP与TCP的关系\\t\\n\\n**各个报文段需要记住的内容：HTTP/UDP/TCP/IP/MAC ** \\n\\n![image-20220731152658875](http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png)\\n\\n\\n\\nIP地址解析过程：\\n\\n![image-20220731172153990](D:\\\\jpgpng\\\\2022\\\\typora\\\\image-20220731172153990.png)\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/d62a8080d9f87556381e6d87f9dabae9.png\",\"articleTitle\":\"计算机网络笔记\",\"categoryName\":\"学习\",\"id\":61,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:29:02',NULL),
(1140,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"首先呢\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，也是时间、空间复杂度最稳定的一种算法\\n下面附上必背代码(诀窍是知道轴值即可):\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:37:31',NULL),
(1141,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，也是**时间、空间复杂度最稳定的一种算法**\\n</font>\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:39:21',NULL),
(1142,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，也是**时间、空间复杂度最稳定的一种算法**\\n</font>\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）\\n\\n因此，折半查找也应运而生惹！\\n下面就附上详细算法~\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:49:28',NULL),
(1143,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n</font>\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果（++查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ++）\\n\\n因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:52:59',NULL),
(1144,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n</font>\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 21:55:01',NULL),
(1145,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n\\n</font>\\n（正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)）\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 22:06:40',NULL),
(1146,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n\\n</font>\\n正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 22:07:37',NULL),
(1147,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n\\n</font>\\n正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 22:08:36',NULL),
(1148,'评论模块','修改','/admin/comments/review','com.minzheng.blog.controller.CommentController.updateCommentsReview','审核评论','[{\"idList\":[736],\"isReview\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','120.231.164.193','广东省珠海市 移动','2022-08-30 22:19:54',NULL),
(1149,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"2333333![封面.jpg](http://121.89.232.237:83/articles/23f1f18b7c9c41426ccf26692b3233ad.jpg)\\n\\n<font size=4>今天在朋友的帮助下终于解决了网站图片上传问题,\\n问题就出在了后端启动脚本上：\\n```bash\\n我原本使用的命令：\\ndocker build -t blog .  \\ndocker run --name blog --restart=always -p 8080:8080 -d blog  \\n\\nsh脚本中对应的命令：\\ndocker build -t $SERVER_NAME:$TAG .\\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\\n\\n```\\n\\n对应的sh脚本编写：\\n```shell\\n#源jar路径  \\nSOURCE_PATH=/usr/local/docker\\n#docker 镜像/容器名字或者jar名字 这里都命名为这个\\nSERVER_NAME=blog-springboot-0.0.1.jar\\nTAG=latest\\nSERVER_PORT=8080\\n#容器id\\nCID=$(docker ps | grep \\\"$SERVER_NAME\\\" | awk \'{print $1}\')\\n#镜像id\\nIID=$(docker images | grep \\\"$SERVER_NAME:$TAG\\\" | awk \'{print $3}\')\\nif [ -n \\\"$CID\\\" ]; then\\n  echo \\\"存在容器$SERVER_NAME, CID-$CID\\\"\\n  docker stop $CID\\n  docker rm $CID\\nfi\\n# 构建docker镜像\\nif [ -n \\\"$IID\\\" ]; then\\n  echo \\\"存在$SERVER_NAME:$TAG镜像，IID=$IID\\\"\\n  docker rmi $IID\\nelse\\n  echo \\\"不存在$SERVER_NAME:$TAG镜像，开始构建镜像\\\"\\n  cd $SOURCE_PATH\\n  docker build -t $SERVER_NAME:$TAG .\\nfi\\n# 运行docker容器\\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\\necho \\\"$SERVER_NAME容器创建完成\\\"\\n```\\n\\n对此，部署成功~\\n\\n</font>\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.27.40.87','广东省广州市 电信','2022-08-31 08:05:24',NULL),
(1150,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"2333333![封面.jpg](http://121.89.232.237:83/articles/23f1f18b7c9c41426ccf26692b3233ad.jpg)\\n\\n<font size=4>今天在朋友的帮助下终于解决了网站图片上传问题,\\n问题就出在了后端启动脚本上：\\n```bash\\n我原本使用的命令：\\ndocker build -t blog .  \\ndocker run --name blog --restart=always -p 8080:8080 -d blog  \\n\\nsh脚本中对应的命令：\\ndocker build -t $SERVER_NAME:$TAG .\\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\\n\\n```\\n\\n对应的sh脚本编写：\\n```shell\\n#源jar路径  \\nSOURCE_PATH=/usr/local/docker\\n#docker 镜像/容器名字或者jar名字 这里都命名为这个\\nSERVER_NAME=blog-springboot-0.0.1.jar\\nTAG=latest\\nSERVER_PORT=8080\\n#容器id\\nCID=$(docker ps | grep \\\"$SERVER_NAME\\\" | awk \'{print $1}\')\\n#镜像id\\nIID=$(docker images | grep \\\"$SERVER_NAME:$TAG\\\" | awk \'{print $3}\')\\nif [ -n \\\"$CID\\\" ]; then\\n  echo \\\"存在容器$SERVER_NAME, CID-$CID\\\"\\n  docker stop $CID\\n  docker rm $CID\\nfi\\n# 构建docker镜像\\nif [ -n \\\"$IID\\\" ]; then\\n  echo \\\"存在$SERVER_NAME:$TAG镜像，IID=$IID\\\"\\n  docker rmi $IID\\nelse\\n  echo \\\"不存在$SERVER_NAME:$TAG镜像，开始构建镜像\\\"\\n  cd $SOURCE_PATH\\n  docker build -t $SERVER_NAME:$TAG .\\nfi\\n# 运行docker容器\\ndocker run --name $SERVER_NAME -v /usr/local/upload:/usr/local/upload -d -p $SERVER_PORT:$SERVER_PORT $SERVER_NAME:$TAG\\necho \\\"$SERVER_NAME容器创建完成\\\"\\n```\\n\\n对此，部署成功~\\n\\n</font>\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/3f8cd4d711dea13b5ce5d6515e3b80a8.jpg\",\"articleTitle\":\"2022-08-11 重新部署\",\"categoryName\":\"部署\",\"id\":55,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[\"技术栈\"],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.27.40.87','广东省广州市 电信','2022-08-31 08:05:48',NULL),
(1151,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"4/18\\nC类题:\\n添加冻结用户功能√——>添加注销用户功能√——>添加修改密码功能√——>管理员用户界面设计\\n ——>管理图书界面设计、功能实现（增删改查）——>管理用户功能(增删改查)——>读者界面/读者借\\n书界面设计——>借书功能实现（是否借阅图书、是否归还、日期类、）\\n\\n去重：目标：防止出现用户名一样或者ID一样的用户 今日已完成√\\n\\n\\n4/27\\n\\nC类题：功能模块化：DAO、interface、implement(实现主要的功能-增删改查询图书、用户) \\n查询多条记录：运用泛型、哈希表的数据结构\\ndbutils:做新的功能界面时用，如update、query....\\n\\nDAO:通用的增删改方法、查询方法-获取一条或多条记录\\nBooksDAO:\\naddBook():增加一本书\\n\\n5.1\\n实现增添书籍\\n实现将数据库中所有书籍罗列到表格中，选中表格中的一条则可以进行删除、修改  \\n\\n增添图书√\\n罗列√\\n选中表格中的记录进行删除，修改\\n\\n读取书本类型，并根据不同字段进行分类\\nSELECT  DISTINCT TYPE 种类 FROM `books_info` √\\n\\n\\n5/5\\n```java\\npublic void checkAndAddNewType() {\\n\\t\\tString s = typetextField.getText();\\n\\t\\tint co = comboBox.getItemCount();\\n\\t\\tfor(int i=0;i<co;i++) {\\n\\t\\t\\tString item = comboBox.getItemAt(i).toString();\\n\\t\\t\\tif(s.equalsIgnoreCase(item)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tif(i==(co-1)) {\\n\\t\\t\\t\\t\\tSystem.out.println(\\\"新增图书类型为：\\\"+s);\\n\\t\\t\\t\\t\\tcomboBox.addItem(s);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n```\\n\\n\\n提升了新增图书种类的便捷性\\n\\n删除图书：当连续使用删除功能两次时只删掉了一本？ 已解决√\\n\\n5/9\\n\\n```Java\\nif(!(as.equals(\\\"\\\"))) {\\n\\t\\t\\tamount = Integer.parseInt(as);\\n\\t\\t}else {\\n\\t\\t\\tamount = 0;\\n\\t\\t}\\n```\\n\\n\\n查询书籍：可根据书本类型进行分类\\n已修正√\\n目前问题：分类后选择修改删除仍然是第一条的记录\\n已修正 √\\t\\n\\n```Java\\nList listSel;\\n\\tif(!(comboBox.getSelectedItem().toString().equalsIgnoreCase(\\\"全部书籍\\\"))) {\\n\\t\\tlistSel = typeColList;\\n}else {\\n\\t\\tlistSel = list;\\n\\t\\t\\t}\\n```\\n\\n\\n设计普通用户的界面：\\n\\n5/11\\n\\n正在实现：选中一个图书节点时，显示出该节点信息 已实现√\\n已实现：读者基本查书栏\\n\\n\\n5/16\\n15:43 搜索功能终于完善......\\n\\n\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",\\\"呵1\\\") WHERE `user_Name`=\\\"234324\\\"\\n\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",?) WHERE `user_Name`=?\\n\\n设计借阅功能\\n每个读者借了一本书后便不能再次借阅该书，直到已经归还该书（ Boolean isBack ?）\\n\\n--------\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",?) WHERE `user_id`= ? ;\\nUPDATE `userinfo` SET `owned_bk`= CONCAT(`owned_bk`,\\\"\\\\n\\\", ?) WHERE `user_id`=?\\n\\n\\nSELECT CONCAT_WS(\',1\',\'11\',\'22\',NULL)\\nowned_bk 如何删减？ update( )?\\n如何展示owned_bk中的每一项记录？\\n\\n管理员：在借书记录中展示每一位读者的所有借书记录\\n每条记录展示是否归还图书？\\n\\n借书记录中选出所有未归还记录中超过特定时段（1天，5天....）未归还记录生成摧还名单\\n管理员则可以发送催还消息，读者登录后就可以收到该条消息\\n\\n12:24：修改图书功能偶遇BUG? 连续操作修改图书类型时会报错\\n更新功能：模糊查询读者 √\\n\\n借阅书籍问题：如何将每个用户的每条借阅记录分开，最后罗列到一张表上？\\n方案（未实现）：1（未实现）、通过sql语句定义函数/存储过程，将单个用户的借阅记录分段到同一张表上的多条记录，方便接下来的实现操作\\n2（较易，实现中）、建立一张新表，将书名，借阅时间、借阅者、归还状态在调用借书、还书功能时进行同步记录，进行管理操作时也可同步\\n\\n图书记录也许可以根据未归还和已归还进行分类？筛选出未归还的记录形成催交名单\\nSELECT `borrower`, `borrowed_book`,`borrow_date`,`isReturn` FROM `borrowrecord` WHERE `borrower` LIKE \\\"%(%\\\"\\n\\n5/24\\n个人借阅图书表格初步完成√\\n读书笔记完成√\\n\\n图书维护的相关BUG:更改图书类别成功会出现新的一条相关记录\\n\\n5/24BUG已解决：通过固定索引使得点击修改后 后来的选中项不会被修改\\n归还图书（）：图书归还索引尚且只有书名，不明确（万一有多本书名一样的书呢？）\\n又出现BUG:删除图书报错？\\n\\n5/31 更新：可查询历史借阅记录了\\n\\n6/2\\n\\nUPDATE `userinfo`\\nSET `owned_bk`=REPLACE(`owned_bk`,\'呵呵\',\'\')\\nWHERE `user_id`=\'04191918\'\\n\\n6/3 更新了判断是否借阅该书、修改了还书功能中的移除字段\\n修改了没有读取到用户密码、持有书籍的BUG\\n\\n待修改：对借阅记录中已归还\\\\待归还进行分类\\n\\n6/4 \\n读取生成的图片\\n1生成\\n2保存\\n3读取\\n4展示\\n\\n6/5\\n对于借阅日期进行分类，统计每个借阅日期的借阅量\\n\\nUPDATE `userinfo` SET `borrow_time`=0\\n置空一整列\\n\\nSELECT COUNT(borrow_date) FROM `borrowrecord` GROUP BY `borrow_date`\\n分类\\n\\nUPDATE `books_info` SET `getbor_Times`=5\\n\\nUPDATE `userinfo` SET `borrow_time`=4\\n\\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times`;\\n\\n6/7\\n1.改进了读者排行榜排序位次\\n2.改进了最佳借阅量图书榜排序位次\\n3.优化了借阅表部分展示\\n\\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times` DESC\\n\\nSELECT `borrow_time` ,`user_Name` FROM `userinfo` ORDER BY `borrow_time` DESC\\n\\n6.11\\nSELECT COUNT(borrow_date),`borrow_date` FROM `borrowrecord` GROUP BY `borrow_date` ORDER BY `borrow_date` ASC \\n---\\n\\n数据库设计：\\nSQL建表语句\\n\\n借阅记录表：\\n```mysql\\nCREATE TABLE `borrowrecord` (\\n  `borrower` varchar(20) DEFAULT NULL COMMENT \'借阅者\',\\n  `borrowed_book` varchar(20) DEFAULT NULL COMMENT \'借阅书名\',\\n  `borrow_date` date DEFAULT NULL COMMENT \'借阅日期\',\\n  `isReturn` varchar(10) DEFAULT NULL COMMENT \'图书是否归还\',\\n  `whole_record` longtext COMMENT \'完整借阅记录\'\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\\n\\n\\n用户信息表：\\nCREATE TABLE `userinfo` (\\n  `user_Name` varchar(20) NOT NULL COMMENT \'用户名\',\\n  `user_type` varchar(20) NOT NULL COMMENT \'用户类型\',\\n  `user_id` varchar(20) NOT NULL COMMENT \'用户id\',\\n  `user_password` varchar(15) NOT NULL COMMENT \'密码\',\\n  `user_about` varchar(30) DEFAULT NULL COMMENT \'关于用户\',\\n  `sign_date` datetime DEFAULT NULL COMMENT \'注册日期\',\\n  `user_Sta` varchar(10) DEFAULT NULL COMMENT \'用户状态\',\\n  `record` longtext COMMENT \'借阅记录\',\\n  `owned_bk` longtext COMMENT \'持有书籍\',\\n  `borrow_time` bigint(10) DEFAULT NULL COMMENT \'借阅次数\',\\n  PRIMARY KEY (`user_Name`,`user_type`,`user_id`,`user_password`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\\n\\n\\n图书信息表：\\nCREATE TABLE `books_info` (\\n  `book_id` varchar(7) NOT NULL COMMENT \'图书编号\',\\n  `book_name` varchar(20) NOT NULL COMMENT \'书名\',\\n  `type` varchar(20) NOT NULL COMMENT \'类型\',\\n  `author` varchar(20) DEFAULT NULL COMMENT \'作者\',\\n  `date` datetime DEFAULT NULL COMMENT \'入库日期\',\\n  `amount` bigint(20) DEFAULT NULL COMMENT \'数量\',\\n  `about` mediumtext COMMENT \'书的简介\',\\n  `publisher` varchar(20) DEFAULT NULL COMMENT \'出版社\',\\n  `getbor_Times` bigint(10) DEFAULT NULL COMMENT \'被借阅次数\',\\n  PRIMARY KEY (`book_id`,`book_name`,`type`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\\n\\n```\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/3065741dd3beb39304f40b7b47d6cf3a.jpg\",\"articleTitle\":\"2022-08-30 大二所写的图书管理系统的编写日志..\",\"categoryName\":\"技术栈\",\"id\":56,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.27.40.87','广东省广州市 电信','2022-08-31 08:17:32',NULL),
(1152,'角色模块','新增或修改','/admin/role','com.minzheng.blog.controller.RoleController.saveOrUpdateRole','保存或更新角色','[{\"menuIdList\":[1],\"roleLabel\":\"guest\",\"roleName\":\"后台游客\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.30.165.207','广东省广州市 电信','2022-09-02 10:28:14',NULL),
(1153,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"kk\",\"roleIdList\":[2,4],\"userInfoId\":1007}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.30.165.207','广东省广州市 电信','2022-09-02 10:29:16',NULL),
(1154,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"MITT\\n\",\"articleCover\":\"\",\"articleTitle\":\"2022-09-02 一篇测试\",\"categoryName\":\"测试分类\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.30.165.207','广东省广州市 电信','2022-09-02 10:30:59',NULL),
(1155,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"MITT\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"2022-09-02 一篇测试\",\"categoryName\":\"测试分类\",\"id\":63,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.30.165.207','广东省广州市 电信','2022-09-02 10:31:26',NULL),
(1156,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"MITT\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"2022-09-02 一篇测试\",\"categoryName\":\"测试分类\",\"id\":63,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.30.165.207','广东省广州市 电信','2022-09-02 10:32:05',NULL),
(1157,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\n\\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\\n\\n空间复杂度计算\\n\\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\\n\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\n\\nloga(M/N)=logaM - logaN\\n\\n###### 3/13\\n\\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\\n\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\n\\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\\n\\n###### 3/14\\n\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\n\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\n\\n最好情况：均在表尾插入/删除元素\\n\\n最坏：在表头插入、删除元素（移动次数多）\\n\\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\\n\\n动态存储\\n\\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\\n\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\n\\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\\n\\n复杂度为O(1)\\n\\n```c\\n//头插法 3/15\\nvoid insertListHead(LinkList &l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n    l->next =NULL; //可能有那啥的脏数据\\n\\tNode* newNode;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\tnewNode->next = l->next;\\n\\t\\tl->next = newNode;\\n\\t}\\n}\\n\\n//尾插法 3/15\\nvoid insertListTail(LinkList& l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n\\tNode* newNode;\\n\\tNode* tmp =l;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\ttmp->next = newNode;\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\n\\t}\\n    tmp->next =NULL;\\n}\\n\\n```\\n\\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\\n\\n\\n\\n增删链表效率高于顺序表\\n\\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\\n\\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\\n\\n###### 3/18\\n\\n第一章：\\n\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\n\\nP4:综合应用题：\\n\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\n\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\n\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\n\\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\\n\\n\\n\\nP18:综合应用题：\\n\\n01:\\n\\n```apl\\nif(length<1){\\n\\treturn false;\\n}\\nElemtype del = data[length-1];\\nElemtype tmp;\\nint pos=0;\\nfor(int i=0;i<length-1;i++){\\n\\ttmp = data[i];\\n\\tif(data[i]<tmp){\\n\\t\\ttmp = data[i];\\n\\t\\tpos++;\\n\\t}\\n}\\n\\tdata[pos] = del;\\n\\tlength--;\\n\\n\\treturn true;\\n```\\n\\n02:\\n\\n```bash\\nvoid Reverse(Sqlist &l){\\n\\tElemType tmp;\\n\\tint pos = l.length-1;\\n\\tfor(i=0;i<l.length/2;i++){\\n\\t\\ttmp = l.data[i];\\n\\t\\tl.data[i]= l.data[pos];\\n\\t\\tpos--;\\n\\t\\tl.data[pos] = tmp;\\n\\t}\\n}\\n```\\n\\n\\n\\n错题总结：\\n\\nP17:\\n\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\n\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\n\\n08：线性表删除第i个元素移动n-i个元素即可\\n\\n###### 3/21\\n\\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\\n\\n栈的出栈顺序数量的计算：卡特兰数\\n\\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\\n\\ntop++ 和++top的区别\\n\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\n\\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\\n\\n栈满：top==MaxSize\\n\\n共享栈栈满条件：top1+1==top2\\n\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\n\\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\\n\\n括号匹配流程图\\n\\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\\n\\n用栈实现括号匹配：\\n\\n具体代码：\\n\\n```c\\n#define Maxsize 10            //定义栈中元素的\\ntypedef struct{\\nchar data[MaxSize];        //静态数组存放栈\\nint top;                    //栈顶指针\\n}SqStack;\\n//初始化栈\\nvoid InitStack(Sqstack &S)\\n//判断栈是否为空\\nbool stackEmpty(SqStack S)\\n//新元素入栈\\nbool Push(SqStack &S,char x)\\n//栈顶元素出栈，用x返回\\nbool Pop(SqStack &s,char &x)\\n\\n    //有栈的情况\\nbool bracketCheck(char str[],int length) {\\nSqStack s;\\nInitStack(S); //初始化一个栈\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\n}else {\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\nPop(S,topElem);//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return StackEmpty(S);\\n}\\n\\nbool compare(int x,int y){\\n    if(x!=(y-1)){\\n        return true;\\n    }\\n    return false;\\n}\\n       //无栈的情况\\nbool bracketCheck1(char str[],int length) {\\n int MaxSize = length;\\nchar data[MaxSize];        //静态数组存放栈\\nint top=-1;  \\n\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n    if(compare(top,length)){\\n\\t\\ttop++;\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\n    }\\n}else {\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\ntopElem = data[top];\\n    top--;//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return top==-1;\\n}\\n    \\n    \\n    \\n```\\n\\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\\n\\n###### 3/23~24\\n\\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\\n\\n程序输出结果只能是第一种（唯一性、确定性）\\n\\n后缀表达式的手算方法：\\n\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\n\\n注意：两个操作数的左右顺序\\n\\n机算：\\n\\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\\n\\n用栈实现后缀表达式的计算：\\n\\n①从左往右扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n----\\n\\n前缀表达式：\\n\\n**中缀表达式转前缀表达式（手算）**\\n\\n① 确定中缀表达式中各个运算符的运算顺序\\n\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\n\\n③ 如果还有运算符没被处理，就继续 ②\\n\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\n\\n机算：\\n\\n用栈实现前缀表达式的计算：\\n\\n①从右往左扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\\n\\n\\n\\n中->前\\n\\n注：先弹出的是左操作数，后弹出的是右操作数\\n\\n\\n\\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\\n\\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\\n\\n上三角按行存放 <===> 下三角按列存放\\n\\n下三角按行存<====>上三角按列存\\n\\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\\n\\n###### 4/1\\n\\n串\\n\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\n\\n 高四位 低四位\\n\\na 0110\\t0001  \\n\\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\\n\\nKMP：\\n\\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\\n\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\n\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\n\\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\\n\\n**nextVal数组求法**，先让第一位=0\\n\\n###### 4/3~4/5\\n\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\n\\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\\n\\ni<=n/2是分支结点，i>n/2是叶子结点\\n\\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\\n\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\n\\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\\n\\n线索化二叉树\\n\\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\\n\\n----\\n\\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\\n\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\n\\n###### 4/6\\n\\n哈夫曼树：最优二叉树\\n\\n带权路径最小的二叉树\\n\\n**并查集代码**\\n\\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\\n\\n最坏情况下时间复杂度与树的高度h相关\\n\\n优化合并操作 小树并入大树\\n\\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\\n\\nfind()最坏时间复杂度变为O(logn)\\n\\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\\n\\n树越矮，时间复杂度越低\\n\\nfind优化操作\\n\\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\\n\\n```c\\n/*int Find(int nums[],int index){\\n    int root = index;\\n    while(nums[root]>=0){\\n        root = nums[root];\\n    }\\n    while(index!=root){\\n        int record = root;\\n        nums[index] = root;\\n        root = record;\\n    }\\n    return root;\\n}*/\\n//使树的高度不超过O(a(n))的数量级\\n\\n\\n#pragma once\\n#define Size 100\\nint UFSets[Size];\\n\\n//初始化并查集\\nvoid Initial(int S[]) {\\n\\tfor (int i = 0;i < Size;i++) {\\n\\t\\tS[i] = -1;\\n\\t}\\n}\\n\\n//查找操作，找x的根节点\\nint Find(int s[], int x) {\\n\\twhile (s[x]>0)\\n\\t{\\n\\t\\tx = s[x];\\n\\t}\\n\\treturn x;\\n}\\n\\n//合并操作 根节点统一  树高<=logn + 1\\nvoid Union(int s[], int root1, int root2) {\\n\\tif (root1 == root2) {\\n\\t\\treturn ;\\n\\t}\\n\\tif (s[root2] > s[root1]) { //root2是小树\\n\\t\\ts[root1] += s[root2];\\n\\t\\ts[root2] = root1;\\n\\t}\\n\\telse {\\n\\t\\ts[root2] += s[root1];\\n\\t\\ts[root1] = root2;\\n\\t}\\n}\\n\\n```\\n\\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\\n\\n错题：\\n\\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\\n\\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\\n\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\n\\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\\n\\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\\n\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\n\\n###### 4/16\\n\\n图的顶点个数 = 图的阶数\\n\\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\\n\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\n\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\n\\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\\n\\n邻接表、邻接矩阵的**区别**\\n\\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\\n\\n---\\n\\n# 4/18\\n\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\n\\n```c\\n// 邻接表中表对应的链表的顶点\\ntypedef struct _ENode\\n{\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\n}ENode, *PENode;\\n\\n// 邻接表中表的顶点\\ntypedef struct _VNode\\n{\\n    char data;              // 顶点信息\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\n}VNode;\\n\\n// 邻接表\\ntypedef struct _LGraph\\n{\\n    int vexnum;             // 图的顶点的数目\\n    int edgnum;             // 图的边的数目\\n    VNode vexs[MAX];\\n}LGraph;\\n\\n```\\n\\n\\n\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\n\\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\\n\\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\\n\\n访问各个顶点所需时间+访问各边所需时间\\n\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\n\\n**深度优先遍历：**和树的**先根**遍历类似\\n\\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\\n\\n---\\n\\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\\n\\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\\n\\n考频只有一题的选择：\\n\\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\\n\\n---\\n\\n关键路径\\n\\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\\n\\n4/24复习\\n\\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\\n\\ne(i) :活动ai最早开始的时间\\n\\nl(i) :活动ai最晚开始的时间\\n\\nvl(k)：活动vk最迟发生时间 vek:最早\\n\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\n\\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\\n\\n差值为0的就是关键路径\\n\\n\\n\\n\\n\\n#### 5 月\\n\\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\\n\\n查找判定树\\n\\n判断「平衡二叉树」的 2 个条件：\\n\\n- **1. 是「二叉排序树」**\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\n\\n二叉排序树\\n\\n平衡二叉树\\n\\n二叉搜索树\\n\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\n\\n---\\n\\n<h3>折半查找：</h3>\\n\\n只适用于有序的顺序表\\n\\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\\n\\n\\n\\n折半查找构成了二叉排序树\\n\\n可以把折半查找看成一颗二叉排序树\\n\\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\\n\\n二叉排序树删除操作\\n\\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\\n\\n7.3.3中要重点了解的例1~3，例4\\n\\n**简单路径定义：**\\n\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\n\\n---\\n\\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\\n\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\n\\n\\n\\n**红黑树性质**\\n\\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\\n\\n红黑树插入\\n\\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\\n\\n看“叔”脸色\\n\\n\\n\\n红黑树性质+插入总结：\\n\\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\\n\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\n\\n**B树**\\n\\n特性\\n\\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\\n\\n\\n\\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\\n\\n树的高度\\n\\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\\n\\n\\n\\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\\n\\n\\n\\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\\n\\n（上下限：除了根节点外，结点关键字个数n: )\\n\\n\\n\\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\\n\\nB树/B+树类比\\n\\n---\\n\\n**散列（哈希表）**\\n\\n拉链法：同义词串成一个链表\\n\\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\\n\\n着重考察：线性探测法、平方探测法\\n\\n\\n\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\\n\\n总结\\n\\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\\n\\n装填因子概念也需重视\\n\\nQuestion1:\\n\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\n\\n(1) 请画出所构造的散列表。\\n\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\n\\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\\n\\n\\n\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\n\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\n\\n---\\n\\n##### 5/23 排序算法\\n\\n插入排序法\\n\\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\\n\\n---\\n\\n##### 5/27 快速排序\\n\\n时间、空间复杂度与递归层次有关\\n\\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\\n\\n**快排时间效率分析：**\\n\\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\\n\\n---\\n\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\n\\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\\n\\n---\\n\\n###### **8.3.3**\\n\\n---\\n\\n第七题：**x趟排序应产生x个分界线。**\\n\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\n\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\n\\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\\n\\n---\\n\\n第9题：关于快排的**完美**划分\\n\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\n\\n排序速度最慢：原数组已基本有序\\n\\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\\n\\n##### 5/29 堆排序\\n\\n最主要的算法还是向下调整HeadAdjust()函数\\n\\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\\n\\n\\n\\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\\n\\n堆排序的空间复杂度：常数级 O(1)\\n\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\n\\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\\n\\n堆的插入和删除\\n\\n考试可能考比较次数\\n\\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\\n\\n\\n\\n##### 5/30 归并排序+基数排序\\n\\n二路归并：把两个已经有序的序列合并成一个\\n\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\n\\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\\n\\n**基数排序：**代码不怎么考，主要手算模拟即可\\n\\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\\n\\n---\\n\\n排序算法的空间、时间复杂度\\n\\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\\n\\n\\n\\n5/31外部排序\\n\\n\\n\\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\\n\\nr<=K^h-1 ,树的结点最大的一层\\n\\n要归并的数据都是分块读入内存的\\n\\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\\n\\n\\n\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\n\\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\\n\\n\\n\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\n\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\n\\n##### 6/2 结尾\\n\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\n\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\n\\n考查手算模拟即可\\n\\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\\n\\n---\\n\\n**置换选择排序：**减少初始归并段的个数\\n\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\n\\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\\n\\n\\n\\n---\\n\\n**最佳归并树**\\n\\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\\n\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\n\\nk叉最佳归并树：\\n\\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\\n\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\n\\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\\n\\n---\\n\\n<h3>**各种排序算法的性质总结**</h3>\\n\\n\\n\\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\\n\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\n\\n\\n\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\n\\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\\n\\n---\\n\\n### 8/1 算法题\\n\\n数组题解题框架：\\n\\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"408数据结构所有笔记[2022-3.5~6.5] \",\"categoryName\":\"学习\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.25.172.109','广东省 电信','2022-09-03 18:15:10',NULL),
(1158,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\n\\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\\n\\n空间复杂度计算\\n\\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\\n\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\n\\nloga(M/N)=logaM - logaN\\n\\n###### 3/13\\n\\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\\n\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\n\\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\\n\\n###### 3/14\\n\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\n\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\n\\n最好情况：均在表尾插入/删除元素\\n\\n最坏：在表头插入、删除元素（移动次数多）\\n\\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\\n\\n动态存储\\n\\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\\n\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\n\\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\\n\\n复杂度为O(1)\\n\\n```c\\n//头插法 3/15\\nvoid insertListHead(LinkList &l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n    l->next =NULL; //可能有那啥的脏数据\\n\\tNode* newNode;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\tnewNode->next = l->next;\\n\\t\\tl->next = newNode;\\n\\t}\\n}\\n\\n//尾插法 3/15\\nvoid insertListTail(LinkList& l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n\\tNode* newNode;\\n\\tNode* tmp =l;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\ttmp->next = newNode;\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\n\\t}\\n    tmp->next =NULL;\\n}\\n\\n```\\n\\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\\n\\n\\n\\n增删链表效率高于顺序表\\n\\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\\n\\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\\n\\n###### 3/18\\n\\n第一章：\\n\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\n\\nP4:综合应用题：\\n\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\n\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\n\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\n\\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\\n\\n\\n\\nP18:综合应用题：\\n\\n01:\\n\\n```c\\nif(length<1){\\n\\treturn false;\\n}\\nElemtype del = data[length-1];\\nElemtype tmp;\\nint pos=0;\\nfor(int i=0;i<length-1;i++){\\n\\ttmp = data[i];\\n\\tif(data[i]<tmp){\\n\\t\\ttmp = data[i];\\n\\t\\tpos++;\\n\\t}\\n}\\n\\tdata[pos] = del;\\n\\tlength--;\\n\\n\\treturn true;\\n```\\n\\n02:\\n\\n```bash\\nvoid Reverse(Sqlist &l){\\n\\tElemType tmp;\\n\\tint pos = l.length-1;\\n\\tfor(i=0;i<l.length/2;i++){\\n\\t\\ttmp = l.data[i];\\n\\t\\tl.data[i]= l.data[pos];\\n\\t\\tpos--;\\n\\t\\tl.data[pos] = tmp;\\n\\t}\\n}\\n```\\n\\n\\n\\n错题总结：\\n\\nP17:\\n\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\n\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\n\\n08：线性表删除第i个元素移动n-i个元素即可\\n\\n###### 3/21\\n\\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\\n\\n栈的出栈顺序数量的计算：卡特兰数\\n\\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\\n\\ntop++ 和++top的区别\\n\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\n\\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\\n\\n栈满：top==MaxSize\\n\\n共享栈栈满条件：top1+1==top2\\n\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\n\\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\\n\\n括号匹配流程图\\n\\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\\n\\n用栈实现括号匹配：\\n\\n具体代码：\\n\\n```c\\n#define Maxsize 10            //定义栈中元素的\\ntypedef struct{\\nchar data[MaxSize];        //静态数组存放栈\\nint top;                    //栈顶指针\\n}SqStack;\\n//初始化栈\\nvoid InitStack(Sqstack &S)\\n//判断栈是否为空\\nbool stackEmpty(SqStack S)\\n//新元素入栈\\nbool Push(SqStack &S,char x)\\n//栈顶元素出栈，用x返回\\nbool Pop(SqStack &s,char &x)\\n\\n    //有栈的情况\\nbool bracketCheck(char str[],int length) {\\nSqStack s;\\nInitStack(S); //初始化一个栈\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\n}else {\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\nPop(S,topElem);//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return StackEmpty(S);\\n}\\n\\nbool compare(int x,int y){\\n    if(x!=(y-1)){\\n        return true;\\n    }\\n    return false;\\n}\\n       //无栈的情况\\nbool bracketCheck1(char str[],int length) {\\n int MaxSize = length;\\nchar data[MaxSize];        //静态数组存放栈\\nint top=-1;  \\n\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n    if(compare(top,length)){\\n\\t\\ttop++;\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\n    }\\n}else {\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\ntopElem = data[top];\\n    top--;//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return top==-1;\\n}\\n    \\n    \\n    \\n```\\n\\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\\n\\n###### 3/23~24\\n\\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\\n\\n程序输出结果只能是第一种（唯一性、确定性）\\n\\n后缀表达式的手算方法：\\n\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\n\\n注意：两个操作数的左右顺序\\n\\n机算：\\n\\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\\n\\n用栈实现后缀表达式的计算：\\n\\n①从左往右扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n----\\n\\n前缀表达式：\\n\\n**中缀表达式转前缀表达式（手算）**\\n\\n① 确定中缀表达式中各个运算符的运算顺序\\n\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\n\\n③ 如果还有运算符没被处理，就继续 ②\\n\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\n\\n机算：\\n\\n用栈实现前缀表达式的计算：\\n\\n①从右往左扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\\n\\n\\n\\n中->前\\n\\n注：先弹出的是左操作数，后弹出的是右操作数\\n\\n\\n\\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\\n\\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\\n\\n上三角按行存放 <===> 下三角按列存放\\n\\n下三角按行存<====>上三角按列存\\n\\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\\n\\n###### 4/1\\n\\n串\\n\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\n\\n 高四位 低四位\\n\\na 0110\\t0001  \\n\\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\\n\\nKMP：\\n\\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\\n\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\n\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\n\\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\\n\\n**nextVal数组求法**，先让第一位=0\\n\\n###### 4/3~4/5\\n\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\n\\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\\n\\ni<=n/2是分支结点，i>n/2是叶子结点\\n\\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\\n\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\n\\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\\n\\n线索化二叉树\\n\\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\\n\\n----\\n\\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\\n\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\n\\n###### 4/6\\n\\n哈夫曼树：最优二叉树\\n\\n带权路径最小的二叉树\\n\\n**并查集代码**\\n\\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\\n\\n最坏情况下时间复杂度与树的高度h相关\\n\\n优化合并操作 小树并入大树\\n\\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\\n\\nfind()最坏时间复杂度变为O(logn)\\n\\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\\n\\n树越矮，时间复杂度越低\\n\\nfind优化操作\\n\\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\\n\\n```c\\n/*int Find(int nums[],int index){\\n    int root = index;\\n    while(nums[root]>=0){\\n        root = nums[root];\\n    }\\n    while(index!=root){\\n        int record = root;\\n        nums[index] = root;\\n        root = record;\\n    }\\n    return root;\\n}*/\\n//使树的高度不超过O(a(n))的数量级\\n\\n\\n#pragma once\\n#define Size 100\\nint UFSets[Size];\\n\\n//初始化并查集\\nvoid Initial(int S[]) {\\n\\tfor (int i = 0;i < Size;i++) {\\n\\t\\tS[i] = -1;\\n\\t}\\n}\\n\\n//查找操作，找x的根节点\\nint Find(int s[], int x) {\\n\\twhile (s[x]>0)\\n\\t{\\n\\t\\tx = s[x];\\n\\t}\\n\\treturn x;\\n}\\n\\n//合并操作 根节点统一  树高<=logn + 1\\nvoid Union(int s[], int root1, int root2) {\\n\\tif (root1 == root2) {\\n\\t\\treturn ;\\n\\t}\\n\\tif (s[root2] > s[root1]) { //root2是小树\\n\\t\\ts[root1] += s[root2];\\n\\t\\ts[root2] = root1;\\n\\t}\\n\\telse {\\n\\t\\ts[root2] += s[root1];\\n\\t\\ts[root1] = root2;\\n\\t}\\n}\\n\\n```\\n\\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\\n\\n错题：\\n\\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\\n\\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\\n\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\n\\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\\n\\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\\n\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\n\\n###### 4/16\\n\\n图的顶点个数 = 图的阶数\\n\\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\\n\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\n\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\n\\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\\n\\n邻接表、邻接矩阵的**区别**\\n\\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\\n\\n---\\n\\n# 4/18\\n\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\n\\n```c\\n// 邻接表中表对应的链表的顶点\\ntypedef struct _ENode\\n{\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\n}ENode, *PENode;\\n\\n// 邻接表中表的顶点\\ntypedef struct _VNode\\n{\\n    char data;              // 顶点信息\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\n}VNode;\\n\\n// 邻接表\\ntypedef struct _LGraph\\n{\\n    int vexnum;             // 图的顶点的数目\\n    int edgnum;             // 图的边的数目\\n    VNode vexs[MAX];\\n}LGraph;\\n\\n```\\n\\n\\n\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\n\\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\\n\\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\\n\\n访问各个顶点所需时间+访问各边所需时间\\n\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\n\\n**深度优先遍历：**和树的**先根**遍历类似\\n\\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\\n\\n---\\n\\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\\n\\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\\n\\n考频只有一题的选择：\\n\\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\\n\\n---\\n\\n关键路径\\n\\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\\n\\n4/24复习\\n\\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\\n\\ne(i) :活动ai最早开始的时间\\n\\nl(i) :活动ai最晚开始的时间\\n\\nvl(k)：活动vk最迟发生时间 vek:最早\\n\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\n\\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\\n\\n差值为0的就是关键路径\\n\\n\\n\\n\\n\\n#### 5 月\\n\\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\\n\\n查找判定树\\n\\n判断「平衡二叉树」的 2 个条件：\\n\\n- **1. 是「二叉排序树」**\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\n\\n二叉排序树\\n\\n平衡二叉树\\n\\n二叉搜索树\\n\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\n\\n---\\n\\n<h3>折半查找：</h3>\\n\\n只适用于有序的顺序表\\n\\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\\n\\n\\n\\n折半查找构成了二叉排序树\\n\\n可以把折半查找看成一颗二叉排序树\\n\\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\\n\\n二叉排序树删除操作\\n\\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\\n\\n7.3.3中要重点了解的例1~3，例4\\n\\n**简单路径定义：**\\n\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\n\\n---\\n\\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\\n\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\n\\n\\n\\n**红黑树性质**\\n\\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\\n\\n红黑树插入\\n\\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\\n\\n看“叔”脸色\\n\\n\\n\\n红黑树性质+插入总结：\\n\\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\\n\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\n\\n**B树**\\n\\n特性\\n\\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\\n\\n\\n\\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\\n\\n树的高度\\n\\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\\n\\n\\n\\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\\n\\n\\n\\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\\n\\n（上下限：除了根节点外，结点关键字个数n: )\\n\\n\\n\\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\\n\\nB树/B+树类比\\n\\n---\\n\\n**散列（哈希表）**\\n\\n拉链法：同义词串成一个链表\\n\\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\\n\\n着重考察：线性探测法、平方探测法\\n\\n\\n\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\\n\\n总结\\n\\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\\n\\n装填因子概念也需重视\\n\\nQuestion1:\\n\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\n\\n(1) 请画出所构造的散列表。\\n\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\n\\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\\n\\n\\n\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\n\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\n\\n---\\n\\n##### 5/23 排序算法\\n\\n插入排序法\\n\\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\\n\\n---\\n\\n##### 5/27 快速排序\\n\\n时间、空间复杂度与递归层次有关\\n\\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\\n\\n**快排时间效率分析：**\\n\\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\\n\\n---\\n\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\n\\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\\n\\n---\\n\\n###### **8.3.3**\\n\\n---\\n\\n第七题：**x趟排序应产生x个分界线。**\\n\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\n\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\n\\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\\n\\n---\\n\\n第9题：关于快排的**完美**划分\\n\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\n\\n排序速度最慢：原数组已基本有序\\n\\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\\n\\n##### 5/29 堆排序\\n\\n最主要的算法还是向下调整HeadAdjust()函数\\n\\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\\n\\n\\n\\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\\n\\n堆排序的空间复杂度：常数级 O(1)\\n\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\n\\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\\n\\n堆的插入和删除\\n\\n考试可能考比较次数\\n\\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\\n\\n\\n\\n##### 5/30 归并排序+基数排序\\n\\n二路归并：把两个已经有序的序列合并成一个\\n\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\n\\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\\n\\n**基数排序：**代码不怎么考，主要手算模拟即可\\n\\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\\n\\n---\\n\\n排序算法的空间、时间复杂度\\n\\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\\n\\n\\n\\n5/31外部排序\\n\\n\\n\\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\\n\\nr<=K^h-1 ,树的结点最大的一层\\n\\n要归并的数据都是分块读入内存的\\n\\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\\n\\n\\n\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\n\\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\\n\\n\\n\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\n\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\n\\n##### 6/2 结尾\\n\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\n\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\n\\n考查手算模拟即可\\n\\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\\n\\n---\\n\\n**置换选择排序：**减少初始归并段的个数\\n\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\n\\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\\n\\n\\n\\n---\\n\\n**最佳归并树**\\n\\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\\n\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\n\\nk叉最佳归并树：\\n\\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\\n\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\n\\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\\n\\n---\\n\\n<h3>**各种排序算法的性质总结**</h3>\\n\\n\\n\\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\\n\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\n\\n\\n\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\n\\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\\n\\n---\\n\\n### 8/1 算法题\\n\\n数组题解题框架：\\n\\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"408数据结构所有笔记[2022-3.5~6.5] \",\"categoryName\":\"学习\",\"id\":59,\"isTop\":1,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.25.172.109','广东省 电信','2022-09-03 18:18:09',NULL),
(1159,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"kk\",\"roleIdList\":[4],\"userInfoId\":1007}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:11:40',NULL),
(1160,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n\\n</font>\\n正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:12:32',NULL),
(1161,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"<font size=5>首先呢\\n假如在408算法题遇到了数组首先需要进行升序/降序的情况该怎么办？我们的目标是追求在最短的时间内完成排序，那么\\n\\n考试必备的应该是快排了，这种算法的时间复杂度在所有算法平均复杂度为O(n*logn)，==也是**时间、空间复杂度最稳定的一种算法**==\\n\\n</font>\\n正所谓，遇事不决用快排![dogge](https://static.talkxj.com/emoji/goutou.jpg)\\n\\n### ++下面附上快排必背代码(诀窍是知道轴值即可):++\\n\\n```c++\\n void Qsort(int A[], L, R){      //a数组保存数据，L和R是边界\\n   if (L>=R) return;             //当前区间元素个数<=1则退出\\n   int key, i=L, j=R;            //i和j是左右两个数组下标移动\\n   把a数组中随机一个元素和A[L]交换  //快排优化，使得基准值的选取随机\\n   key=A[L];                    //key作为枢值参与比较\\n   while (i<j){\\n      while (i<j && A[j]>key)\\n          j--;\\n      while (i<j && A[i]<=key)\\n          i++;\\n      if (i<j)\\n          swap(A[i], A[j]);      //交换A[i]和A[j]\\n   }\\n   swap(A[L], A[i]);\\n   Qsort(A, L, i-1);         //递归处理左区间\\n   Qsort(A, i+1, R);          //递归处理右区间\\n      }\\nvoid ans(int A[], B[], n){\\n   for (int i=0; i<n; i++){\\n      C[i]=A[i];\\n      C[n+i]=B[i];\\n   }\\n   Qsort(C, 0, 2n-1);            //快速排序处理C[0]~C[2n-1]\\n   cout<<C[n-1];                //输出C[n-1]\\n}\\n```\\n\\n---\\n\\n<font size=4>什么？要在有序数组中以最小的时间代价找到最中间的数？这种算法的原理便类似于我们小时候玩的“猜数”游戏：玩法是在a和b中随便选一个数，然后答案的作者回答这个数是比目标的数大了还是小了，因此猜测者便可以进一步的锁定这个数的范围进行下一步猜测。而猜测次数最少的情况则是每次只猜a~b范围中最居中的数，以此达到查找范围直接减半的效果</font>\\n~~（查找范围内心OS:啊这？我TM裂开了啊啊啊啊啊！！还是裂成了两半的那种T_T ）~~\\n\\n**因此，==折半查找==也应运而生惹！\\n下面就附上详细算法~**\\n\\n```mysql\\nint Binary_Search(int A[], L, R, x){\\n   int mid;\\n   while (L<R){                     //如果L>R则范围错误\\n      mid=(L+R)/2;                 //mid取中间数，向下取整\\n      if (x<=A[mid]) R=mid;\\n          else L=mid+1;             //更新查找范围\\n   }\\n   return L;                       //查找到位置，返回数组下标L\\n}\\n```\\n<font size=4>\\n这种算法的时间复杂度：O(n),\\t空间复杂度O(1)\\n</font>\\n---\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/722946b4038bf506555d58ef24155481.png\",\"articleTitle\":\"一些408中常用的算法[持续更新ing...]\",\"categoryName\":\"算法\",\"id\":62,\"isTop\":1,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:12:43',NULL),
(1162,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\n\\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\\n\\n空间复杂度计算\\n\\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\\n\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\n\\nloga(M/N)=logaM - logaN\\n\\n###### 3/13\\n\\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\\n\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\n\\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\\n\\n###### 3/14\\n\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\n\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\n\\n最好情况：均在表尾插入/删除元素\\n\\n最坏：在表头插入、删除元素（移动次数多）\\n\\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\\n\\n动态存储\\n\\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\\n\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\n\\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\\n\\n复杂度为O(1)\\n\\n```c\\n//头插法 3/15\\nvoid insertListHead(LinkList &l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n    l->next =NULL; //可能有那啥的脏数据\\n\\tNode* newNode;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\tnewNode->next = l->next;\\n\\t\\tl->next = newNode;\\n\\t}\\n}\\n\\n//尾插法 3/15\\nvoid insertListTail(LinkList& l) {\\n\\tl = (LinkList)malloc(sizeof(Node));\\n\\tNode* newNode;\\n\\tNode* tmp =l;\\n\\tint num;\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\n\\t\\tnewNode->data = num;\\n\\t\\ttmp->next = newNode;\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\n\\t}\\n    tmp->next =NULL;\\n}\\n\\n```\\n\\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\\n\\n\\n\\n增删链表效率高于顺序表\\n\\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\\n\\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\\n\\n###### 3/18\\n\\n第一章：\\n\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\n\\nP4:综合应用题：\\n\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\n\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\n\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\n\\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\\n\\n\\n\\nP18:综合应用题：\\n\\n01:\\n\\n```c\\nif(length<1){\\n\\treturn false;\\n}\\nElemtype del = data[length-1];\\nElemtype tmp;\\nint pos=0;\\nfor(int i=0;i<length-1;i++){\\n\\ttmp = data[i];\\n\\tif(data[i]<tmp){\\n\\t\\ttmp = data[i];\\n\\t\\tpos++;\\n\\t}\\n}\\n\\tdata[pos] = del;\\n\\tlength--;\\n\\n\\treturn true;\\n```\\n\\n02:\\n\\n```bash\\nvoid Reverse(Sqlist &l){\\n\\tElemType tmp;\\n\\tint pos = l.length-1;\\n\\tfor(i=0;i<l.length/2;i++){\\n\\t\\ttmp = l.data[i];\\n\\t\\tl.data[i]= l.data[pos];\\n\\t\\tpos--;\\n\\t\\tl.data[pos] = tmp;\\n\\t}\\n}\\n```\\n\\n\\n\\n错题总结：\\n\\nP17:\\n\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\n\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\n\\n08：线性表删除第i个元素移动n-i个元素即可\\n\\n###### 3/21\\n\\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\\n\\n栈的出栈顺序数量的计算：卡特兰数\\n\\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\\n\\ntop++ 和++top的区别\\n\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\n\\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\\n\\n栈满：top==MaxSize\\n\\n共享栈栈满条件：top1+1==top2\\n\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\n\\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\\n\\n括号匹配流程图\\n\\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\\n\\n用栈实现括号匹配：\\n\\n具体代码：\\n\\n```c\\n#define Maxsize 10            //定义栈中元素的\\ntypedef struct{\\nchar data[MaxSize];        //静态数组存放栈\\nint top;                    //栈顶指针\\n}SqStack;\\n//初始化栈\\nvoid InitStack(Sqstack &S)\\n//判断栈是否为空\\nbool stackEmpty(SqStack S)\\n//新元素入栈\\nbool Push(SqStack &S,char x)\\n//栈顶元素出栈，用x返回\\nbool Pop(SqStack &s,char &x)\\n\\n    //有栈的情况\\nbool bracketCheck(char str[],int length) {\\nSqStack s;\\nInitStack(S); //初始化一个栈\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\n}else {\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\nPop(S,topElem);//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return StackEmpty(S);\\n}\\n\\nbool compare(int x,int y){\\n    if(x!=(y-1)){\\n        return true;\\n    }\\n    return false;\\n}\\n       //无栈的情况\\nbool bracketCheck1(char str[],int length) {\\n int MaxSize = length;\\nchar data[MaxSize];        //静态数组存放栈\\nint top=-1;  \\n\\nfor (int i=0; i<length; i++){\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\n    if(compare(top,length)){\\n\\t\\ttop++;\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\n    }\\n}else {\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\n\\treturn false;//匹配失败\\nchar topElem;\\ntopElem = data[top];\\n    top--;//栈顶元素出栈\\nif(str[i]==\')\' && topElem!=\'(\')\\n\\treturn false;\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\n\\treturn false;\\nif(str[i]==\'}\' && topElem!=\'{\')\\nreturn false;\\n\\t}\\n}\\n    return top==-1;\\n}\\n    \\n    \\n    \\n```\\n\\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\\n\\n###### 3/23~24\\n\\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\\n\\n程序输出结果只能是第一种（唯一性、确定性）\\n\\n后缀表达式的手算方法：\\n\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\n\\n注意：两个操作数的左右顺序\\n\\n机算：\\n\\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\\n\\n用栈实现后缀表达式的计算：\\n\\n①从左往右扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n----\\n\\n前缀表达式：\\n\\n**中缀表达式转前缀表达式（手算）**\\n\\n① 确定中缀表达式中各个运算符的运算顺序\\n\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\n\\n③ 如果还有运算符没被处理，就继续 ②\\n\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\n\\n机算：\\n\\n用栈实现前缀表达式的计算：\\n\\n①从右往左扫描下一个元素，直到处理完所有元素\\n\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\n\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\n\\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\\n\\n\\n\\n中->前\\n\\n注：先弹出的是左操作数，后弹出的是右操作数\\n\\n\\n\\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\\n\\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\\n\\n上三角按行存放 <===> 下三角按列存放\\n\\n下三角按行存<====>上三角按列存\\n\\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\\n\\n###### 4/1\\n\\n串\\n\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\n\\n 高四位 低四位\\n\\na 0110\\t0001  \\n\\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\\n\\nKMP：\\n\\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\\n\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\n\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\n\\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\\n\\n**nextVal数组求法**，先让第一位=0\\n\\n###### 4/3~4/5\\n\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\n\\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\\n\\ni<=n/2是分支结点，i>n/2是叶子结点\\n\\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\\n\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\n\\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\\n\\n线索化二叉树\\n\\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\\n\\n----\\n\\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\\n\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\n\\n###### 4/6\\n\\n哈夫曼树：最优二叉树\\n\\n带权路径最小的二叉树\\n\\n**并查集代码**\\n\\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\\n\\n最坏情况下时间复杂度与树的高度h相关\\n\\n优化合并操作 小树并入大树\\n\\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\\n\\nfind()最坏时间复杂度变为O(logn)\\n\\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\\n\\n树越矮，时间复杂度越低\\n\\nfind优化操作\\n\\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\\n\\n```c\\n/*int Find(int nums[],int index){\\n    int root = index;\\n    while(nums[root]>=0){\\n        root = nums[root];\\n    }\\n    while(index!=root){\\n        int record = root;\\n        nums[index] = root;\\n        root = record;\\n    }\\n    return root;\\n}*/\\n//使树的高度不超过O(a(n))的数量级\\n\\n\\n#pragma once\\n#define Size 100\\nint UFSets[Size];\\n\\n//初始化并查集\\nvoid Initial(int S[]) {\\n\\tfor (int i = 0;i < Size;i++) {\\n\\t\\tS[i] = -1;\\n\\t}\\n}\\n\\n//查找操作，找x的根节点\\nint Find(int s[], int x) {\\n\\twhile (s[x]>0)\\n\\t{\\n\\t\\tx = s[x];\\n\\t}\\n\\treturn x;\\n}\\n\\n//合并操作 根节点统一  树高<=logn + 1\\nvoid Union(int s[], int root1, int root2) {\\n\\tif (root1 == root2) {\\n\\t\\treturn ;\\n\\t}\\n\\tif (s[root2] > s[root1]) { //root2是小树\\n\\t\\ts[root1] += s[root2];\\n\\t\\ts[root2] = root1;\\n\\t}\\n\\telse {\\n\\t\\ts[root2] += s[root1];\\n\\t\\ts[root1] = root2;\\n\\t}\\n}\\n\\n```\\n\\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\\n\\n错题：\\n\\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\\n\\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\\n\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\n\\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\\n\\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\\n\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\n\\n###### 4/16\\n\\n图的顶点个数 = 图的阶数\\n\\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\\n\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\n\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\n\\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\\n\\n邻接表、邻接矩阵的**区别**\\n\\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\\n\\n---\\n\\n# 4/18\\n\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\n\\n```c\\n// 邻接表中表对应的链表的顶点\\ntypedef struct _ENode\\n{\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\n}ENode, *PENode;\\n\\n// 邻接表中表的顶点\\ntypedef struct _VNode\\n{\\n    char data;              // 顶点信息\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\n}VNode;\\n\\n// 邻接表\\ntypedef struct _LGraph\\n{\\n    int vexnum;             // 图的顶点的数目\\n    int edgnum;             // 图的边的数目\\n    VNode vexs[MAX];\\n}LGraph;\\n\\n```\\n\\n\\n\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\n\\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\\n\\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\\n\\n访问各个顶点所需时间+访问各边所需时间\\n\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\n\\n**深度优先遍历：**和树的**先根**遍历类似\\n\\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\\n\\n---\\n\\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\\n\\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\\n\\n考频只有一题的选择：\\n\\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\\n\\n---\\n\\n关键路径\\n\\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\\n\\n4/24复习\\n\\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\\n\\ne(i) :活动ai最早开始的时间\\n\\nl(i) :活动ai最晚开始的时间\\n\\nvl(k)：活动vk最迟发生时间 vek:最早\\n\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\n\\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\\n\\n差值为0的就是关键路径\\n\\n\\n\\n\\n\\n#### 5 月\\n\\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\\n\\n查找判定树\\n\\n判断「平衡二叉树」的 2 个条件：\\n\\n- **1. 是「二叉排序树」**\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\n\\n二叉排序树\\n\\n平衡二叉树\\n\\n二叉搜索树\\n\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\n\\n---\\n\\n<h3>折半查找：</h3>\\n\\n只适用于有序的顺序表\\n\\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\\n\\n\\n\\n折半查找构成了二叉排序树\\n\\n可以把折半查找看成一颗二叉排序树\\n\\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\\n\\n二叉排序树删除操作\\n\\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\\n\\n7.3.3中要重点了解的例1~3，例4\\n\\n**简单路径定义：**\\n\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\n\\n---\\n\\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\\n\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\n\\n\\n\\n**红黑树性质**\\n\\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\\n\\n红黑树插入\\n\\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\\n\\n看“叔”脸色\\n\\n\\n\\n红黑树性质+插入总结：\\n\\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\\n\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\n\\n**B树**\\n\\n特性\\n\\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\\n\\n\\n\\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\\n\\n树的高度\\n\\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\\n\\n\\n\\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\\n\\n\\n\\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\\n\\n（上下限：除了根节点外，结点关键字个数n: )\\n\\n\\n\\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\\n\\nB树/B+树类比\\n\\n---\\n\\n**散列（哈希表）**\\n\\n拉链法：同义词串成一个链表\\n\\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\\n\\n着重考察：线性探测法、平方探测法\\n\\n\\n\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\\n\\n总结\\n\\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\\n\\n装填因子概念也需重视\\n\\nQuestion1:\\n\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\n\\n(1) 请画出所构造的散列表。\\n\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\n\\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\\n\\n\\n\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\n\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\n\\n---\\n\\n##### 5/23 排序算法\\n\\n插入排序法\\n\\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\\n\\n---\\n\\n##### 5/27 快速排序\\n\\n时间、空间复杂度与递归层次有关\\n\\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\\n\\n**快排时间效率分析：**\\n\\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\\n\\n---\\n\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\n\\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\\n\\n---\\n\\n###### **8.3.3**\\n\\n---\\n\\n第七题：**x趟排序应产生x个分界线。**\\n\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\n\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\n\\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\\n\\n---\\n\\n第9题：关于快排的**完美**划分\\n\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\n\\n排序速度最慢：原数组已基本有序\\n\\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\\n\\n##### 5/29 堆排序\\n\\n最主要的算法还是向下调整HeadAdjust()函数\\n\\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\\n\\n\\n\\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\\n\\n堆排序的空间复杂度：常数级 O(1)\\n\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\n\\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\\n\\n堆的插入和删除\\n\\n考试可能考比较次数\\n\\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\\n\\n\\n\\n##### 5/30 归并排序+基数排序\\n\\n二路归并：把两个已经有序的序列合并成一个\\n\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\n\\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\\n\\n**基数排序：**代码不怎么考，主要手算模拟即可\\n\\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\\n\\n---\\n\\n排序算法的空间、时间复杂度\\n\\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\\n\\n\\n\\n5/31外部排序\\n\\n\\n\\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\\n\\nr<=K^h-1 ,树的结点最大的一层\\n\\n要归并的数据都是分块读入内存的\\n\\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\\n\\n\\n\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\n\\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\\n\\n\\n\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\n\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\n\\n##### 6/2 结尾\\n\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\n\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\n\\n考查手算模拟即可\\n\\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\\n\\n---\\n\\n**置换选择排序：**减少初始归并段的个数\\n\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\n\\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\\n\\n\\n\\n---\\n\\n**最佳归并树**\\n\\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\\n\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\n\\nk叉最佳归并树：\\n\\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\\n\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\n\\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\\n\\n---\\n\\n<h3>**各种排序算法的性质总结**</h3>\\n\\n\\n\\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\\n\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\n\\n\\n\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\n\\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\\n\\n---\\n\\n### 8/1 算法题\\n\\n数组题解题框架：\\n\\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/cfaca235b70f6c82a30f823f2aaa73dd.jpg\",\"articleTitle\":\"408数据结构所有笔记[2022-3.5~6.5] \",\"categoryName\":\"学习\",\"id\":59,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:13:12',NULL),
(1163,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":59,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:13:18',NULL),
(1164,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:13:41',NULL),
(1165,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:13:56',NULL),
(1166,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:14:13',NULL),
(1167,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":59,\"isTop\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:14:19',NULL),
(1168,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:14:20',NULL),
(1169,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":59,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:14:31',NULL),
(1170,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:14:52',NULL),
(1171,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":62,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:15:01',NULL),
(1172,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":59,\"isTop\":0}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:15:17',NULL),
(1173,'文章模块','修改','/admin/articles/top','com.minzheng.blog.controller.ArticleController.updateArticleTop','修改文章置顶','[{\"id\":59,\"isTop\":1}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:15:25',NULL),
(1174,'用户信息模块','修改','/admin/users/role','com.minzheng.blog.controller.UserInfoController.updateUserRole','修改用户角色','[{\"nickname\":\"kk\",\"roleIdList\":[3],\"userInfoId\":1007}]','PUT','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 09:53:25',NULL),
(1175,'角色模块','删除','/admin/roles','com.minzheng.blog.controller.RoleController.deleteRoles','删除角色','[[4]]','DELETE','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 14:49:51',NULL),
(1176,'角色模块','新增或修改','/admin/role','com.minzheng.blog.controller.RoleController.saveOrUpdateRole','保存或更新角色','[{\"id\":2,\"resourceIdList\":[254,267,269,270,257,258,282,288],\"roleLabel\":\"user\",\"roleName\":\"用户\"}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','183.39.158.29','广东省深圳市 电信','2022-09-04 14:49:59',NULL),
(1177,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"数据链路层使用的信道\\n\\n    点对点信道：这种信道使用一对一的点对点通信方式\\n    广播信道：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。\\n\\n一、使用点对点信道的数据链路层\\n1.1. 数据链路和帧\\n\\n    链路(link)：是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。\\n        一条链路只是一条通路的一个组成部分。\\n    数据链路（data link）:除了物理线路外，还必须有通信协议来控制这些数据的传输。若把视线这些协议的硬件和软件加到链路上，就构成了数据链路。\\n        现在最常用的方法是使用适配器（即网卡）来视线这些协议的硬件和软件。\\n        一般的适配器都包括了数据链路层和物理层这两层的功能。\\n    帧：数据链路层的分组称为帧，数据链路层传输的是帧。\\n\\n1.2. 3个基本问题\\n\\n    1.封装成帧\\n        **封装成帧（framing）**就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。\\n        首部和尾部的一个重要作用就是进行帧定界\\n        MTU:数据链路层的帧长，一般数据链路层的帧长是要小于等于MTU的\\n        当数据是由可打印的ASCII码组成的文本文件时，帧定界可以使用特殊的帧定界符\\n        控制字符SOH（start Of Header）放在一个帧的最前面，表示帧的首部开始。\\n        控制字符EOT(start Of Transmission)表示帧的结束\\n    2.透明传输\\n        问题：如果数据中的某个字节的二进制代码恰好和SOH或EOT一样，数据链路层就会错误地找到帧的边界\\n        解决方法：字节填充（byte stuffing）或字符填充（character stuffing）\\n        发送端的数据链路层在数据中出现控制字符SOH或EOT的前面插入一个转义字符ESC（其十六进制编码是1B）\\n        接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。\\n        如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。\\n    3.差错控制\\n        在传输过程中可能也会产生**比特差错：**1可能会编程0而0也可能变成1\\n        在一段时间内，传输错误地比特占所传输比特总数的比率称为误码率BER(Bit Error Rate)\\n        误码率与信噪比有很大的关系，为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。\\n        循环荣偶遇检测的原理\\n            在数据链路层传送的帧中，广泛使用了循环冗余检测CRC的检错技术。\\n            在发送端，先把数据划分为组。假定每组k个比特。\\n            假设待传送的一组数据M=101001(现在k=6)。我们在M的后面再添加供差错检测用的n位冗余码一起发送。\\n        冗余码计算\\n            用二进制的模2运算进行2^n乘M的运算，这相当于在M后面添加n个0.\\n            得到的（k+n）位的数除以事先选定好的长度为（n+1）位的除数P，得出商是Q二余数是R，余数R比除数P少1位，即R是n位。\\n            将余数R作为冗余码拼接在数据M后面发送出去。\\n        冗余码的计算实例\\n            现在k = 6， M= 101001\\n            设n = 3，除数P=1101\\n            被除数是2^M=101001000。\\n            模2运算的结果是：商Q=110101，\\n                余数R = 001\\n            把余数R作为冗余码添加在数据M的后面发送出去。发送的数据时：2^M + R\\n            现在的数据：101001001，供（k+n）位\\n        接受端对收到的每一帧进行CRC检测\\n            1.若得到的余数R = 0，则判定这个帧没有差错，就接受（accept）\\n            2.若余数R ≠ 0，则判定这个帧有差错，就丢弃\\n            但这种检测方法并不能确定究竟是哪一个或那几个比特出现了差错。\\n            只要经过严格的挑选，并使用位数足够多的除数P，那么出现检测不到的差错的概率就很小很小\\n        应当注意\\n            仅用循环冗余检测CRC差错检测技术只能做到无差错接受（accept）\\n            无差错接受是指：：凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于1的概率任务这些帧在传输过程中没有产生差错\\n            也就是说：凡是接受数据链路层接受的帧都没有阐述差错（由差错的帧就丢弃而不接受）\\n            要做到可靠传输（即发送什么就收到什么）就必须再加上确认和重传机制\\n            应当明确，无比特差错与无传输差错是不同的概念\\n            在数据链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输\\n\\n二、点对点协议PPP\\n2.1. PPP协议的特点\\n\\n    对于点对点的链路，目前使用得最广泛的数据链路层协议是点对点协议PPP（Point-to-Point Protocol）\\n    例如用户使用拨号电话线接入互联网时，用户计算机和ISP进行通信时所使用的的数据链路层协议就是PPP协议。\\n    PPP协议在1994年就已经成为互联网的正式标准\\n    PPP协议应满足的需求\\n        简单—— 这是首要的要求\\n        封装成帧—— 必须固定特殊的字符作为帧定界符\\n        透明性—— 必须保证数据传输的透明性\\n        多种网络层协议—— 能够在同一条物理链路上同时支持多种网络层协议\\n        多种类型链路—— 能够在多种类型的链路上运行\\n        差错检测—— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧\\n        检测连接状态—— 能够及时自动检测出链路是否处于正常工作状态\\n        最大传送单元—— 必须对每一种类型的点对点链路设置最大传送单元MTU的默认标准值，促进各种实现的互操作性\\n        网络层地址协商—— 必须提供一种机制使通信的两个网络层实体能够通过协商知道后能够配置彼此的网络层地址。\\n        数据压缩协商—— 必须提供一种方法来协商使用数据压缩算法\\n    PPP协议不需要的功能\\n        纠错\\n        流量控制\\n        序号\\n        多点线路\\n        半双工或单工链路\\n    PPP协议的组成\\n        一个将IP数据报封装到串行链路的方法\\n        链路控制协议LCP（Link Control Protocol）\\n        网络控制协议NCP（Network Control Protocol）\\n\\n2.2. PPP协议的帧格式\\n\\n    PPP帧的首部和尾部分别为4个字段和2个字段\\n        首部\\n            标志字段F = 0x7E (符号0x表示后面的字符是用十六进制表示。十六进制的7E的二进制表示是01111110)（1字节）\\n            地址字段A只置为0XFF。地址字段实际上并不起作用。（1字节）\\n            控制字段C通常置为0x03（1字节）\\n            PPP有一个2个字节的协议字段。其值\\n                若为0x0021,则信息字段就是IP数据报\\n                若为0x8021,则信息字段就是网络控制数据\\n                若为0xC021,则信息字段是PPP链路控制数据\\n                若为0xC023,则信息字段是鉴别数据\\n        中间的IP数据报（信息部分），不超过1500字节\\n        尾部\\n            FSC两个字节（1字节）\\n            标志字符F = 0x7E(1字节)\\n\\n2.3. PPP协议的工作状态\\n\\n    透明传输问题\\n        当PPP用在同步传输链路时，协议规定采用硬件来完成比特填充（和HDLC的做法一样）\\n        当PPP用在异步传输时，就使用一种特殊的字符填充法\\n        字符填充\\n            将信息字段中出现的每一个0x7E字节转变成为2字节序列（0x7D,0x5E）。\\n            若信息字段中出现一个0x7D的字节，则将其转变为2字节序列（0x7D，0x5D）\\n            若信息字段中出现的ASCII码的控制字符（即数值小于0x20的字符），则在该字符前面要加入一个0x7D字节，同时将该字符的编码加以改变。\\n\\n三、使用广播信道的数据链路层\\n3.1. 局域网的数据链路层\\n\\n    局域网最主要的特点是：\\n        网络为一个单位所拥有\\n        地理范围和站点数目均有限。\\n    局域网具有如下主要优点：\\n        具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\\n        便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变\\n        提高了系统的可靠性、可用性和残用性\\n    局域网拓扑结构\\n        星形网（目前主要使用的方式）\\n        总线网（已弃用）\\n        环形网（已弃用）\\n    媒体共享技术\\n        静态划分信道\\n            频分复用\\n            时分复用\\n            波分复用\\n            码分复用\\n        动态媒体接入控制（多点接入）\\n            随机接入\\n            受控接入，如多点线路探询（polling），或轮询。\\n    以太网的两个标准\\n        DIX Ethernet V2是世界上第一个局域网产品（以太网）的规约\\n        IEEE802.3是第一个IEEE的以太网标准\\n            IEEE802委员会将局域网的数据链路层拆成两个子层：\\n                逻辑链路控制LLC（Logical Link Control）子层（基本不用）\\n                媒体接入控制MAC（MEdium Access Control）子层\\n    适配器的作用\\n        网络接口板又称为通信适配器（adapter）或网络接口卡NIC（Network Interface Card），或网卡\\n        适配器的重要功能：\\n            进行串行/并行转换\\n            对数据进行缓存\\n            在计算机的操作系统安装设备驱动程序\\n            实现以太网协议。\\n\\n3.2. CSMA/CD协议\\n\\n    最初的以太网是将许多计算机都连接到一根总线上。\\n    为了通信的简便，以太网采用了两种重要的措施\\n        1.采用灵活的无连接的工作方式\\n            不必先建立连接就可以直接发送数据\\n            对发送的数据帧不进行编号，也不要求对方发回确认\\n        2.以太网发送的数据都**使用曼彻斯特（MAnchester）编码\\n    CSMA/CD含义：载波监听多点接入/碰撞检测\\n        多点接入表示许多计算机以多点接入的方式连接在一根总线上\\n        载波监听是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，一面发生碰撞\\n        碰撞检测就是计算机边发送数据边检测信道上的信号电压大小\\n    CSMA/CD重要特性：使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）\\n    二进制指数类型退避算法\\n        发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能发送数据。\\n            基本退避时间取为争用期2τ\\n            从整数集合[0,1,……，（2^k-1））]中随机地取出一个数，即为r0.重传所需的时延就是r倍的基本退避时间。\\n            参数k按下面的公式计算：\\n            K = Min[重传次数，10]\\n            当k<=10,参数k等于重传次数\\n            当重传达16次扔不能成功即丢弃该帧，并向高层报告。\\n    最短有效帧长\\n        如果发生冲突，就一定是在发送的前64字节之内\\n        由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于64字节\\n        以太网规定了最短有效帧长为64字节，凡长度小于64字节的帧都是由于冲突而异常终止的无效帧。\\n    强化碰撞\\n        当发送数据的站一旦发现了碰撞时：\\n            立即停止发送数据\\n            再继续发送若干比特的人为干扰信号（jamming signal），以便让所用用户都知道现在已经发生了碰撞。\\n    CSMA/CD协议的要点\\n        先听再发\\n        边听边法\\n        冲突停止\\n        延迟重发\\n\\n3.3. 以太网的信道利用率\\n\\n    多个站在以太网上同时工作就可能会发生碰撞\\n    当发生碰撞时，信道资源实际上是被浪费了。因此，当扣除碰撞所造成的的信道损失后，以太网总的信道利用率并不能达到100%\\n    要提高以太网的信道利用率，就必须减小τ与T0（TO:发送帧所需要的的时间）之比。\\n    在以太网定义了参数α，他是以太网单程端到端实验τ与帧的发送时间T0之比：\\n    α = τ / T0\\n    α——>0,表示信道利用率很高\\n    α越大，表明争用期所占的比例增大，信道利用率低。\\n    为提高利用率，以太网的参数α的值应当尽可能小些。\\n    对以太网参数α的要求是：\\n        当数据率一定时，以太网的连线的长度受到限制（100m），否则τ的数值会太大\\n        以太网的帧不能太短，否则T0的值会太小，使α的值太大。\\n    信道利用率达到最大值Smax\\n        Smax= T0(T0 + τ) = 1/（1+α）\\n\\n3.4. 以太网的MAC层\\n\\n    MAC层的硬件地址\\n        在局域网中，硬件地址又称为物理地址，或MAC地址\\n        48位MAC地址\\n            前24位由IEEE的注册管理机构RA负责向厂家分配，作为组织唯一标识符\\n            后24位由厂家自行指派，称为扩展唯一标识符\\n    MAC帧的格式\\n    目的地址：6字节\\n    源地址：6字节\\n    类型：2字节\\n    IP数据报：46——1500字节\\n    FSC（校验码）：4字节\\n\\n四、扩展的以太网\\n4.1. 在物理层扩展以太网\\n\\n    使用光纤扩展\\n    使用集线器扩展\\n\\n4.2. 在数据链路层扩展以太网\\n\\n    扩展以太网更常用的方法是在数据链路层进行\\n    早期使用网桥，现在使用以太网交换机。\\n    网桥：\\n        工作在数据链路层。他根据MAC帧的目的地址对收到的帧进行转发和过滤。\\n        当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或把他丢弃\\n    交换机：交换机集线器常称为以太网交换机（switch）或第二层交换机，强调这种交换机工作在数据链路层\\n        以太网交换机实质上就是一个多接口的网桥（通常都有十几个或更多的接口）。\\n        每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在全双工方式\\n        以太网交换机具有并行性（能同时联通多对接口，使多对主机能同时通信）\\n        相互通信的主机都是独占传输媒体，无碰撞地传输数据\\n        以太网交换机的接口有存储器，能在输出端口繁忙时把到来的帧进行缓存。\\n        以太网交换机是一种即插即用设备，其内部的帧交换表（又称为地址表）是通过自学习算法自动地逐渐建立起来的。\\n        以太网交换机使用了专门的交换结构芯片，用硬件转发，其转发速率要比使用软件转发的网桥快很多。\\n    以太网交换机的优点\\n        用户独享带宽，增加了总容量\\n        从共享总线以太网转到交换机以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动。\\n        以太网交换机一般都具有多种速率的接口，方便了各种不同的用户\\n    以太网交换机的交换方式\\n        存储转发方式\\n            把这个数据帧先缓存后再进行处理。\\n        直通（cut-through）方式\\n            接受数据帧的同时就立即按数据帧的目的MAC地址决定该帧的转发接口，因而提高了帧的转发速度。\\n            缺点是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站\\n    以太网交换机的自学习功能\\n        以太网交换机运行自学习算法自动维护交换表\\n        开始时，以太网交换机里面的交换表是空的。\\n        按照自学习算法处理收到的帧和建立交换表\\n            A先向B发送一帧，从接口1进入交换机。\\n            交换机收到帧后，先查找交换表，没有查到应从哪个接口转发这个帧\\n            交换机把这个帧的源地址A和接口1写入交换表中，并向除接口1以外的所有接口广播这个帧\\n            C和D将丢弃这个帧，因为目的地址不对。只B才收下这个目的地址正确的帧。这也称为过滤。\\n            从新写入交换表（A，1）可以看出，以后不管从哪一个接口收到帧，只要其目的地址是A,就应当把收到的帧从接口1发送出去。\\n            B通过接口3向A发送一帧。\\n            交换机查找交换表，发现交换表中的MAC地址有A。表明要发送给A的帧（即目的地址为A的帧）应从接口1转发。于是就把这个帧传送到接口1转发给A。显然，现在已经没有必要再广播收到的帧。\\n            交换表这时新增加的项目（B，3）,表明今后如有发送给B的帧，就应当从接口3转发出去。\\n            经过一段时间后，只要主机C和D也向其他主机发送帧，以太网交换机的交换表就回吧转发到C或D应当经过的接口号（2或4）写入到交换表中。\\n            考虑到可能有时要在交换机的接口更换主机，或者主机要更换网络适配器，这就需要更改交换表中的项目，为此在交换表中的每个项目都设有一定的有效时间。过期的项目就自动被删除\\n    交换机自学习和转发帧的步骤\\n        1.交换机收到一帧后先进行自学习。查找交换表中与收到帧的源地址有无相匹配的项目\\n            如果没有，就在交换表中增加一个项目（源地址、进入的接口、有效时间）\\n            如果有，则把原有的项目进行更新（接入的接口或有效时间）\\n        2.转发帧。查找交换表中与收到帧的目的地址有无相匹配的项目\\n            如果没有，则向所有其他接口（进入的接口除外）转发。\\n            如果有，则按交换表中给出的接口进行转发。\\n            若交换表中给出的接口就是该帧进入交换机的接口，则应丢弃这个帧（因为这时不需要经过交换机进行转发）\\n    交换机使用了生成树协议\\n        IEEE 802.1D标准制定了一个生成树协议STP（Span宁 Tree Prtocol）\\n        其要点是：不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而笑出了兜圈子现象。\\n\\n4.3.虚拟局域网\\n\\n    利用以太网交换机可以很放标地实现虚拟局域网VLAN（Virtual LAN）\\n    虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个VLAN\\n    虚拟局域网其实只是局域网给用户提供的一种服务，而不是一种新型局域网。\\n    由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。\\n\\n五、高速以太网\\n5.1.100BASE-T以太网\\n\\n    速率达到或超过100Mbit/s的以太网称为告诉以太网\\n    100BASE-T在双绞线上传送100Mbit/s系带信号的星型拓扑以太网，人使用IEEE802.3的CSMA/CD协议。\\n\\n5.2.吉比特以太网\\n\\n    允许在1Gbit/s下全双工和半双工两种方式工作。\\n    使用IEEE802.3协议规定的帧格式\\n    在半双工下使用CSMA/CD协议，全双工方式不适用CSMA/CD协议。\\n————————————————\\n版权声明：本文为CSDN博主「ぃ陌上烟雨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\\n原文链接：https://blog.csdn.net/weixin_44861708/article/details/111875155\",\"articleCover\":\"http://121.89.232.237:83/articles/e40014c0556eb5f7c70e9c456399ee60.jpg\",\"articleTitle\":\"2022-09-14 计算机网络之数据链路层\",\"categoryName\":\"学习\",\"isTop\":0,\"originalUrl\":\"https://blog.csdn.net/weixin_44861708/article/details/111875155\",\"status\":1,\"tagNameList\":[],\"type\":2}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.25.177.142','广东省 电信','2022-09-14 20:25:16',NULL),
(1178,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"数据链路层使用的信道\\n\\n   点对点信道：这种信道使用一对一的点对点通信方式\\n    广播信道：这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。\\n\\n一、使用点对点信道的数据链路层\\n1.1. 数据链路和帧\\n\\n   链路(link)：是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。\\n        一条链路只是一条通路的一个组成部分。\\n    数据链路（data link）:除了物理线路外，还必须有通信协议来控制这些数据的传输。若把视线这些协议的硬件和软件加到链路上，就构成了数据链路。\\n        现在最常用的方法是使用适配器（即网卡）来视线这些协议的硬件和软件。\\n        一般的适配器都包括了数据链路层和物理层这两层的功能。\\n    帧：数据链路层的分组称为帧，数据链路层传输的是帧。\\n\\n1.2. 3个基本问题\\n\\n    1.封装成帧\\n        **封装成帧（framing）**就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。\\n        首部和尾部的一个重要作用就是进行帧定界\\n        MTU:数据链路层的帧长，一般数据链路层的帧长是要小于等于MTU的\\n        当数据是由可打印的ASCII码组成的文本文件时，帧定界可以使用特殊的帧定界符\\n        控制字符SOH（start Of Header）放在一个帧的最前面，表示帧的首部开始。\\n        控制字符EOT(start Of Transmission)表示帧的结束\\n    2.透明传输\\n        问题：如果数据中的某个字节的二进制代码恰好和SOH或EOT一样，数据链路层就会错误地找到帧的边界\\n        解决方法：字节填充（byte stuffing）或字符填充（character stuffing）\\n        发送端的数据链路层在数据中出现控制字符SOH或EOT的前面插入一个转义字符ESC（其十六进制编码是1B）\\n        接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。\\n        如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。\\n    3.差错控制\\n        在传输过程中可能也会产生**比特差错：**1可能会编程0而0也可能变成1\\n        在一段时间内，传输错误地比特占所传输比特总数的比率称为误码率BER(Bit Error Rate)\\n        误码率与信噪比有很大的关系，为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。\\n        循环荣偶遇检测的原理\\n            在数据链路层传送的帧中，广泛使用了循环冗余检测CRC的检错技术。\\n            在发送端，先把数据划分为组。假定每组k个比特。\\n            假设待传送的一组数据M=101001(现在k=6)。我们在M的后面再添加供差错检测用的n位冗余码一起发送。\\n        冗余码计算\\n            用二进制的模2运算进行2^n乘M的运算，这相当于在M后面添加n个0.\\n            得到的（k+n）位的数除以事先选定好的长度为（n+1）位的除数P，得出商是Q二余数是R，余数R比除数P少1位，即R是n位。\\n            将余数R作为冗余码拼接在数据M后面发送出去。\\n        冗余码的计算实例\\n            现在k = 6， M= 101001\\n            设n = 3，除数P=1101\\n            被除数是2^M=101001000。\\n            模2运算的结果是：商Q=110101，\\n                余数R = 001\\n            把余数R作为冗余码添加在数据M的后面发送出去。发送的数据时：2^M + R\\n            现在的数据：101001001，供（k+n）位\\n        接受端对收到的每一帧进行CRC检测\\n            1.若得到的余数R = 0，则判定这个帧没有差错，就接受（accept）\\n            2.若余数R ≠ 0，则判定这个帧有差错，就丢弃\\n            但这种检测方法并不能确定究竟是哪一个或那几个比特出现了差错。\\n            只要经过严格的挑选，并使用位数足够多的除数P，那么出现检测不到的差错的概率就很小很小\\n        应当注意\\n            仅用循环冗余检测CRC差错检测技术只能做到无差错接受（accept）\\n            无差错接受是指：：凡是接受的帧（即不包括丢弃的帧），我们都能以非常接近于1的概率任务这些帧在传输过程中没有产生差错\\n            也就是说：凡是接受数据链路层接受的帧都没有阐述差错（由差错的帧就丢弃而不接受）\\n            要做到可靠传输（即发送什么就收到什么）就必须再加上确认和重传机制\\n            应当明确，无比特差错与无传输差错是不同的概念\\n            在数据链路层使用CRC检验，能够实现无比特差错的传输，但这还不是可靠传输\\n\\n二、点对点协议PPP\\n2.1. PPP协议的特点\\n\\n    对于点对点的链路，目前使用得最广泛的数据链路层协议是点对点协议PPP（Point-to-Point Protocol）\\n    例如用户使用拨号电话线接入互联网时，用户计算机和ISP进行通信时所使用的的数据链路层协议就是PPP协议。\\n    PPP协议在1994年就已经成为互联网的正式标准\\n    PPP协议应满足的需求\\n        简单—— 这是首要的要求\\n        封装成帧—— 必须固定特殊的字符作为帧定界符\\n        透明性—— 必须保证数据传输的透明性\\n        多种网络层协议—— 能够在同一条物理链路上同时支持多种网络层协议\\n        多种类型链路—— 能够在多种类型的链路上运行\\n        差错检测—— 能够对接收端收到的帧进行检测，并立即丢弃有差错的帧\\n        检测连接状态—— 能够及时自动检测出链路是否处于正常工作状态\\n        最大传送单元—— 必须对每一种类型的点对点链路设置最大传送单元MTU的默认标准值，促进各种实现的互操作性\\n        网络层地址协商—— 必须提供一种机制使通信的两个网络层实体能够通过协商知道后能够配置彼此的网络层地址。\\n        数据压缩协商—— 必须提供一种方法来协商使用数据压缩算法\\n    PPP协议不需要的功能\\n        纠错\\n        流量控制\\n        序号\\n        多点线路\\n        半双工或单工链路\\n    PPP协议的组成\\n        一个将IP数据报封装到串行链路的方法\\n        链路控制协议LCP（Link Control Protocol）\\n        网络控制协议NCP（Network Control Protocol）\\n\\n2.2. PPP协议的帧格式\\n\\n    PPP帧的首部和尾部分别为4个字段和2个字段\\n        首部\\n            标志字段F = 0x7E (符号0x表示后面的字符是用十六进制表示。十六进制的7E的二进制表示是01111110)（1字节）\\n            地址字段A只置为0XFF。地址字段实际上并不起作用。（1字节）\\n            控制字段C通常置为0x03（1字节）\\n            PPP有一个2个字节的协议字段。其值\\n                若为0x0021,则信息字段就是IP数据报\\n                若为0x8021,则信息字段就是网络控制数据\\n                若为0xC021,则信息字段是PPP链路控制数据\\n                若为0xC023,则信息字段是鉴别数据\\n        中间的IP数据报（信息部分），不超过1500字节\\n        尾部\\n            FSC两个字节（1字节）\\n            标志字符F = 0x7E(1字节)\\n\\n2.3. PPP协议的工作状态\\n\\n    透明传输问题\\n        当PPP用在同步传输链路时，协议规定采用硬件来完成比特填充（和HDLC的做法一样）\\n        当PPP用在异步传输时，就使用一种特殊的字符填充法\\n        字符填充\\n            将信息字段中出现的每一个0x7E字节转变成为2字节序列（0x7D,0x5E）。\\n            若信息字段中出现一个0x7D的字节，则将其转变为2字节序列（0x7D，0x5D）\\n            若信息字段中出现的ASCII码的控制字符（即数值小于0x20的字符），则在该字符前面要加入一个0x7D字节，同时将该字符的编码加以改变。\\n\\n三、使用广播信道的数据链路层\\n3.1. 局域网的数据链路层\\n\\n    局域网最主要的特点是：\\n        网络为一个单位所拥有\\n        地理范围和站点数目均有限。\\n    局域网具有如下主要优点：\\n        具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。\\n        便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变\\n        提高了系统的可靠性、可用性和残用性\\n    局域网拓扑结构\\n        星形网（目前主要使用的方式）\\n        总线网（已弃用）\\n        环形网（已弃用）\\n    媒体共享技术\\n        静态划分信道\\n            频分复用\\n            时分复用\\n            波分复用\\n            码分复用\\n        动态媒体接入控制（多点接入）\\n            随机接入\\n            受控接入，如多点线路探询（polling），或轮询。\\n    以太网的两个标准\\n        DIX Ethernet V2是世界上第一个局域网产品（以太网）的规约\\n        IEEE802.3是第一个IEEE的以太网标准\\n            IEEE802委员会将局域网的数据链路层拆成两个子层：\\n                逻辑链路控制LLC（Logical Link Control）子层（基本不用）\\n                媒体接入控制MAC（MEdium Access Control）子层\\n    适配器的作用\\n        网络接口板又称为通信适配器（adapter）或网络接口卡NIC（Network Interface Card），或网卡\\n        适配器的重要功能：\\n            进行串行/并行转换\\n            对数据进行缓存\\n            在计算机的操作系统安装设备驱动程序\\n            实现以太网协议。\\n\\n3.2. CSMA/CD协议\\n\\n    最初的以太网是将许多计算机都连接到一根总线上。\\n    为了通信的简便，以太网采用了两种重要的措施\\n        1.采用灵活的无连接的工作方式\\n            不必先建立连接就可以直接发送数据\\n            对发送的数据帧不进行编号，也不要求对方发回确认\\n        2.以太网发送的数据都**使用曼彻斯特（MAnchester）编码\\n    CSMA/CD含义：载波监听多点接入/碰撞检测\\n        多点接入表示许多计算机以多点接入的方式连接在一根总线上\\n        载波监听是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，一面发生碰撞\\n        碰撞检测就是计算机边发送数据边检测信道上的信号电压大小\\n    CSMA/CD重要特性：使用CSMA/CD协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）\\n    二进制指数类型退避算法\\n        发生碰撞的站在停止发送数据后，要推迟（退避）一个随机时间才能发送数据。\\n            基本退避时间取为争用期2τ\\n            从整数集合[0,1,……，（2^k-1））]中随机地取出一个数，即为r0.重传所需的时延就是r倍的基本退避时间。\\n            参数k按下面的公式计算：\\n            K = Min[重传次数，10]\\n            当k<=10,参数k等于重传次数\\n            当重传达16次扔不能成功即丢弃该帧，并向高层报告。\\n    最短有效帧长\\n        如果发生冲突，就一定是在发送的前64字节之内\\n        由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于64字节\\n        以太网规定了最短有效帧长为64字节，凡长度小于64字节的帧都是由于冲突而异常终止的无效帧。\\n    强化碰撞\\n        当发送数据的站一旦发现了碰撞时：\\n            立即停止发送数据\\n            再继续发送若干比特的人为干扰信号（jamming signal），以便让所用用户都知道现在已经发生了碰撞。\\n    CSMA/CD协议的要点\\n        先听再发\\n        边听边法\\n        冲突停止\\n        延迟重发\\n\\n3.3. 以太网的信道利用率\\n\\n    多个站在以太网上同时工作就可能会发生碰撞\\n    当发生碰撞时，信道资源实际上是被浪费了。因此，当扣除碰撞所造成的的信道损失后，以太网总的信道利用率并不能达到100%\\n    要提高以太网的信道利用率，就必须减小τ与T0（TO:发送帧所需要的的时间）之比。\\n    在以太网定义了参数α，他是以太网单程端到端实验τ与帧的发送时间T0之比：\\n    α = τ / T0\\n    α——>0,表示信道利用率很高\\n    α越大，表明争用期所占的比例增大，信道利用率低。\\n    为提高利用率，以太网的参数α的值应当尽可能小些。\\n    对以太网参数α的要求是：\\n        当数据率一定时，以太网的连线的长度受到限制（100m），否则τ的数值会太大\\n        以太网的帧不能太短，否则T0的值会太小，使α的值太大。\\n    信道利用率达到最大值Smax\\n        Smax= T0(T0 + τ) = 1/（1+α）\\n\\n3.4. 以太网的MAC层\\n\\n    MAC层的硬件地址\\n        在局域网中，硬件地址又称为物理地址，或MAC地址\\n        48位MAC地址\\n            前24位由IEEE的注册管理机构RA负责向厂家分配，作为组织唯一标识符\\n            后24位由厂家自行指派，称为扩展唯一标识符\\n    MAC帧的格式\\n    目的地址：6字节\\n    源地址：6字节\\n    类型：2字节\\n    IP数据报：46——1500字节\\n    FSC（校验码）：4字节\\n\\n四、扩展的以太网\\n4.1. 在物理层扩展以太网\\n\\n    使用光纤扩展\\n    使用集线器扩展\\n\\n4.2. 在数据链路层扩展以太网\\n\\n    扩展以太网更常用的方法是在数据链路层进行\\n    早期使用网桥，现在使用以太网交换机。\\n    网桥：\\n        工作在数据链路层。他根据MAC帧的目的地址对收到的帧进行转发和过滤。\\n        当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC地址，然后再确定将该帧转发到哪一个接口，或把他丢弃\\n    交换机：交换机集线器常称为以太网交换机（switch）或第二层交换机，强调这种交换机工作在数据链路层\\n        以太网交换机实质上就是一个多接口的网桥（通常都有十几个或更多的接口）。\\n        每个接口都直接与一个单台主机或另一个以太网交换机相连，并且一般都工作在全双工方式\\n        以太网交换机具有并行性（能同时联通多对接口，使多对主机能同时通信）\\n        相互通信的主机都是独占传输媒体，无碰撞地传输数据\\n        以太网交换机的接口有存储器，能在输出端口繁忙时把到来的帧进行缓存。\\n        以太网交换机是一种即插即用设备，其内部的帧交换表（又称为地址表）是通过自学习算法自动地逐渐建立起来的。\\n        以太网交换机使用了专门的交换结构芯片，用硬件转发，其转发速率要比使用软件转发的网桥快很多。\\n    以太网交换机的优点\\n        用户独享带宽，增加了总容量\\n        从共享总线以太网转到交换机以太网时，所有接入设备的软件和硬件、适配器等都不需要做任何改动。\\n        以太网交换机一般都具有多种速率的接口，方便了各种不同的用户\\n    以太网交换机的交换方式\\n        存储转发方式\\n            把这个数据帧先缓存后再进行处理。\\n        直通（cut-through）方式\\n            接受数据帧的同时就立即按数据帧的目的MAC地址决定该帧的转发接口，因而提高了帧的转发速度。\\n            缺点是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站\\n    以太网交换机的自学习功能\\n        以太网交换机运行自学习算法自动维护交换表\\n        开始时，以太网交换机里面的交换表是空的。\\n        按照自学习算法处理收到的帧和建立交换表\\n            A先向B发送一帧，从接口1进入交换机。\\n            交换机收到帧后，先查找交换表，没有查到应从哪个接口转发这个帧\\n            交换机把这个帧的源地址A和接口1写入交换表中，并向除接口1以外的所有接口广播这个帧\\n            C和D将丢弃这个帧，因为目的地址不对。只B才收下这个目的地址正确的帧。这也称为过滤。\\n            从新写入交换表（A，1）可以看出，以后不管从哪一个接口收到帧，只要其目的地址是A,就应当把收到的帧从接口1发送出去。\\n            B通过接口3向A发送一帧。\\n            交换机查找交换表，发现交换表中的MAC地址有A。表明要发送给A的帧（即目的地址为A的帧）应从接口1转发。于是就把这个帧传送到接口1转发给A。显然，现在已经没有必要再广播收到的帧。\\n            交换表这时新增加的项目（B，3）,表明今后如有发送给B的帧，就应当从接口3转发出去。\\n            经过一段时间后，只要主机C和D也向其他主机发送帧，以太网交换机的交换表就回吧转发到C或D应当经过的接口号（2或4）写入到交换表中。\\n            考虑到可能有时要在交换机的接口更换主机，或者主机要更换网络适配器，这就需要更改交换表中的项目，为此在交换表中的每个项目都设有一定的有效时间。过期的项目就自动被删除\\n    交换机自学习和转发帧的步骤\\n        1.交换机收到一帧后先进行自学习。查找交换表中与收到帧的源地址有无相匹配的项目\\n            如果没有，就在交换表中增加一个项目（源地址、进入的接口、有效时间）\\n            如果有，则把原有的项目进行更新（接入的接口或有效时间）\\n        2.转发帧。查找交换表中与收到帧的目的地址有无相匹配的项目\\n            如果没有，则向所有其他接口（进入的接口除外）转发。\\n            如果有，则按交换表中给出的接口进行转发。\\n            若交换表中给出的接口就是该帧进入交换机的接口，则应丢弃这个帧（因为这时不需要经过交换机进行转发）\\n    交换机使用了生成树协议\\n        IEEE 802.1D标准制定了一个生成树协议STP（Span宁 Tree Prtocol）\\n        其要点是：不改变网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是无环路的树状结构，从而笑出了兜圈子现象。\\n\\n4.3.虚拟局域网\\n\\n    利用以太网交换机可以很放标地实现虚拟局域网VLAN（Virtual LAN）\\n    虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。每一个VLAN的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个VLAN\\n    虚拟局域网其实只是局域网给用户提供的一种服务，而不是一种新型局域网。\\n    由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。\\n\\n五、高速以太网\\n5.1.100BASE-T以太网\\n\\n   速率达到或超过100Mbit/s的以太网称为告诉以太网\\n    100BASE-T在双绞线上传送100Mbit/s系带信号的星型拓扑以太网，人使用IEEE802.3的CSMA/CD协议。\\n\\n5.2.吉比特以太网\\n\\n   允许在1Gbit/s下全双工和半双工两种方式工作。\\n    使用IEEE802.3协议规定的帧格式\\n    在半双工下使用CSMA/CD协议，全双工方式不适用CSMA/CD协议。\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/e40014c0556eb5f7c70e9c456399ee60.jpg\",\"articleTitle\":\"2022-09-14 计算机网络之数据链路层\",\"categoryName\":\"学习\",\"id\":64,\"isTop\":0,\"originalUrl\":\"https://blog.csdn.net/weixin_44861708/article/details/111875155\",\"status\":1,\"tagNameList\":[],\"type\":2}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.25.177.142','广东省 电信','2022-09-14 20:26:54',NULL),
(1179,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"###### 3/8\\r\\n\\r\\n![image-20220308153016669](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308153016669.png)\\r\\n\\r\\n空间复杂度计算\\r\\n\\r\\n![image-20220308163338103](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220308163338103.png)\\r\\n\\r\\n对数运算法则：https://baike.baidu.com/item/%E5%AF%B9%E6%95%B0%E5%85%AC%E5%BC%8F/5557846?fr=aladdin\\r\\n\\r\\nloga(M/N)=logaM - logaN\\r\\n\\r\\n###### 3/13\\r\\n\\r\\n![image-20220313212637718](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313212637718.png)\\r\\n\\r\\n顺序表动态分配的实现：增加动态数组长度时要把数据复制到新的区域所以时间复杂度也比较高\\r\\n\\r\\n![image-20220313213230498](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220313213230498.png)\\r\\n\\r\\n###### 3/14\\r\\n\\r\\n插入操作总结：先移动表后面的元素，再移动前面的，每个元素往后移一位\\r\\n\\r\\n删除操作总结：先移动表前面的元素，再移动后面的，每个元素往前进一位\\r\\n\\r\\n最好情况：均在表尾插入/删除元素\\r\\n\\r\\n最坏：在表头插入、删除元素（移动次数多）\\r\\n\\r\\n![image-20220314173030789](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173030789.png)\\r\\n\\r\\n动态存储\\r\\n\\r\\n![image-20220314173152311](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314173152311.png)\\r\\n\\r\\n顺序表“随机存取”存储方式的原因,\\t单链表不支持，只能从头结点开始找\\r\\n\\r\\n![image-20220314181520001](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220314181520001.png)\\r\\n\\r\\n复杂度为O(1)\\r\\n\\r\\n```c\\r\\n\\r\\n//头插法 3/15\\r\\nvoid insertListHead(LinkList &l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n    l->next =NULL; //可能有那啥的脏数据\\r\\n\\tNode* newNode;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\tnewNode->next = l->next;\\r\\n\\t\\tl->next = newNode;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//尾插法 3/15\\r\\nvoid insertListTail(LinkList& l) {\\r\\n\\tl = (LinkList)malloc(sizeof(Node));\\r\\n\\tNode* newNode;\\r\\n\\tNode* tmp =l;\\r\\n\\tint num;\\r\\n\\twhile (scanf(\\\"%d\\\", &num) != EOF) {\\r\\n\\t\\tnewNode = (LinkList)malloc(sizeof(Node));\\r\\n\\t\\tnewNode->data = num;\\r\\n\\t\\ttmp->next = newNode;\\r\\n\\t\\ttmp = newNode; //tmp = tmp->next;\\r\\n\\t}\\r\\n    tmp->next =NULL;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n静态链表：![image-20220315213703769](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315213703769.png)\\r\\n\\r\\n\\r\\n\\r\\n增删链表效率高于顺序表\\r\\n\\r\\n![image-20220315215132762](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215132762.png)\\r\\n\\r\\n![image-20220315215427937](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220315215427937.png)\\r\\n\\r\\n###### 3/18\\r\\n\\r\\n第一章：\\r\\n\\r\\n栈是一种逻辑结构，可以顺序存储也可链式存储\\r\\n\\r\\nP4:综合应用题：\\r\\n\\r\\n01:对于两种不同的数据结构，逻辑结构或物理结构一定不相同吗？\\r\\n\\r\\n02:相同的逻辑结构，同一种运算在不同的存储方式下实现时，其运算效率不同\\r\\n\\r\\n答：如顺序表和链表，同属于线性表，但在表中查找、增加、删除元素时 时间复杂度不一样。在链式存储方式下，查找元素的时间复杂度为O(n)，在顺序存储方式下查找元素的时间复杂度为O(1)\\r\\n\\r\\n答：![image-20220320165638974](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220320165638974.png)\\r\\n\\r\\n\\r\\n\\r\\nP18:综合应用题：\\r\\n\\r\\n01:\\r\\n\\r\\n```c++\\r\\nif(length<1){\\r\\n\\treturn false;\\r\\n}\\r\\nElemtype del = data[length-1];\\r\\nElemtype tmp;\\r\\nint pos=0;\\r\\nfor(int i=0;i<length-1;i++){\\r\\n\\ttmp = data[i];\\r\\n\\tif(data[i]<tmp){\\r\\n\\t\\ttmp = data[i];\\r\\n\\t\\tpos++;\\r\\n\\t}\\r\\n}\\r\\n\\tdata[pos] = del;\\r\\n\\tlength--;\\r\\n\\r\\n\\treturn true;\\r\\n```\\r\\n\\r\\n02:\\r\\n\\r\\n```bash\\r\\nvoid Reverse(Sqlist &l){\\r\\n\\tElemType tmp;\\r\\n\\tint pos = l.length-1;\\r\\n\\tfor(i=0;i<l.length/2;i++){\\r\\n\\t\\ttmp = l.data[i];\\r\\n\\t\\tl.data[i]= l.data[pos];\\r\\n\\t\\tpos--;\\r\\n\\t\\tl.data[pos] = tmp;\\r\\n\\t}\\r\\n}\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n错题总结：\\r\\n\\r\\nP17:\\r\\n\\r\\n04：存取方式等同于查找，链表和顺序表相比下顺序表的存储效率更高所以选D\\r\\n\\r\\n06：因为顺序表可以通过下标随机访问元素，所以时间复杂度为O(1),同时删除最后一个结点的时间复杂度也为O(1) [直接找到这个元素将其置为空即可]\\r\\n\\r\\n08：线性表删除第i个元素移动n-i个元素即可\\r\\n\\r\\n###### 3/21\\r\\n\\r\\n![image-20220321163406818](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163406818.png)\\r\\n\\r\\n栈的出栈顺序数量的计算：卡特兰数\\r\\n\\r\\n![image-20220321163828984](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321163828984.png)\\r\\n\\r\\ntop++ 和++top的区别\\r\\n\\r\\n**top=0作为初始条件的情况**：top指针指向下一个待插入元素的地址，代码描述如图：\\r\\n\\r\\n![image-20220321164627443](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321164627443.png)\\r\\n\\r\\n栈满：top==MaxSize\\r\\n\\r\\n共享栈栈满条件：top1+1==top2\\r\\n\\r\\n循环队列：当rear和front指针在初始指向同一个位置，最后判断队空或堆满时的方法如图：\\r\\n\\r\\n![image-20220321171717178](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321171717178.png)\\r\\n\\r\\n括号匹配流程图\\r\\n\\r\\n![image-20220321175550753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175550753.png)\\r\\n\\r\\n用栈实现括号匹配：\\r\\n\\r\\n具体代码：\\r\\n\\r\\n```c\\r\\n#define Maxsize 10            //定义栈中元素的\\r\\ntypedef struct{\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top;                    //栈顶指针\\r\\n}SqStack;\\r\\n//初始化栈\\r\\nvoid InitStack(Sqstack &S)\\r\\n//判断栈是否为空\\r\\nbool stackEmpty(SqStack S)\\r\\n//新元素入栈\\r\\nbool Push(SqStack &S,char x)\\r\\n//栈顶元素出栈，用x返回\\r\\nbool Pop(SqStack &s,char &x)\\r\\n\\r\\n    //有栈的情况\\r\\nbool bracketCheck(char str[],int length) {\\r\\nSqStack s;\\r\\nInitStack(S); //初始化一个栈\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n\\tPush(S, str[i]); //扫描到左括号，入栈\\r\\n}else {\\r\\n\\tif (StackEmpty(S))//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\nPop(S,topElem);//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return StackEmpty(S);\\r\\n}\\r\\n\\r\\nbool compare(int x,int y){\\r\\n    if(x!=(y-1)){\\r\\n        return true;\\r\\n    }\\r\\n    return false;\\r\\n}\\r\\n       //无栈的情况\\r\\nbool bracketCheck1(char str[],int length) {\\r\\n int MaxSize = length;\\r\\nchar data[MaxSize];        //静态数组存放栈\\r\\nint top=-1;  \\r\\n\\r\\nfor (int i=0; i<length; i++){\\r\\nif (str[i]==\'(\' || str[i]==\'[\' || str[i]==\'{\'){\\r\\n    if(compare(top,length)){\\r\\n\\t\\ttop++;\\r\\n    \\tdata[top]= str[i];//扫描到左括号，入栈\\r\\n    }\\r\\n}else {\\r\\n\\tif (top==-1)//扫描到右括号，且当前栈空\\r\\n\\treturn false;//匹配失败\\r\\nchar topElem;\\r\\ntopElem = data[top];\\r\\n    top--;//栈顶元素出栈\\r\\nif(str[i]==\')\' && topElem!=\'(\')\\r\\n\\treturn false;\\r\\nelse if(str[i]==\']\'&& topElem!=\'[\')\\r\\n\\treturn false;\\r\\nif(str[i]==\'}\' && topElem!=\'{\')\\r\\nreturn false;\\r\\n\\t}\\r\\n}\\r\\n    return top==-1;\\r\\n}\\r\\n    \\r\\n    \\r\\n    \\r\\n```\\r\\n\\r\\n![image-20220321175834694](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220321175834694.png)\\r\\n\\r\\n###### 3/23~24\\r\\n\\r\\n![image-20220324080429724](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324080429724.png)\\r\\n\\r\\n程序输出结果只能是第一种（唯一性、确定性）\\r\\n\\r\\n后缀表达式的手算方法：\\r\\n\\r\\n从左往右扫描，每遇到一个运算符，就让运算符**前面最近的两个操作**数执行对应运算，合体为一个操作数\\r\\n\\r\\n注意：两个操作数的左右顺序\\r\\n\\r\\n机算：\\r\\n\\r\\n![image-20220324100504170](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324100504170.png)\\r\\n\\r\\n用栈实现后缀表达式的计算：\\r\\n\\r\\n①从左往右扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n----\\r\\n\\r\\n前缀表达式：\\r\\n\\r\\n**中缀表达式转前缀表达式（手算）**\\r\\n\\r\\n① 确定中缀表达式中各个运算符的运算顺序\\r\\n\\r\\n② 选择下一个运算符，按照「运算符 左操作数 右操作数」的方式组合成一个新的操作数\\r\\n\\r\\n③ 如果还有运算符没被处理，就继续 ②\\r\\n\\r\\n（“右优先”原则：只要右边的运算符能先计算，就优先算右边的）\\r\\n\\r\\n机算：\\r\\n\\r\\n用栈实现前缀表达式的计算：\\r\\n\\r\\n①从右往左扫描下一个元素，直到处理完所有元素\\r\\n\\r\\n②若扫描到操作数则压入栈，并回到①；否则执行③ \\r\\n\\r\\n③若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①\\r\\n\\r\\n![image-20220323214326729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214326729.png)\\r\\n\\r\\n\\r\\n\\r\\n中->前\\r\\n\\r\\n注：先弹出的是左操作数，后弹出的是右操作数\\r\\n\\r\\n\\r\\n\\r\\n![image-20220323214621134](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220323214621134.png)\\r\\n\\r\\n![image-20220324214643950](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220324214643950.png)\\r\\n\\r\\n上三角按行存放 <===> 下三角按列存放\\r\\n\\r\\n下三角按行存<====>上三角按列存\\r\\n\\r\\n![image-20220404155200213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404155200213.png)\\r\\n\\r\\n###### 4/1\\r\\n\\r\\n串\\r\\n\\r\\n字符编码：计算机在比较字符大小的时候从编码表中取出对应的二进制值的大小来比较\\r\\n\\r\\n 高四位 低四位\\r\\n\\r\\na 0110\\t0001  \\r\\n\\r\\n![image-20220401151418753](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401151418753.png)\\r\\n\\r\\nKMP：\\r\\n\\r\\n![image-20220401173325778](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401173325778.png)\\r\\n\\r\\n从第一位开始匹配：next[1] = 0,next[2] = 1;\\r\\n\\r\\nkmp算法中next数组中的值：指的是模式串指针回溯到该串第几位\\r\\n\\r\\n![image-20220401174809686](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220401174809686.png)\\r\\n\\r\\n**nextVal数组求法**，先让第一位=0\\r\\n\\r\\n###### 4/3~4/5\\r\\n\\r\\n满二叉树是一种特殊的完全二叉树，完全二叉树未必是满二叉树\\r\\n\\r\\n![image-20220403110614673](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403110614673.png)\\r\\n\\r\\ni<=n/2是分支结点，i>n/2是叶子结点\\r\\n\\r\\n![image-20220403114319211](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220403114319211.png)\\r\\n\\r\\n前序、后序、层次中的两种遍历结果组合不能确定一棵二叉树，因为没有中序\\r\\n\\r\\n![image-20220404164718616](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404164718616.png)\\r\\n\\r\\n线索化二叉树\\r\\n\\r\\n![image-20220404172003418](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220404172003418.png)\\r\\n\\r\\n----\\r\\n\\r\\n![image-20220405213126866](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220405213126866.png)\\r\\n\\r\\n效果上的等价：中序遍历森林 <====>对各个字数依次进行一次后根遍历\\r\\n\\r\\n###### 4/6\\r\\n\\r\\n哈夫曼树：最优二叉树\\r\\n\\r\\n带权路径最小的二叉树\\r\\n\\r\\n**并查集代码**\\r\\n\\r\\n![image-20220406120550029](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406120550029.png)\\r\\n\\r\\n最坏情况下时间复杂度与树的高度h相关\\r\\n\\r\\n优化合并操作 小树并入大树\\r\\n\\r\\n![image-20220406121508045](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121508045.png)\\r\\n\\r\\nfind()最坏时间复杂度变为O(logn)\\r\\n\\r\\n![image-20220406121805400](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220406121805400.png)\\r\\n\\r\\n树越矮，时间复杂度越低\\r\\n\\r\\nfind优化操作\\r\\n\\r\\n![image-20220407095927853](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407095927853.png)\\r\\n\\r\\n```c\\r\\n/*int Find(int nums[],int index){\\r\\n    int root = index;\\r\\n    while(nums[root]>=0){\\r\\n        root = nums[root];\\r\\n    }\\r\\n    while(index!=root){\\r\\n        int record = root;\\r\\n        nums[index] = root;\\r\\n        root = record;\\r\\n    }\\r\\n    return root;\\r\\n}*/\\r\\n//使树的高度不超过O(a(n))的数量级\\r\\n\\r\\n\\r\\n#pragma once\\r\\n#define Size 100\\r\\nint UFSets[Size];\\r\\n\\r\\n//初始化并查集\\r\\nvoid Initial(int S[]) {\\r\\n\\tfor (int i = 0;i < Size;i++) {\\r\\n\\t\\tS[i] = -1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n//查找操作，找x的根节点\\r\\nint Find(int s[], int x) {\\r\\n\\twhile (s[x]>0)\\r\\n\\t{\\r\\n\\t\\tx = s[x];\\r\\n\\t}\\r\\n\\treturn x;\\r\\n}\\r\\n\\r\\n//合并操作 根节点统一  树高<=logn + 1\\r\\nvoid Union(int s[], int root1, int root2) {\\r\\n\\tif (root1 == root2) {\\r\\n\\t\\treturn ;\\r\\n\\t}\\r\\n\\tif (s[root2] > s[root1]) { //root2是小树\\r\\n\\t\\ts[root1] += s[root2];\\r\\n\\t\\ts[root2] = root1;\\r\\n\\t}\\r\\n\\telse {\\r\\n\\t\\ts[root2] += s[root1];\\r\\n\\t\\ts[root1] = root2;\\r\\n\\t}\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\n![image-20220407102644213](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407102644213.png)\\r\\n\\r\\n错题：\\r\\n\\r\\n![image-20220407151722612](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407151722612.png)\\r\\n\\r\\n![image-20220407153146599](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407153146599.png)\\r\\n\\r\\n不用画哈夫曼树的方法，根据节点个数n得出合并次数n-1,然后这n-1个数相加\\r\\n\\r\\n![image-20220407171123064](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171123064.png)\\r\\n\\r\\n![image-20220407171457661](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220407171457661.png)\\r\\n\\r\\n该公式结论对做题有帮助 /列举法：5x2+4=14\\r\\n\\r\\n###### 4/16\\r\\n\\r\\n图的顶点个数 = 图的阶数\\r\\n\\r\\n![image-20220416121001775](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416121001775.png)\\r\\n\\r\\n若有n个顶点且边数大于n-1，则不是树/生成树，因为形成了回路\\r\\n\\r\\n设图G的邻接矩阵为A（矩阵元素为0/1)，则An的元素An[i] [j]等于由顶点i到顶点j的长度为n的路径的数目\\r\\n\\r\\n![image-20220416162035318](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416162035318.png)\\r\\n\\r\\n邻接表、邻接矩阵的**区别**\\r\\n\\r\\n![image-20220416163840634](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220416163840634.png)\\r\\n\\r\\n---\\r\\n\\r\\n# 4/18\\r\\n\\r\\n<h3>图的数据结构定义（邻接表）\\t</h3>\\r\\n\\r\\n```c\\r\\n// 邻接表中表对应的链表的顶点\\r\\ntypedef struct _ENode\\r\\n{\\r\\n    int ivex;             // 该边所指向的顶点的位置,是数组的下标\\r\\n    struct _ENode *next_edge;   // 指向下一条弧的指针\\r\\n}ENode, *PENode;\\r\\n\\r\\n// 邻接表中表的顶点\\r\\ntypedef struct _VNode\\r\\n{\\r\\n    char data;              // 顶点信息\\r\\n    ENode *first_edge;      // 指向第一条依附该顶点的弧\\r\\n}VNode;\\r\\n\\r\\n// 邻接表\\r\\ntypedef struct _LGraph\\r\\n{\\r\\n    int vexnum;             // 图的顶点的数目\\r\\n    int edgnum;             // 图的边的数目\\r\\n    VNode vexs[MAX];\\r\\n}LGraph;\\r\\n\\r\\n```\\r\\n\\r\\n\\r\\n\\r\\n**广度优先遍历：**和树的层次遍历类似，借用了辅助队列\\r\\n\\r\\n![image-20220418213147807](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213147807.png)\\r\\n\\r\\n![image-20220418213557320](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220418213557320.png)\\r\\n\\r\\n访问各个顶点所需时间+访问各边所需时间\\r\\n\\r\\n深度优先、广度优先生成树：邻接矩阵生成的唯一，而邻接表不唯一\\r\\n\\r\\n**深度优先遍历：**和树的**先根**遍历类似\\r\\n\\r\\n![image-20220419165025285](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220419165025285.png)\\r\\n\\r\\n---\\r\\n\\r\\nPrim算法和kruskal算法![image-20220421202140630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421202140630.png)\\r\\n\\r\\n![image-20220421213517892](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421213517892.png)\\r\\n\\r\\n考频只有一题的选择：\\r\\n\\r\\n![image-20220421215042729](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220421215042729.png)\\r\\n\\r\\n---\\r\\n\\r\\n关键路径\\r\\n\\r\\n![image-20220424212457566](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220424212457566.png)\\r\\n\\r\\n4/24复习\\r\\n\\r\\n![image-20220422181640348](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220422181640348.png)\\r\\n\\r\\ne(i) :活动ai最早开始的时间\\r\\n\\r\\nl(i) :活动ai最晚开始的时间\\r\\n\\r\\nvl(k)：活动vk最迟发生时间 vek:最早\\r\\n\\r\\n **查补漏缺：**最早开始时间和最迟开始时间的计算：王道P236.28(2019年真题)\\r\\n\\r\\n![image-20220429113037264](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220429113037264.png)\\r\\n\\r\\n差值为0的就是关键路径\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n#### 5 月\\r\\n\\r\\n![image-20220505203332110](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220505203332110.png)\\r\\n\\r\\n查找判定树\\r\\n\\r\\n判断「平衡二叉树」的 2 个条件：\\r\\n\\r\\n- **1. 是「二叉排序树」**\\r\\n- **2. 任何一个节点的左子树或者右子树都是「平衡二叉树」（左右高度差小于等于 1）**\\r\\n\\r\\n二叉排序树\\r\\n\\r\\n平衡二叉树\\r\\n\\r\\n二叉搜索树\\r\\n\\r\\n- 二叉搜索树（BST）——平衡二叉树（AVL）——红黑树（RBT），这三种树形查找结构一脉相承，逐层递进，要用心感受三者之间的联系，总结它们之间的共同点、不同点，否则后期复习很容易记忆错乱。\\r\\n\\r\\n---\\r\\n\\r\\n<h3>折半查找：</h3>\\r\\n\\r\\n只适用于有序的顺序表\\r\\n\\r\\n![image-20220801105659956](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801105659956.png)\\r\\n\\r\\n\\r\\n\\r\\n折半查找构成了二叉排序树\\r\\n\\r\\n可以把折半查找看成一颗二叉排序树\\r\\n\\r\\n![image-20220506172506706](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506172506706.png)\\r\\n\\r\\n二叉排序树删除操作\\r\\n\\r\\n![image-20220506173438156](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220506173438156.png)\\r\\n\\r\\n7.3.3中要重点了解的例1~3，例4\\r\\n\\r\\n**简单路径定义：**\\r\\n\\r\\n如果路径上的各顶点均不互相重复，称这样的路径为**简单路径**。如果路径上的第一个顶点与最后一个顶点重合，这样的路径称为**回路**(cycle)或**环**或**圈**\\r\\n\\r\\n---\\r\\n\\r\\n![image-20220512164410294](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512164410294.png)\\r\\n\\r\\n二叉排序树，平衡二叉树，红黑树时间复杂度对比表\\r\\n\\r\\n\\r\\n\\r\\n**红黑树性质**\\r\\n\\r\\n![image-20220512120734504](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512120734504.png)\\r\\n\\r\\n红黑树插入\\r\\n\\r\\n![image-20220512144705058](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512144705058.png)\\r\\n\\r\\n看“叔”脸色\\r\\n\\r\\n\\r\\n\\r\\n红黑树性质+插入总结：\\r\\n\\r\\n![image-20220512153750568](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220512153750568.png)\\r\\n\\r\\n图中：红黑树的任一节点的左右子树高度之差不超过2倍\\r\\n\\r\\n**B树**\\r\\n\\r\\n特性\\r\\n\\r\\n![image-20220517191547133](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517191547133.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517182017286](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517182017286.png)\\r\\n\\r\\n树的高度\\r\\n\\r\\n![image-20220517195601030](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517195601030.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517183218196](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517183218196.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220517202426310](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220517202426310.png)\\r\\n\\r\\n（上下限：除了根节点外，结点关键字个数n: )\\r\\n\\r\\n\\r\\n\\r\\n![image-20220519205336630](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220519205336630.png)\\r\\n\\r\\nB树/B+树类比\\r\\n\\r\\n---\\r\\n\\r\\n**散列（哈希表）**\\r\\n\\r\\n拉链法：同义词串成一个链表\\r\\n\\r\\n开放定址法![image-20220520184858217](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520184858217.png)\\r\\n\\r\\n着重考察：线性探测法、平方探测法\\r\\n\\r\\n\\r\\n\\r\\n再散列法：王道书上有误区的地方，应参考严蔚敏版![image-20220520185042751](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185042751.png)\\r\\n\\r\\n总结\\r\\n\\r\\n![image-20220520185629378](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220520185629378.png)\\r\\n\\r\\n装填因子概念也需重视\\r\\n\\r\\nQuestion1:\\r\\n\\r\\n将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) = (keyx3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。\\r\\n\\r\\n(1) 请画出所构造的散列表。\\r\\n\\r\\n(2) 分别计算等概率情况下查找成功和查找不成功的平均查找长度。\\r\\n\\r\\n![image-20220522195603948](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220522195603948.png)\\r\\n\\r\\n\\r\\n\\r\\n哈希表查找不成功时的平均查找长度计算和查找成功时的ASL：\\r\\n\\r\\n查找成功：每个元素被探测的次数加起来的总和/元素个数\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/23 排序算法\\r\\n\\r\\n插入排序法\\r\\n\\r\\n![image-20220523120242919](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220523120242919.png)\\r\\n\\r\\n---\\r\\n\\r\\n##### 5/27 快速排序\\r\\n\\r\\n时间、空间复杂度与递归层次有关\\r\\n\\r\\n![image-20220527151635848](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527151635848.png)\\r\\n\\r\\n**快排时间效率分析：**\\r\\n\\r\\n![image-20220527152551897](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527152551897.png)\\r\\n\\r\\n---\\r\\n\\r\\n408原题中的一趟排序、一次划分：一次划分调用partion()只能确定一个元素的最终位置（如轴值），而一趟排序可以确定多个元素的最终位置\\r\\n\\r\\n![image-20220527153223741](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527153223741.png)\\r\\n\\r\\n---\\r\\n\\r\\n###### **8.3.3**\\r\\n\\r\\n---\\r\\n\\r\\n第七题：**x趟排序应产生x个分界线。**\\r\\n\\r\\n确定分界线：法1、顺序找整个原数组，如果发现左边均小于该数右边均大于该数则该数为分界线（之一）\\r\\n\\r\\n法2、原数组从左往右和正确序列的数组进行对比，相同的即为分界线\\r\\n\\r\\n![image-20220527163829533](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527163829533.png)\\r\\n\\r\\n---\\r\\n\\r\\n第9题：关于快排的**完美**划分\\r\\n\\r\\n完美划分指的是经过一趟排序后生成的原基准新位置左右两个基准中，每个基准左右都是符合排序规律的（即左边的数比他小右边的比他大），如果符合的个数越多则排序速度越快\\r\\n\\r\\n排序速度最慢：原数组已基本有序\\r\\n\\r\\n![image-20220527170237805](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220527170237805.png)\\r\\n\\r\\n##### 5/29 堆排序\\r\\n\\r\\n最主要的算法还是向下调整HeadAdjust()函数\\r\\n\\r\\n![image-20220529164723637](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529164723637.png)\\r\\n\\r\\n\\r\\n\\r\\n![image-20220529165608132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529165608132.png)\\r\\n\\r\\n堆排序的空间复杂度：常数级 O(1)\\r\\n\\r\\n因此 一次完整的堆排序 我们需要O(n)这样的一个时间来建堆 然后还需要nlog2^n这样的时间来进行排序，两个大O相加，整体时间复杂度为O(n*logn)\\r\\n\\r\\n![image-20220529170403872](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529170403872.png)\\r\\n\\r\\n堆的插入和删除\\r\\n\\r\\n考试可能考比较次数\\r\\n\\r\\n![image-20220529172811881](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220529172811881.png)\\r\\n\\r\\n\\r\\n\\r\\n##### 5/30 归并排序+基数排序\\r\\n\\r\\n二路归并：把两个已经有序的序列合并成一个\\r\\n\\r\\n**m路归并：**我们要从这m路当中选出一个最小的元素或者最大的元素 至少需要对比关键字m-1次\\r\\n\\r\\n![image-20220530201445366](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530201445366.png)\\r\\n\\r\\n**基数排序：**代码不怎么考，主要手算模拟即可\\r\\n\\r\\n![image-20220530203930350](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220530203930350.png)\\r\\n\\r\\n---\\r\\n\\r\\n排序算法的空间、时间复杂度\\r\\n\\r\\n![image-20220531195457004](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531195457004.png)\\r\\n\\r\\n\\r\\n\\r\\n5/31外部排序\\r\\n\\r\\n\\r\\n\\r\\n![image-20220531214333361](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214333361.png)\\r\\n\\r\\nr<=K^h-1 ,树的结点最大的一层\\r\\n\\r\\n要归并的数据都是分块读入内存的\\r\\n\\r\\n![image-20220531214752539](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531214752539.png)\\r\\n\\r\\n\\r\\n\\r\\n**纠正王道书**：k路平衡归并，如图7.8，根节点的孩子只有R1和R2，所以度是2而不是4，但归并段个数是合理的\\r\\n\\r\\n![image-20220531215026199](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220531215026199.png)\\r\\n\\r\\n\\r\\n\\r\\n可见当有10个文件， 进行**2路归并**，需要进行**4次**归并操作，而进行**5路归并**，则只需要**2次**归并操作。**因此对于 k路平归并排序中 k 值得选择，增加 k 可以减少归并的次数，从而减少外存读写的次数，最终达到提高算法效率的目的**。\\r\\n\\r\\n个人认为简单的理解就是增加每个归并段中的元素个数，但增加了元素个数，段内排序关键字比较次数会变多\\r\\n\\r\\n##### 6/2 结尾\\r\\n\\r\\n**败者树**：对于k路归并，第一次构造败者树需要对比关键字k-1次，\\r\\n\\r\\n但构建好之后选出了最小元素，只需对比关键字**logK**次（向上取整）,同时也是该败者树的高度\\r\\n\\r\\n考查手算模拟即可\\r\\n\\r\\n![image-20220602155542194](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602155542194.png)\\r\\n\\r\\n---\\r\\n\\r\\n**置换选择排序：**减少初始归并段的个数\\r\\n\\r\\n所谓的**置换**其实指的就是我们每一次会选一个更小的记录 把它从内存工作区置换出去，然后为什么叫**选择**呢 因为我们每次是选择最小的一个值 所以这个算法才叫置换-选择\\r\\n\\r\\n![image-20220602161911437](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602161911437.png)\\r\\n\\r\\n\\r\\n\\r\\n---\\r\\n\\r\\n**最佳归并树**\\r\\n\\r\\n![image-20220602174054132](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602174054132.png)\\r\\n\\r\\n**重要结论：**在把这些初始归并段归并的过程当中 磁盘I/O的次数应该是等于归并树的带权路径长度乘以2\\r\\n\\r\\nk叉最佳归并树：\\r\\n\\r\\n![image-20220602164837160](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602164837160.png)\\r\\n\\r\\nn_0 = (k-1)n_k + 1 (n_k:度为k的结点，n_0:度为0的结点 )\\r\\n\\r\\n![image-20220602165011687](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602165011687.png)\\r\\n\\r\\n---\\r\\n\\r\\n<h3>**各种排序算法的性质总结**</h3>\\r\\n\\r\\n\\r\\n\\r\\n![image-20220602170322008](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602170322008.png)\\r\\n\\r\\n优化后的快排：时间复杂度上平均、最好、最坏都是O(nlogn)\\r\\n\\r\\n\\r\\n\\r\\n排序趟数与序列的原始状态**无关**的排序方法：直接插入排序、选择排序、基数排序\\r\\n\\r\\n![image-20220602201630861](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220602201630861.png)\\r\\n\\r\\n---\\r\\n\\r\\n### 8/1 算法题\\r\\n\\r\\n数组题解题框架：\\r\\n\\r\\n![image-20220801155037671](https://ykai-blog.oss-cn-shenzhen.aliyuncs.com/img/typora/image-20220801155037671.png)\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"数据结构\",\"categoryName\":\"算法\",\"id\":65,\"isTop\":0,\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.170.52','广东省深圳市 电信','2022-09-29 10:59:24',NULL),
(1180,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"\\n英语大作文整理\\n2011，国内市场份额\\n\\nGiven is a column chart which clearly illustrates the share of the domestic auto-mobile market among Chinese, Japanese and American brands from 2008 to 2009. To be specific, the percentage of Chinese auto-mobile brands has ascended remarkably, from 25% to its peak at nearly 30%. During the same period, the statistics of Japanese brands revealed a sharp decline, from 35% to 25%.\\n\\nTwo primary factors that account for the above mentioned chances could be summarized as follows. First and foremost, with the prosperity of the economy in China and the increase in people\'s income, a large number of people prefer domestic products rather than foreign products. Meanwhile, the fact can not be ignored that the cars made in China are increasingly qualified. In addition, the authorities concerned in China put more emphasis on native industry and provide relevant policies and laws to create a favorable environment which enables the automobile industry to expand their scale.\\n\\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the Chinese industry to try promotion that will reinforce Chinese brands\' image.\\n2012，员工满意度调查\\n\\nGiven is a table which clearly illustrates the statistics of staff satisfaction on the job in a certain company. Based upon the data given above, we can conclude that the percentage of people satisfied with their job is highest among those over 50 years, at about 40%. In contrast, the percentage of staff not satisfied with their job is about 64% among those in their forties, the highest among all the three groups.\\n\\nSeveral primary factors that account for the above-mentioned number could be summarized as follows. To begin with, staff members in their forties usually have to undertake a lot of responsibilities from their family and their career. Sometimes they are even under pressure to pursue money, power, high social status and so on, which are all symbols of success. In addition, people over 50 generally have shifted their life goals from achieving the ultimate success to a relatively easy and comfortable life, and therefore tend to be content with their job.\\n\\nIn view of the above reasoning, I am convinced that it is difficult for everyone to be satisfied with their jobs. And it is advisable for them to adjust their expectations for work and the companies should put more emphasis on their staff\'s welfare.(207词)\\n2013，大学生兼职\\n\\nGiven is a column chart which clearly reveals the statistics of students taking a part-time job in a certain university. Based upon the data given above, we can conclude that the percentage of students taking a part-time job has increased remarkably, from 67.77% within freshman to its peak at 88.24% within seniors.\\n\\nSeveral primary factors that account for the above-mentioned could be summarized as follows. To begin with, the prosperity of the economy in China has provided ample part-time job opportunities for university students. Therefore, not only can they take part in extracurricular activities, but take a part-time job in their spare time. In addition, taking a part time job can help students to adjust to the social employment environment. But taking a part-time job is also a double-edged sword for students. Working after class means a dedication on time to study, which would have a negative effect on the academic performance of students.\\n\\nIn conclusion, it is the student\'s capability on time management that determines whether a part-time job is beneficial for students or has a negative effect on the studies. If a student is able to maintain a balance between studying and a part-time job, she/he will have the best of both worlds.\\n2014，城镇人口变化\\n\\nGiven is a column chart which clearly illustrates the striking chances of China’s population in the town and the rural from 1990 to 2010. From 1990 to 2010, the number of the town population has increased remarkably from 300 million to its peak at 666 million, a rise of 366 million. During the same period, the statistics of the rural population decreased from 834 million to 674 million.\\n\\nSeveral primary factors that account for the above-mentioned changes could be summarized as follows. First and foremost, it goes without saying that such a sharp increase result from the reform and opening-up in the past few decades. Furthermore, the Chinese economic prosperity has provided ample job opportunities in urban areas, which attach more ordinary people for a job, especially for those migrant workers who move to urban areas from rural areas. More importantly, the authorities concerned in China have put more emphasis on infrastructure establishment, such as the transport system and cultural centers, to satisfy the requirements of dwellers.\\n\\nIn conclusion, as people in counting numbers move to urban areas, we can not ignore challenges that urbanization has put into the natural resources, the environment, job market and public services.(203词)\\n2015，饼状图描述春节假期支出情况\\n\\nGiven is a pie chart which clearly reflects the spending of the spring festival vacation in a certain city in China. Based upon the data given above, we can conclude that the percentage of New Year presents is the highest among four categories, accounting for 40%. The statistics of transportation, gathering and other factors account for 20%, 20% and 20% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. It goes without saying that the fundamental contributor for such a seniol results from the prosperity of the Chinese economy, which enables people to have money to purchase New Year gifts for their intimate friends. In addition, exchanging presents during the spring festival is a long-standing history of Chinese custom because it symbols the congratulations and the good relationship between you and the receiver. Furthermore, the traditional festival is a good time for people to spend money to go back home and get together with their family.\\n\\nIn conclusion, various factors that people spend money during the festival reveal that Chinese people\'s living standard has a sharp increase since the reform and opening-up. If we try our utmost effort, the future will be promising and hopeful.\\n2016，旅游目的\\n\\nGiven is a pie chart which clearly illustrates the purpose of touring for students in a certain university. Based upon the data given above, the percentage of appreciating landscapes and relieving pressure are the highest among those five categories, accounting for 37% and 33% respectively. By contrast, the percentage of making friends through tours, cultivating ability and other goals take up 9%, 6% and 15% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. First of all, college students are best characterized by their strong curiosity for the mysteries of nature, which enables them to choose travel as an approach to enjoy and explore natural beauty. In addition, compared with other tourists, college students usually suffer more burdens in academic studies. In order to relieve stress, it is advisable to travel on a good day. Finally, in the way of traveling, you will find more interesting individuals with whom you can make friends. And there are opportunities to cultivate your ability of independence, which is essential for your future.\\n\\nDespite students in mounting numbers enjoying the trip during the vacation, there are also a few caveats that students are supposed to bear in mind.\\nTo begin with, it is of great necessity for students to make plans before their departure. Moreover, it is essential for every student to put great emphasis on their safety.\\n2017，博物馆和游客数量变化\\n\\nGiven is a line chart which clearly illustrates the change of the number of museums and the statistics of visitors between 2013 and 2015. Based upon the data given above, we may draw the conclusion that the percentage of the museum has ascended remarkably from 6378 to 7811 , an increase of 1433. During the same period, the number of visitors has also increased from 416.5 million to 469.2 million.\\n\\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. In the first place, with the prosperity of the economy in China and the increase in people\'s income in recent decades, a large number of people are paying attention to appreciating the traditional culture of China. In the second place, the government has provided relevant policies to create a favorable environment, including encouraging more cities to build more museums which enable a host of citizens to pursue spiritual enjoyment.\\n\\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the government to focus more eyesight on national cultural literacy. In addition, it is of great necessity for museums administrators to work out comprehensive strategies to enhance their services. If they try their utmost to do so, the future of our culture will be more promising.\\n2018，餐馆选择的因素\\n\\nGiven is a pie chart which clearly reveals the factors of the customer\'s concern about choosing restaurants in a certain city in 2017. Bosed upon the data given above, we can conclude that the percentage of feature and service are the highest among those five categories, accounting for 36.3% and 26.8% respectively. And the statistics of environment, price and other factors take up 23.8%, 8.4% and 4.7% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, it goes without saying that the fundamental contributor for such a scenario results from the prosperity of the Chinese economy. With the increase of people\'s income since the reform and opening-up, a large number of people are paying more attention to the features of a restaurant instead of prices. In addition, in a bid to develop interpersonal relationships and enjoy a comfortable life, consumers in mounting numbers prefer service and environment to other factors.\\n\\nIn conclusion, it is advisable for restaurants to adapt to a combination of conventional and innovative approaches to improve their service and create more features. More importantly, it is necessary to put more emphasis on the consumers\' feedback and comments. If they try their utmost to do so, the future will be hopeful and promising.\\n2019，大学生毕业去向\\n\\nGiven is a column chart which clearly reveals the change in a certain university graduates’ \\\"next station” between 2013 and 2018. Based upon the data given above, we can conclude that the percentage of seeking employment has decreased from 68.1% to 60.7%, a decline of 7.4%. During the same period, the statistics of receiving further education and running their own business have increased from 26.3% and 1.3% to 34% and 2.6% respectively.\\n\\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. To begin with, with the prosperity of the Chinese economy, there has been a great change in people\'s ideas about seeking employment, and they are becoming increasingly aware of the necessity of receiving further education. In addition, the decline of seeking employment is also attributed to challenges that the employment environment has posed to the job market. More and more employers are likely to choose graduates with higher education degrees rather than the people who seek employment directly after graduation.\\n\\nIn conclusion, with graduates in mounting numbers choosing to receive further education, I am convinced that a postgraduate\'s degree may bring them better job opportunities, which also arouse my enthusiasm for academic research.\\n2021,调查运动锻炼方式\\n\\nGiven is a column chart which clearly illustrates the contrasts in a survey of exercising forms for residents in a certain city. Based upon the data given above, we can conclude that the percentage of exercising alone and doing sports with friends is the highest among those four categories, accounting for 54.3% and 47.7% respectively. In contrast, the statistics of exercising with family and group activity only take up 23.9% and 15.8% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, the authorities concerned in China have put great emphasis on infrastructure establishment, including the sport park, which enables residents to have more areas to do sports. In addition, a large number of people who choose to exercise alone or exercise with their friends are attributed to work or study pressure. Doing sports is a good way for them to relieve their stress. Moreover, exercising and playing sports can have huge benefits for a person\'s strength, agility, and figure, helping to improve one\'s immune system.\\n\\nIn conclusion, as people in mounting numbers do sports, it is advisable for the authorities concerned to build more sports areas and tools to satisfy the requirements of residents. More importantly, by fostering enthusiasm for sports and exercise, society can ensure a generation of healthy and sportsmanlike citizens.\\n\",\"articleCover\":\"\",\"articleTitle\":\"2022-10-01 考研英语历年真题大作文整理\",\"categoryName\":\"English\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 20:52:56',NULL),
(1181,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"**英语大作文整理**\\n2011，国内市场份额\\n\\nGiven is a column chart which clearly illustrates the share of the domestic auto-mobile market among Chinese, Japanese and American brands from 2008 to 2009. To be specific, the percentage of Chinese auto-mobile brands has ascended remarkably, from 25% to its peak at nearly 30%. During the same period, the statistics of Japanese brands revealed a sharp decline, from 35% to 25%.\\n\\nTwo primary factors that account for the above mentioned chances could be summarized as follows. First and foremost, with the prosperity of the economy in China and the increase in people\'s income, a large number of people prefer domestic products rather than foreign products. Meanwhile, the fact can not be ignored that the cars made in China are increasingly qualified. In addition, the authorities concerned in China put more emphasis on native industry and provide relevant policies and laws to create a favorable environment which enables the automobile industry to expand their scale.\\n\\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the Chinese industry to try promotion that will reinforce Chinese brands\' image.\\n2012，员工满意度调查\\n\\nGiven is a table which clearly illustrates the statistics of staff satisfaction on the job in a certain company. Based upon the data given above, we can conclude that the percentage of people satisfied with their job is highest among those over 50 years, at about 40%. In contrast, the percentage of staff not satisfied with their job is about 64% among those in their forties, the highest among all the three groups.\\n\\nSeveral primary factors that account for the above-mentioned number could be summarized as follows. To begin with, staff members in their forties usually have to undertake a lot of responsibilities from their family and their career. Sometimes they are even under pressure to pursue money, power, high social status and so on, which are all symbols of success. In addition, people over 50 generally have shifted their life goals from achieving the ultimate success to a relatively easy and comfortable life, and therefore tend to be content with their job.\\n\\nIn view of the above reasoning, I am convinced that it is difficult for everyone to be satisfied with their jobs. And it is advisable for them to adjust their expectations for work and the companies should put more emphasis on their staff\'s welfare.(207词)\\n2013，大学生兼职\\n\\nGiven is a column chart which clearly reveals the statistics of students taking a part-time job in a certain university. Based upon the data given above, we can conclude that the percentage of students taking a part-time job has increased remarkably, from 67.77% within freshman to its peak at 88.24% within seniors.\\n\\nSeveral primary factors that account for the above-mentioned could be summarized as follows. To begin with, the prosperity of the economy in China has provided ample part-time job opportunities for university students. Therefore, not only can they take part in extracurricular activities, but take a part-time job in their spare time. In addition, taking a part time job can help students to adjust to the social employment environment. But taking a part-time job is also a double-edged sword for students. Working after class means a dedication on time to study, which would have a negative effect on the academic performance of students.\\n\\nIn conclusion, it is the student\'s capability on time management that determines whether a part-time job is beneficial for students or has a negative effect on the studies. If a student is able to maintain a balance between studying and a part-time job, she/he will have the best of both worlds.\\n2014，城镇人口变化\\n\\nGiven is a column chart which clearly illustrates the striking chances of China’s population in the town and the rural from 1990 to 2010. From 1990 to 2010, the number of the town population has increased remarkably from 300 million to its peak at 666 million, a rise of 366 million. During the same period, the statistics of the rural population decreased from 834 million to 674 million.\\n\\nSeveral primary factors that account for the above-mentioned changes could be summarized as follows. First and foremost, it goes without saying that such a sharp increase result from the reform and opening-up in the past few decades. Furthermore, the Chinese economic prosperity has provided ample job opportunities in urban areas, which attach more ordinary people for a job, especially for those migrant workers who move to urban areas from rural areas. More importantly, the authorities concerned in China have put more emphasis on infrastructure establishment, such as the transport system and cultural centers, to satisfy the requirements of dwellers.\\n\\nIn conclusion, as people in counting numbers move to urban areas, we can not ignore challenges that urbanization has put into the natural resources, the environment, job market and public services.(203词)\\n2015，饼状图描述春节假期支出情况\\n\\nGiven is a pie chart which clearly reflects the spending of the spring festival vacation in a certain city in China. Based upon the data given above, we can conclude that the percentage of New Year presents is the highest among four categories, accounting for 40%. The statistics of transportation, gathering and other factors account for 20%, 20% and 20% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. It goes without saying that the fundamental contributor for such a seniol results from the prosperity of the Chinese economy, which enables people to have money to purchase New Year gifts for their intimate friends. In addition, exchanging presents during the spring festival is a long-standing history of Chinese custom because it symbols the congratulations and the good relationship between you and the receiver. Furthermore, the traditional festival is a good time for people to spend money to go back home and get together with their family.\\n\\nIn conclusion, various factors that people spend money during the festival reveal that Chinese people\'s living standard has a sharp increase since the reform and opening-up. If we try our utmost effort, the future will be promising and hopeful.\\n2016，旅游目的\\n\\nGiven is a pie chart which clearly illustrates the purpose of touring for students in a certain university. Based upon the data given above, the percentage of appreciating landscapes and relieving pressure are the highest among those five categories, accounting for 37% and 33% respectively. By contrast, the percentage of making friends through tours, cultivating ability and other goals take up 9%, 6% and 15% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. First of all, college students are best characterized by their strong curiosity for the mysteries of nature, which enables them to choose travel as an approach to enjoy and explore natural beauty. In addition, compared with other tourists, college students usually suffer more burdens in academic studies. In order to relieve stress, it is advisable to travel on a good day. Finally, in the way of traveling, you will find more interesting individuals with whom you can make friends. And there are opportunities to cultivate your ability of independence, which is essential for your future.\\n\\nDespite students in mounting numbers enjoying the trip during the vacation, there are also a few caveats that students are supposed to bear in mind.\\nTo begin with, it is of great necessity for students to make plans before their departure. Moreover, it is essential for every student to put great emphasis on their safety.\\n2017，博物馆和游客数量变化\\n\\nGiven is a line chart which clearly illustrates the change of the number of museums and the statistics of visitors between 2013 and 2015. Based upon the data given above, we may draw the conclusion that the percentage of the museum has ascended remarkably from 6378 to 7811 , an increase of 1433. During the same period, the number of visitors has also increased from 416.5 million to 469.2 million.\\n\\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. In the first place, with the prosperity of the economy in China and the increase in people\'s income in recent decades, a large number of people are paying attention to appreciating the traditional culture of China. In the second place, the government has provided relevant policies to create a favorable environment, including encouraging more cities to build more museums which enable a host of citizens to pursue spiritual enjoyment.\\n\\nTalking into account what has been argued, we can come to the conclusion that this established trend is positive and therefore acceptable. It is advisable for the government to focus more eyesight on national cultural literacy. In addition, it is of great necessity for museums administrators to work out comprehensive strategies to enhance their services. If they try their utmost to do so, the future of our culture will be more promising.\\n2018，餐馆选择的因素\\n\\nGiven is a pie chart which clearly reveals the factors of the customer\'s concern about choosing restaurants in a certain city in 2017. Bosed upon the data given above, we can conclude that the percentage of feature and service are the highest among those five categories, accounting for 36.3% and 26.8% respectively. And the statistics of environment, price and other factors take up 23.8%, 8.4% and 4.7% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, it goes without saying that the fundamental contributor for such a scenario results from the prosperity of the Chinese economy. With the increase of people\'s income since the reform and opening-up, a large number of people are paying more attention to the features of a restaurant instead of prices. In addition, in a bid to develop interpersonal relationships and enjoy a comfortable life, consumers in mounting numbers prefer service and environment to other factors.\\n\\nIn conclusion, it is advisable for restaurants to adapt to a combination of conventional and innovative approaches to improve their service and create more features. More importantly, it is necessary to put more emphasis on the consumers\' feedback and comments. If they try their utmost to do so, the future will be hopeful and promising.\\n2019，大学生毕业去向\\n\\nGiven is a column chart which clearly reveals the change in a certain university graduates’ \\\"next station” between 2013 and 2018. Based upon the data given above, we can conclude that the percentage of seeking employment has decreased from 68.1% to 60.7%, a decline of 7.4%. During the same period, the statistics of receiving further education and running their own business have increased from 26.3% and 1.3% to 34% and 2.6% respectively.\\n\\nSeveral primary factors that account for the above-mentioned change could be summarized as follows. To begin with, with the prosperity of the Chinese economy, there has been a great change in people\'s ideas about seeking employment, and they are becoming increasingly aware of the necessity of receiving further education. In addition, the decline of seeking employment is also attributed to challenges that the employment environment has posed to the job market. More and more employers are likely to choose graduates with higher education degrees rather than the people who seek employment directly after graduation.\\n\\nIn conclusion, with graduates in mounting numbers choosing to receive further education, I am convinced that a postgraduate\'s degree may bring them better job opportunities, which also arouse my enthusiasm for academic research.\\n2021,调查运动锻炼方式\\n\\nGiven is a column chart which clearly illustrates the contrasts in a survey of exercising forms for residents in a certain city. Based upon the data given above, we can conclude that the percentage of exercising alone and doing sports with friends is the highest among those four categories, accounting for 54.3% and 47.7% respectively. In contrast, the statistics of exercising with family and group activity only take up 23.9% and 15.8% respectively.\\n\\nSeveral primary factors that account for the above-mentioned data could be summarized as follows. To begin with, the authorities concerned in China have put great emphasis on infrastructure establishment, including the sport park, which enables residents to have more areas to do sports. In addition, a large number of people who choose to exercise alone or exercise with their friends are attributed to work or study pressure. Doing sports is a good way for them to relieve their stress. Moreover, exercising and playing sports can have huge benefits for a person\'s strength, agility, and figure, helping to improve one\'s immune system.\\n\\nIn conclusion, as people in mounting numbers do sports, it is advisable for the authorities concerned to build more sports areas and tools to satisfy the requirements of residents. More importantly, by fostering enthusiasm for sports and exercise, society can ensure a generation of healthy and sportsmanlike citizens.\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"2022-10-01 考研英语历年真题大作文整理\",\"categoryName\":\"English\",\"id\":66,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 20:53:46',NULL),
(1182,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"\\n英语小作文整理\\n校园生活\\n校园活动举办目的，参加效果，在大学里可以参加哪些活动，有哪些效果等（通知类，建议信）\\n\\n  >   In order to broaden high school students\' horizons and enrich their extracurricular activities, our university is going to hold a summer camp during this summer vacation.\\n    The high school students in this camp will be involved in various activities, such as speech contests and debates, attending group discussions and so on.(sport meeting, social gatherings)\\n    Participating in a variety of activities organized by us, they will be able to demonstrate their outstanding abilities, helping them to develop a range of practical skills.\\n    Their active participation will help them in strengthening their sense of responsibility and develop good international relationships.\\n\\n校园活动举办的一些细节，时间，地点等（通知，介绍信）\\n> \\n    活动举办目的参考上述校园活动举办目的\\n    活动地点将在娱乐中心，时间：The Student Union of our university is organizing a school-wide singing contest to be held at the Student\'s Recreational Center on March 1, 2022.\\n    邀请教授当评委：Five prestigious professors will be invited as honorable judges.\\n\\n校园志愿者招募，校园活动相关咨询表达（通知类，招募信）\\n\\n   >  有经验者优先：Preference will be given to those experienced in international activities and other similar activities.\\n    咨询方式：Call 86754321 or email poster@ccc.edu.cn for an application and for information on the interview.\\n    有兴趣者来：Those who are interested in being volunteers may sign up with their class monitor before June 10, 2022.\\n    咨询：If you have further questions or concerns, please feel free to email your questions to library@ssu.edu.can.\\n    基本要求：Basic requirements are familiarity with the theme of the conference and proficiency in English.\\n    其他要求：Other requirements include good international communication abilities and a strong sense of responsibility.\\n\\n介绍校园生活，如欢迎交换生，或者是表弟等亲戚考入大学，或者某某谁想要了解一下大学生活，有快乐，有烦恼，先对他们的到来表示欢迎（建议信）\\n\\n   >  欢迎，祝贺：On behalf of the Students’ Union of GuangDong University of Technology, I would like to_____（extend our heartfelt welcome,congratulations）\\n    很高兴给你建议：It is my great pleasure to offer you several practical suggestions.\\n    校园生活不像你想的：Life in this university is perhaps not as easy as you have expected.\\n    繁杂的课堂作业和考试：You may be tightly bound by daily classes, abundant homework, frequent exams.\\n    尽管有压力，还是有很多校园活动，此处校园活动可参考上述校园活动参加效果等\\n    总结一下，有很多烦恼，也有很多快乐，你在校园的日子爽歪歪：All in all, although there is a lot of pressure, the time you spend on the campus will be worthwhile and enhance your whole life.\\n\\n朋友往来\\n感谢朋友的帮助，无论是交换生住他的房子还是他带你去旅游，期待他有机会来让我感谢他\\n\\n  >   交代地点，时间：Thank you very much for those five wonderful days at your house. Every moment was a delight.\\n    以前从没有这样的放松经历：I can not remember ever having enjoy myself so thoroughly elsewhere.\\n    我想告诉你我有多么感谢你：This is to tell you how much I enjoyed the weekend in GuangZhou.\\n    描述一些细节：Everything was just perfect: the weather, your company and the surroundings.\\n    No wonder I am finding it difficult to get down to reading in this morning. The classroom life seems so dull and prosaic compared to the days in GuangZhou.\\n    结尾感谢和邀请：I hope you can know how much I appreciate your hospitality and thoughtful kindness to me.\\n    I count myself fortunate indeed to have such a generous and charming friend as you.\\n    I hope something will bring you to Beijing so that I can reciprocate your great kindness.\\n\\n很高兴听到朋友的某样消息，需要给他建议，如学习上的建议，校园生活的建议可参考上述校园类中的校园生活\\n建议某机构\\n给图书馆等机构建议，提升服务\\n\\n   >  As a senior student in this university who is particular keep on reading in the library in my spare time.\\n    I am writing to make several suggestions for improving service here.\\n    To begin with, compared to students\' need, the number and variety of books are not adequate.\\n    It is advisable to purchase more latest books.\\n    In addition, since so many students are preparing for the national entrance examination for postgraduates, it is of great necessity to prolong the opening time of reading room where they study.\\n    I hope you could know how much I appreciate your kind assistance to us, it is your devoted work that enables us to enjoy such a supportive atmosphere of study in the library.\\n\\n给报社编辑这类机构里的某个人建议，针对主题\\n建议某机构或者学校装设备\\n\\n  >  I am writing to request that the Internet be installed in the dormitories .\\n    Not only do professors require students to use it for research, but much communication is done between professors and students through email as well.\\n    In addition, some professors are beginning to post their lecture notes online for students to review in their spare time.\\n    I trust you will take my suggestions into account.\\n\\n推荐景点，书籍，电影，人物\\n景点，长城和故宫，介绍城市或者省份，那就是北京，同样可以介绍北京里面的长城和故宫\\n\\n  >  城市：Beijing 故宫：The Palace Museum 长城：The Great Wall\\n    The palace Museum, also known as the Forbidden City, was the imperial palace of the Ming and Qing Dynasties. It is also the largest piece of ancient Chinese architecture currently exiting.\\n    The Great Wall, symbolizing China\'s ancient civilization, is one of the world\'s most famous projects. As the great creation of the ancient Chinese people and one of the wonders of the world, it was listed as one of the world cultural heritage sites by the United Nations Education, Scientific and Cultural Organization in 1987.\\n\\n书籍，论语\\n\\n论语的介绍可以参考下面关于孔子的描述\\n\\n   > 结尾一句：I hope the above information will help you to understand the book. If you need any further information about selection, please do not hesitate to contact me.\\n\\n电影\\n人物，孔子\\n\\n  >  孔子：Confucius，孔学思想：confucian thought，儒学：confucianism\\n    介绍孔子：As a great thinker, educator and founder of Confucianism, Confucius is a ancient sage during the Spring and Autumn period.\\n    孔子相关的内容，介绍论语：His words and life stories were recorded by his disciples and their students in The Analects.\\n    As an enduring classic of Chinese culture, The Analects has influenced all thinkers, writers and politicians in the over-2000-year-long history of China since Confucius.\\n    No scholar could truly understand this long-standing culture and the inner world of ancient China without this book.\\n    儒家文化的天人合一思想：Much of Confucian thoughts on Heaven and Man reveals universal human values.\\n    孔子文化能够永存的原因：This is perhaps why Confucian thoughts in the 21st century still remain the interest of not only Chinese people but people in the other parts of the world.\\n\\n邀请教授或者某人\\n要举办某个活动，邀请教授当评委或者裁判，或者通知要求教授出席会议（邀请信，通知类）\\n邀请教授做一个报告\\n邀请教授帮你做证明，开介绍信\\n\\n   > 介绍自己：As one of your students, I am writing to ask for your kind assistance.\\n    I wish to enroll in The Guangdong University of Technology, for which I am required to provide a letter of recommendation.\\n    As a senior professor in your field,one of my most respected college teachers and a person who knows me very well, I conceived you are the most suitable referee for me.\\n    As you know, I have laid a solid foundation in religious course.\\n    I will be grateful if, in this letter, you would confirm that I have adequate qualifications to attend the course.\\n    Would you be so kind to give a brief introduction to my academic performance during my undergraduate studies, especially under your supervision.\\n    Thank you very much for your generous help in this matter.\\n\\n投诉，索赔\\n投诉某产品\\n\\n  >  I am writing to express my dissatisfaction with the electronic dictionary which I bought in your online store on January 7.\\n    Although your store is rated as a five-star one, I found that there are several quality problems on the dictionary.\\n    To begin with, the buttons on the dictionary are so small that it is nearly impossible to type anything with them.\\n    In addition, the battery needs recharging after a mere 2 hours of use. This means that I must take my charger with me when I go out for a day.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n投诉服务\\n\\n >   I am writing to express my dissatisfaction with the service I received while staying in your hotel during my vacation.\\n    Although your hotel is a five-star one, I found that the rooms were not cleaned on daily basic, and that my bed was cleaned-up every three days.\\n    In addition, the food in your restaurant is similarly disappointing.\\n    Not only was it extremely overpriced, but the quality was very poor.\\n    I was therefore forced to eat out in the local restaurant.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n答复某人\\n跟某人进行道歉\\n\\n   >  I am delighted to recall the past two weeks when I stayed at your house. Every moment was a delights. But I am writing to apologize, since I forgot to return a cd to you.\\n    I hope you could know how much I appreciate your kind assistance which enables me to enjoy a comfortable vacation in Canada.\\n    Compared with you, I am quite careless and I totally forgot to return the cd to you.\\n    Accordingly, I intend to send it back immediately by Express Mail service, if there are any better solutions you prefer, please feel free to inform me.\\n    Once again, please accept my apologies for any inconvenience that I have caused.\\n\\n教授要求你做什么，答复他\\n\\n  >   开头寒暄：It is my great pleasure to plan a debate on the theme of city traffic. My suggested topic is \\\"Private cars - to Encourage or to Limit\\\".\\n    The primary of my suggestions are as follows.\\n    时间，地点：The debate will be held in the Student\'s Recreational Center on December 27. I am looking forward to your reply.\\n\\n给老板答复，要辞职\\n对某人表示感谢\\n\",\"articleCover\":\"\",\"articleTitle\":\"2022-10-01 英语小作文整理\",\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 20:57:40',NULL),
(1183,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"\\n英语小作文整理\\n校园生活\\n校园活动举办目的，参加效果，在大学里可以参加哪些活动，有哪些效果等（通知类，建议信）\\n\\n  >   In order to broaden high school students\' horizons and enrich their extracurricular activities, our university is going to hold a summer camp during this summer vacation.\\n    The high school students in this camp will be involved in various activities, such as speech contests and debates, attending group discussions and so on.(sport meeting, social gatherings)\\n    Participating in a variety of activities organized by us, they will be able to demonstrate their outstanding abilities, helping them to develop a range of practical skills.\\n    Their active participation will help them in strengthening their sense of responsibility and develop good international relationships.\\n\\n校园活动举办的一些细节，时间，地点等（通知，介绍信）\\n> \\n    活动举办目的参考上述校园活动举办目的\\n    活动地点将在娱乐中心，时间：The Student Union of our university is organizing a school-wide singing contest to be held at the Student\'s Recreational Center on March 1, 2022.\\n    邀请教授当评委：Five prestigious professors will be invited as honorable judges.\\n\\n校园志愿者招募，校园活动相关咨询表达（通知类，招募信）\\n\\n   >  有经验者优先：Preference will be given to those experienced in international activities and other similar activities.\\n    咨询方式：Call 86754321 or email poster@ccc.edu.cn for an application and for information on the interview.\\n    有兴趣者来：Those who are interested in being volunteers may sign up with their class monitor before June 10, 2022.\\n    咨询：If you have further questions or concerns, please feel free to email your questions to library@ssu.edu.can.\\n    基本要求：Basic requirements are familiarity with the theme of the conference and proficiency in English.\\n    其他要求：Other requirements include good international communication abilities and a strong sense of responsibility.\\n\\n介绍校园生活，如欢迎交换生，或者是表弟等亲戚考入大学，或者某某谁想要了解一下大学生活，有快乐，有烦恼，先对他们的到来表示欢迎（建议信）\\n\\n   >  欢迎，祝贺：On behalf of the Students’ Union of GuangDong University of Technology, I would like to_____（extend our heartfelt welcome,congratulations）\\n    很高兴给你建议：It is my great pleasure to offer you several practical suggestions.\\n    校园生活不像你想的：Life in this university is perhaps not as easy as you have expected.\\n    繁杂的课堂作业和考试：You may be tightly bound by daily classes, abundant homework, frequent exams.\\n    尽管有压力，还是有很多校园活动，此处校园活动可参考上述校园活动参加效果等\\n    总结一下，有很多烦恼，也有很多快乐，你在校园的日子爽歪歪：All in all, although there is a lot of pressure, the time you spend on the campus will be worthwhile and enhance your whole life.\\n\\n朋友往来\\n感谢朋友的帮助，无论是交换生住他的房子还是他带你去旅游，期待他有机会来让我感谢他\\n\\n  >   交代地点，时间：Thank you very much for those five wonderful days at your house. Every moment was a delight.\\n    以前从没有这样的放松经历：I can not remember ever having enjoy myself so thoroughly elsewhere.\\n    我想告诉你我有多么感谢你：This is to tell you how much I enjoyed the weekend in GuangZhou.\\n    描述一些细节：Everything was just perfect: the weather, your company and the surroundings.\\n    No wonder I am finding it difficult to get down to reading in this morning. The classroom life seems so dull and prosaic compared to the days in GuangZhou.\\n    结尾感谢和邀请：I hope you can know how much I appreciate your hospitality and thoughtful kindness to me.\\n    I count myself fortunate indeed to have such a generous and charming friend as you.\\n    I hope something will bring you to Beijing so that I can reciprocate your great kindness.\\n\\n很高兴听到朋友的某样消息，需要给他建议，如学习上的建议，校园生活的建议可参考上述校园类中的校园生活\\n建议某机构\\n给图书馆等机构建议，提升服务\\n\\n   >  As a senior student in this university who is particular keep on reading in the library in my spare time.\\n    I am writing to make several suggestions for improving service here.\\n    To begin with, compared to students\' need, the number and variety of books are not adequate.\\n    It is advisable to purchase more latest books.\\n    In addition, since so many students are preparing for the national entrance examination for postgraduates, it is of great necessity to prolong the opening time of reading room where they study.\\n    I hope you could know how much I appreciate your kind assistance to us, it is your devoted work that enables us to enjoy such a supportive atmosphere of study in the library.\\n\\n给报社编辑这类机构里的某个人建议，针对主题\\n建议某机构或者学校装设备\\n\\n  >  I am writing to request that the Internet be installed in the dormitories .\\n    Not only do professors require students to use it for research, but much communication is done between professors and students through email as well.\\n    In addition, some professors are beginning to post their lecture notes online for students to review in their spare time.\\n    I trust you will take my suggestions into account.\\n\\n推荐景点，书籍，电影，人物\\n景点，长城和故宫，介绍城市或者省份，那就是北京，同样可以介绍北京里面的长城和故宫\\n\\n  >  城市：Beijing 故宫：The Palace Museum 长城：The Great Wall\\n    The palace Museum, also known as the Forbidden City, was the imperial palace of the Ming and Qing Dynasties. It is also the largest piece of ancient Chinese architecture currently exiting.\\n    The Great Wall, symbolizing China\'s ancient civilization, is one of the world\'s most famous projects. As the great creation of the ancient Chinese people and one of the wonders of the world, it was listed as one of the world cultural heritage sites by the United Nations Education, Scientific and Cultural Organization in 1987.\\n\\n书籍，论语\\n\\n论语的介绍可以参考下面关于孔子的描述\\n\\n   > 结尾一句：I hope the above information will help you to understand the book. If you need any further information about selection, please do not hesitate to contact me.\\n\\n电影\\n人物，孔子\\n\\n  >  孔子：Confucius，孔学思想：confucian thought，儒学：confucianism\\n    介绍孔子：As a great thinker, educator and founder of Confucianism, Confucius is a ancient sage during the Spring and Autumn period.\\n    孔子相关的内容，介绍论语：His words and life stories were recorded by his disciples and their students in The Analects.\\n    As an enduring classic of Chinese culture, The Analects has influenced all thinkers, writers and politicians in the over-2000-year-long history of China since Confucius.\\n    No scholar could truly understand this long-standing culture and the inner world of ancient China without this book.\\n    儒家文化的天人合一思想：Much of Confucian thoughts on Heaven and Man reveals universal human values.\\n    孔子文化能够永存的原因：This is perhaps why Confucian thoughts in the 21st century still remain the interest of not only Chinese people but people in the other parts of the world.\\n\\n邀请教授或者某人\\n要举办某个活动，邀请教授当评委或者裁判，或者通知要求教授出席会议（邀请信，通知类）\\n邀请教授做一个报告\\n邀请教授帮你做证明，开介绍信\\n\\n   > 介绍自己：As one of your students, I am writing to ask for your kind assistance.\\n    I wish to enroll in The Guangdong University of Technology, for which I am required to provide a letter of recommendation.\\n    As a senior professor in your field,one of my most respected college teachers and a person who knows me very well, I conceived you are the most suitable referee for me.\\n    As you know, I have laid a solid foundation in religious course.\\n    I will be grateful if, in this letter, you would confirm that I have adequate qualifications to attend the course.\\n    Would you be so kind to give a brief introduction to my academic performance during my undergraduate studies, especially under your supervision.\\n    Thank you very much for your generous help in this matter.\\n\\n投诉，索赔\\n投诉某产品\\n\\n  >  I am writing to express my dissatisfaction with the electronic dictionary which I bought in your online store on January 7.\\n    Although your store is rated as a five-star one, I found that there are several quality problems on the dictionary.\\n    To begin with, the buttons on the dictionary are so small that it is nearly impossible to type anything with them.\\n    In addition, the battery needs recharging after a mere 2 hours of use. This means that I must take my charger with me when I go out for a day.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n投诉服务\\n\\n >   I am writing to express my dissatisfaction with the service I received while staying in your hotel during my vacation.\\n    Although your hotel is a five-star one, I found that the rooms were not cleaned on daily basic, and that my bed was cleaned-up every three days.\\n    In addition, the food in your restaurant is similarly disappointing.\\n    Not only was it extremely overpriced, but the quality was very poor.\\n    I was therefore forced to eat out in the local restaurant.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n答复某人\\n跟某人进行道歉\\n\\n   >  I am delighted to recall the past two weeks when I stayed at your house. Every moment was a delights. But I am writing to apologize, since I forgot to return a cd to you.\\n    I hope you could know how much I appreciate your kind assistance which enables me to enjoy a comfortable vacation in Canada.\\n    Compared with you, I am quite careless and I totally forgot to return the cd to you.\\n    Accordingly, I intend to send it back immediately by Express Mail service, if there are any better solutions you prefer, please feel free to inform me.\\n    Once again, please accept my apologies for any inconvenience that I have caused.\\n\\n教授要求你做什么，答复他\\n\\n  >   开头寒暄：It is my great pleasure to plan a debate on the theme of city traffic. My suggested topic is \\\"Private cars - to Encourage or to Limit\\\".\\n    The primary of my suggestions are as follows.\\n    时间，地点：The debate will be held in the Student\'s Recreational Center on December 27. I am looking forward to your reply.\\n\\n给老板答复，要辞职\\n对某人表示感谢\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"2022-10-01 英语小作文整理\",\"categoryName\":\"English\",\"id\":67,\"isTop\":0,\"originalUrl\":\"\",\"status\":3,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 20:58:04',NULL),
(1184,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"\\n英语小作文整理\\n校园生活\\n校园活动举办目的，参加效果，在大学里可以参加哪些活动，有哪些效果等（通知类，建议信）\\n\\n  >   In order to broaden high school students\' horizons and enrich their extracurricular activities, our university is going to hold a summer camp during this summer vacation.\\n    The high school students in this camp will be involved in various activities, such as speech contests and debates, attending group discussions and so on.(sport meeting, social gatherings)\\n    Participating in a variety of activities organized by us, they will be able to demonstrate their outstanding abilities, helping them to develop a range of practical skills.\\n    Their active participation will help them in strengthening their sense of responsibility and develop good international relationships.\\n\\n校园活动举办的一些细节，时间，地点等（通知，介绍信）\\n> \\n    活动举办目的参考上述校园活动举办目的\\n    活动地点将在娱乐中心，时间：The Student Union of our university is organizing a school-wide singing contest to be held at the Student\'s Recreational Center on March 1, 2022.\\n    邀请教授当评委：Five prestigious professors will be invited as honorable judges.\\n\\n校园志愿者招募，校园活动相关咨询表达（通知类，招募信）\\n\\n   >  有经验者优先：Preference will be given to those experienced in international activities and other similar activities.\\n    咨询方式：Call 86754321 or email poster@ccc.edu.cn for an application and for information on the interview.\\n    有兴趣者来：Those who are interested in being volunteers may sign up with their class monitor before June 10, 2022.\\n    咨询：If you have further questions or concerns, please feel free to email your questions to library@ssu.edu.can.\\n    基本要求：Basic requirements are familiarity with the theme of the conference and proficiency in English.\\n    其他要求：Other requirements include good international communication abilities and a strong sense of responsibility.\\n\\n介绍校园生活，如欢迎交换生，或者是表弟等亲戚考入大学，或者某某谁想要了解一下大学生活，有快乐，有烦恼，先对他们的到来表示欢迎（建议信）\\n\\n   >  欢迎，祝贺：On behalf of the Students’ Union of GuangDong University of Technology, I would like to_____（extend our heartfelt welcome,congratulations）\\n    很高兴给你建议：It is my great pleasure to offer you several practical suggestions.\\n    校园生活不像你想的：Life in this university is perhaps not as easy as you have expected.\\n    繁杂的课堂作业和考试：You may be tightly bound by daily classes, abundant homework, frequent exams.\\n    尽管有压力，还是有很多校园活动，此处校园活动可参考上述校园活动参加效果等\\n    总结一下，有很多烦恼，也有很多快乐，你在校园的日子爽歪歪：All in all, although there is a lot of pressure, the time you spend on the campus will be worthwhile and enhance your whole life.\\n\\n朋友往来\\n感谢朋友的帮助，无论是交换生住他的房子还是他带你去旅游，期待他有机会来让我感谢他\\n\\n  >   交代地点，时间：Thank you very much for those five wonderful days at your house. Every moment was a delight.\\n    以前从没有这样的放松经历：I can not remember ever having enjoy myself so thoroughly elsewhere.\\n    我想告诉你我有多么感谢你：This is to tell you how much I enjoyed the weekend in GuangZhou.\\n    描述一些细节：Everything was just perfect: the weather, your company and the surroundings.\\n    No wonder I am finding it difficult to get down to reading in this morning. The classroom life seems so dull and prosaic compared to the days in GuangZhou.\\n    结尾感谢和邀请：I hope you can know how much I appreciate your hospitality and thoughtful kindness to me.\\n    I count myself fortunate indeed to have such a generous and charming friend as you.\\n    I hope something will bring you to Beijing so that I can reciprocate your great kindness.\\n\\n很高兴听到朋友的某样消息，需要给他建议，如学习上的建议，校园生活的建议可参考上述校园类中的校园生活\\n建议某机构\\n给图书馆等机构建议，提升服务\\n\\n   >  As a senior student in this university who is particular keep on reading in the library in my spare time.\\n    I am writing to make several suggestions for improving service here.\\n    To begin with, compared to students\' need, the number and variety of books are not adequate.\\n    It is advisable to purchase more latest books.\\n    In addition, since so many students are preparing for the national entrance examination for postgraduates, it is of great necessity to prolong the opening time of reading room where they study.\\n    I hope you could know how much I appreciate your kind assistance to us, it is your devoted work that enables us to enjoy such a supportive atmosphere of study in the library.\\n\\n给报社编辑这类机构里的某个人建议，针对主题\\n建议某机构或者学校装设备\\n\\n  >  I am writing to request that the Internet be installed in the dormitories .\\n    Not only do professors require students to use it for research, but much communication is done between professors and students through email as well.\\n    In addition, some professors are beginning to post their lecture notes online for students to review in their spare time.\\n    I trust you will take my suggestions into account.\\n\\n推荐景点，书籍，电影，人物\\n景点，长城和故宫，介绍城市或者省份，那就是北京，同样可以介绍北京里面的长城和故宫\\n\\n  >  城市：Beijing 故宫：The Palace Museum 长城：The Great Wall\\n    The palace Museum, also known as the Forbidden City, was the imperial palace of the Ming and Qing Dynasties. It is also the largest piece of ancient Chinese architecture currently exiting.\\n    The Great Wall, symbolizing China\'s ancient civilization, is one of the world\'s most famous projects. As the great creation of the ancient Chinese people and one of the wonders of the world, it was listed as one of the world cultural heritage sites by the United Nations Education, Scientific and Cultural Organization in 1987.\\n\\n书籍，论语\\n\\n论语的介绍可以参考下面关于孔子的描述\\n\\n   > 结尾一句：I hope the above information will help you to understand the book. If you need any further information about selection, please do not hesitate to contact me.\\n\\n电影\\n人物，孔子\\n\\n  >  孔子：Confucius，孔学思想：confucian thought，儒学：confucianism\\n    介绍孔子：As a great thinker, educator and founder of Confucianism, Confucius is a ancient sage during the Spring and Autumn period.\\n    孔子相关的内容，介绍论语：His words and life stories were recorded by his disciples and their students in The Analects.\\n    As an enduring classic of Chinese culture, The Analects has influenced all thinkers, writers and politicians in the over-2000-year-long history of China since Confucius.\\n    No scholar could truly understand this long-standing culture and the inner world of ancient China without this book.\\n    儒家文化的天人合一思想：Much of Confucian thoughts on Heaven and Man reveals universal human values.\\n    孔子文化能够永存的原因：This is perhaps why Confucian thoughts in the 21st century still remain the interest of not only Chinese people but people in the other parts of the world.\\n\\n邀请教授或者某人\\n要举办某个活动，邀请教授当评委或者裁判，或者通知要求教授出席会议（邀请信，通知类）\\n邀请教授做一个报告\\n邀请教授帮你做证明，开介绍信\\n\\n   > 介绍自己：As one of your students, I am writing to ask for your kind assistance.\\n    I wish to enroll in The Guangdong University of Technology, for which I am required to provide a letter of recommendation.\\n    As a senior professor in your field,one of my most respected college teachers and a person who knows me very well, I conceived you are the most suitable referee for me.\\n    As you know, I have laid a solid foundation in religious course.\\n    I will be grateful if, in this letter, you would confirm that I have adequate qualifications to attend the course.\\n    Would you be so kind to give a brief introduction to my academic performance during my undergraduate studies, especially under your supervision.\\n    Thank you very much for your generous help in this matter.\\n\\n投诉，索赔\\n投诉某产品\\n\\n  >  I am writing to express my dissatisfaction with the electronic dictionary which I bought in your online store on January 7.\\n    Although your store is rated as a five-star one, I found that there are several quality problems on the dictionary.\\n    To begin with, the buttons on the dictionary are so small that it is nearly impossible to type anything with them.\\n    In addition, the battery needs recharging after a mere 2 hours of use. This means that I must take my charger with me when I go out for a day.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n投诉服务\\n\\n >   I am writing to express my dissatisfaction with the service I received while staying in your hotel during my vacation.\\n    Although your hotel is a five-star one, I found that the rooms were not cleaned on daily basic, and that my bed was cleaned-up every three days.\\n    In addition, the food in your restaurant is similarly disappointing.\\n    Not only was it extremely overpriced, but the quality was very poor.\\n    I was therefore forced to eat out in the local restaurant.\\n    I think you will take my complaints seriously and improve your service in the future.\\n    I will greatly appreciate a discount on my bill or a full refund.\\n\\n答复某人\\n跟某人进行道歉\\n\\n   >  I am delighted to recall the past two weeks when I stayed at your house. Every moment was a delights. But I am writing to apologize, since I forgot to return a cd to you.\\n    I hope you could know how much I appreciate your kind assistance which enables me to enjoy a comfortable vacation in Canada.\\n    Compared with you, I am quite careless and I totally forgot to return the cd to you.\\n    Accordingly, I intend to send it back immediately by Express Mail service, if there are any better solutions you prefer, please feel free to inform me.\\n    Once again, please accept my apologies for any inconvenience that I have caused.\\n\\n教授要求你做什么，答复他\\n\\n  >   开头寒暄：It is my great pleasure to plan a debate on the theme of city traffic. My suggested topic is \\\"Private cars - to Encourage or to Limit\\\".\\n    The primary of my suggestions are as follows.\\n    时间，地点：The debate will be held in the Student\'s Recreational Center on December 27. I am looking forward to your reply.\\n\\n给老板答复，要辞职\\n对某人表示感谢\\n\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"articleTitle\":\"2022-10-01 英语小作文整理\",\"categoryName\":\"English\",\"id\":67,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 20:58:13',NULL),
(1185,'文章模块','新增或修改','/admin/articles','com.minzheng.blog.controller.ArticleController.saveOrUpdateArticle','添加或修改文章','[{\"articleContent\":\"4/18\\nC类题:\\n添加冻结用户功能√——>添加注销用户功能√——>添加修改密码功能√——>管理员用户界面设计\\n ——>管理图书界面设计、功能实现（增删改查）——>管理用户功能(增删改查)——>读者界面/读者借\\n书界面设计——>借书功能实现（是否借阅图书、是否归还、日期类、）\\n\\n去重：目标：防止出现用户名一样或者ID一样的用户 今日已完成√\\n\\n\\n4/27\\n\\nC类题：功能模块化：DAO、interface、implement(实现主要的功能-增删改查询图书、用户) \\n查询多条记录：运用泛型、哈希表的数据结构\\ndbutils:做新的功能界面时用，如update、query....\\n\\nDAO:通用的增删改方法、查询方法-获取一条或多条记录\\nBooksDAO:\\naddBook():增加一本书\\n\\n5.1\\n实现增添书籍\\n实现将数据库中所有书籍罗列到表格中，选中表格中的一条则可以进行删除、修改  \\n\\n增添图书√\\n罗列√\\n选中表格中的记录进行删除，修改\\n\\n读取书本类型，并根据不同字段进行分类\\nSELECT  DISTINCT TYPE 种类 FROM `books_info` √\\n\\n\\n5/5\\n```java\\npublic void checkAndAddNewType() {\\n\\t\\tString s = typetextField.getText();\\n\\t\\tint co = comboBox.getItemCount();\\n\\t\\tfor(int i=0;i<co;i++) {\\n\\t\\t\\tString item = comboBox.getItemAt(i).toString();\\n\\t\\t\\tif(s.equalsIgnoreCase(item)) {\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}else {\\n\\t\\t\\t\\tif(i==(co-1)) {\\n\\t\\t\\t\\t\\tSystem.out.println(\\\"新增图书类型为：\\\"+s);\\n\\t\\t\\t\\t\\tcomboBox.addItem(s);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n```\\n\\n\\n提升了新增图书种类的便捷性\\n\\n删除图书：当连续使用删除功能两次时只删掉了一本？ 已解决√\\n\\n5/9\\n\\n```Java\\nif(!(as.equals(\\\"\\\"))) {\\n\\t\\t\\tamount = Integer.parseInt(as);\\n\\t\\t}else {\\n\\t\\t\\tamount = 0;\\n\\t\\t}\\n```\\n\\n\\n查询书籍：可根据书本类型进行分类\\n已修正√\\n目前问题：分类后选择修改删除仍然是第一条的记录\\n已修正 √\\t\\n\\n```Java\\nList listSel;\\n\\tif(!(comboBox.getSelectedItem().toString().equalsIgnoreCase(\\\"全部书籍\\\"))) {\\n\\t\\tlistSel = typeColList;\\n}else {\\n\\t\\tlistSel = list;\\n\\t\\t\\t}\\n```\\n\\n\\n设计普通用户的界面：\\n\\n5/11\\n\\n正在实现：选中一个图书节点时，显示出该节点信息 已实现√\\n已实现：读者基本查书栏\\n\\n\\n5/16\\n15:43 搜索功能终于完善......\\n\\n\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",\\\"呵1\\\") WHERE `user_Name`=\\\"234324\\\"\\n\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",?) WHERE `user_Name`=?\\n\\n设计借阅功能\\n每个读者借了一本书后便不能再次借阅该书，直到已经归还该书（ Boolean isBack ?）\\n\\n--------\\nUPDATE `userinfo` SET `record`= CONCAT(`record`,\\\"\\\\n\\\",?) WHERE `user_id`= ? ;\\nUPDATE `userinfo` SET `owned_bk`= CONCAT(`owned_bk`,\\\"\\\\n\\\", ?) WHERE `user_id`=?\\n\\n\\nSELECT CONCAT_WS(\',1\',\'11\',\'22\',NULL)\\nowned_bk 如何删减？ update( )?\\n如何展示owned_bk中的每一项记录？\\n\\n管理员：在借书记录中展示每一位读者的所有借书记录\\n每条记录展示是否归还图书？\\n\\n借书记录中选出所有未归还记录中超过特定时段（1天，5天....）未归还记录生成摧还名单\\n管理员则可以发送催还消息，读者登录后就可以收到该条消息\\n\\n12:24：修改图书功能偶遇BUG? 连续操作修改图书类型时会报错\\n更新功能：模糊查询读者 √\\n\\n借阅书籍问题：如何将每个用户的每条借阅记录分开，最后罗列到一张表上？\\n方案（未实现）：1（未实现）、通过sql语句定义函数/存储过程，将单个用户的借阅记录分段到同一张表上的多条记录，方便接下来的实现操作\\n2（较易，实现中）、建立一张新表，将书名，借阅时间、借阅者、归还状态在调用借书、还书功能时进行同步记录，进行管理操作时也可同步\\n\\n图书记录也许可以根据未归还和已归还进行分类？筛选出未归还的记录形成催交名单\\nSELECT `borrower`, `borrowed_book`,`borrow_date`,`isReturn` FROM `borrowrecord` WHERE `borrower` LIKE \\\"%(%\\\"\\n\\n5/24\\n个人借阅图书表格初步完成√\\n读书笔记完成√\\n\\n图书维护的相关BUG:更改图书类别成功会出现新的一条相关记录\\n\\n5/24BUG已解决：通过固定索引使得点击修改后 后来的选中项不会被修改\\n归还图书（）：图书归还索引尚且只有书名，不明确（万一有多本书名一样的书呢？）\\n又出现BUG:删除图书报错？\\n\\n5/31 更新：可查询历史借阅记录了\\n\\n6/2\\n\\nUPDATE `userinfo`\\nSET `owned_bk`=REPLACE(`owned_bk`,\'呵呵\',\'\')\\nWHERE `user_id`=\'04191918\'\\n\\n6/3 更新了判断是否借阅该书、修改了还书功能中的移除字段\\n修改了没有读取到用户密码、持有书籍的BUG\\n\\n待修改：对借阅记录中已归还\\\\待归还进行分类\\n\\n6/4 \\n读取生成的图片\\n1生成\\n2保存\\n3读取\\n4展示\\n\\n6/5\\n对于借阅日期进行分类，统计每个借阅日期的借阅量\\n\\nUPDATE `userinfo` SET `borrow_time`=0\\n置空一整列\\n\\nSELECT COUNT(borrow_date) FROM `borrowrecord` GROUP BY `borrow_date`\\n分类\\n\\nUPDATE `books_info` SET `getbor_Times`=5\\n\\nUPDATE `userinfo` SET `borrow_time`=4\\n\\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times`;\\n\\n6/7\\n1.改进了读者排行榜排序位次\\n2.改进了最佳借阅量图书榜排序位次\\n3.优化了借阅表部分展示\\n\\nSELECT `getbor_Times`,`book_name` FROM `books_info` ORDER BY `getbor_Times` DESC\\n\\nSELECT `borrow_time` ,`user_Name` FROM `userinfo` ORDER BY `borrow_time` DESC\\n\\n6.11\\nSELECT COUNT(borrow_date),`borrow_date` FROM `borrowrecord` GROUP BY `borrow_date` ORDER BY `borrow_date` ASC \\n---\\n\\n数据库设计：\\nSQL建表语句\\n\\n借阅记录表：\\n```cpp\\n/*\\nSQLyog Ultimate v10.00 Beta1\\nMySQL - 8.0.28 : Database - library\\n*********************************************************************\\n*/\\n\\n\\n/*!40101 SET NAMES utf8 */;\\n\\n/*!40101 SET SQL_MODE=\'\'*/;\\n\\n/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;\\n/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;\\n/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=\'NO_AUTO_VALUE_ON_ZERO\' */;\\n/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;\\nCREATE DATABASE /*!32312 IF NOT EXISTS*/`library` /*!40100 DEFAULT CHARACTER SET utf8 */ /*!80016 DEFAULT ENCRYPTION=\'N\' */;\\n\\nUSE `library`;\\n\\n/*Table structure for table `books_info` */\\n\\nDROP TABLE IF EXISTS `books_info`;\\n\\nCREATE TABLE `books_info` (\\n  `book_id` varchar(7) NOT NULL COMMENT \'图书编号\',\\n  `book_name` varchar(20) NOT NULL COMMENT \'书名\',\\n  `type` varchar(20) NOT NULL COMMENT \'类型\',\\n  `author` varchar(20) DEFAULT NULL COMMENT \'作者\',\\n  `date` datetime DEFAULT NULL COMMENT \'入库日期\',\\n  `amount` bigint DEFAULT NULL COMMENT \'数量\',\\n  `about` mediumtext COMMENT \'书的简介\',\\n  `publisher` varchar(20) DEFAULT NULL COMMENT \'出版社\',\\n  `getbor_Times` bigint DEFAULT NULL COMMENT \'被借阅次数\',\\n  PRIMARY KEY (`book_id`,`book_name`,`type`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\\n\\n/*Data for the table `books_info` */\\n\\ninsert  into `books_info`(`book_id`,`book_name`,`type`,`author`,`date`,`amount`,`about`,`publisher`,`getbor_Times`) values (\'004\',\'jdbc引入\',\'JAVA书\',\'JAVA编程者\',\'2015-10-20 00:00:00\',0,NULL,NULL,NULL),(\'01\',\'第一本书哦\',\'你好呀\',\'kk\',\'2022-09-20 14:13:05\',2,\'呵呵呵欢迎借阅\',\'人民出版社\',1),(\'aa\',\'阿萨大师大多\',\'HAVA书\',\'哒哒哒哒\',\'2022-09-20 15:35:10\',0,NULL,NULL,NULL);\\n\\n/*Table structure for table `borrowrecord` */\\n\\nDROP TABLE IF EXISTS `borrowrecord`;\\n\\nCREATE TABLE `borrowrecord` (\\n  `borrower` varchar(20) DEFAULT NULL COMMENT \'借阅者\',\\n  `borrowed_book` varchar(20) DEFAULT NULL COMMENT \'借阅书名\',\\n  `borrow_date` date DEFAULT NULL COMMENT \'借阅日期\',\\n  `isReturn` varchar(10) DEFAULT NULL COMMENT \'图书是否归还\',\\n  `whole_record` longtext COMMENT \'完整借阅记录\'\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\\n\\n/*Data for the table `borrowrecord` */\\n\\ninsert  into `borrowrecord`(`borrower`,`borrowed_book`,`borrow_date`,`isReturn`,`whole_record`) values (\'t1(ID:02)\',\'第一本书哦\',\'2022-09-20\',\'待归还\',\'用户t1(ID为：02)于2022-09-20 14:13:05借走图书《第一本书哦》(编号为01)书籍一本\');\\n\\n/*Table structure for table `userinfo` */\\n\\nDROP TABLE IF EXISTS `userinfo`;\\n\\nCREATE TABLE `userinfo` (\\n  `user_Name` varchar(20) NOT NULL COMMENT \'用户名\',\\n  `user_type` varchar(20) NOT NULL COMMENT \'用户类型\',\\n  `user_id` varchar(20) NOT NULL COMMENT \'用户id\',\\n  `user_password` varchar(15) NOT NULL COMMENT \'密码\',\\n  `user_about` varchar(30) DEFAULT NULL COMMENT \'关于用户\',\\n  `sign_date` datetime DEFAULT NULL COMMENT \'注册日期\',\\n  `user_Sta` varchar(10) DEFAULT NULL COMMENT \'用户状态\',\\n  `record` longtext COMMENT \'借阅记录\',\\n  `owned_bk` longtext COMMENT \'持有书籍\',\\n  `borrow_time` bigint DEFAULT NULL COMMENT \'借阅次数\',\\n  PRIMARY KEY (`user_Name`,`user_type`,`user_id`,`user_password`)\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3;\\n\\n/*Data for the table `userinfo` */\\n\\ninsert  into `userinfo`(`user_Name`,`user_type`,`user_id`,`user_password`,`user_about`,`sign_date`,`user_Sta`,`record`,`owned_bk`,`borrow_time`) values (\'kk\',\'管理员\',\'01\',\'123\',\'第一个用户\',\'2022-09-20 14:12:33\',\'非冻结状态\',\'\',\'\',0),(\'t1\',\'读者\',\'02\',\'12\',\'12121212\',\'2022-09-20 14:15:34\',\'非冻结状态\',\'\\\\n用户t1(ID为：02)于2022-09-20 14:13:05借走图书《第一本书哦》(编号为01)书籍一本\',\'\\\\n第一本书哦\',1);\\n\\n/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;\\n/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;\\n/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;\\n/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;\\n\\n\\n```\\n\\n\\n\\n\\n\\n\\n\",\"articleCover\":\"http://121.89.232.237:83/articles/3065741dd3beb39304f40b7b47d6cf3a.jpg\",\"articleTitle\":\"2022-08-30 大二所写的图书管理系统的编写日志..\",\"categoryName\":\"技术栈\",\"id\":56,\"isTop\":0,\"originalUrl\":\"\",\"status\":1,\"tagNameList\":[],\"type\":1}]','POST','{\"code\":20000,\"flag\":true,\"message\":\"操作成功\"}',1,'管理员','14.28.167.10','广东省深圳市 电信','2022-10-01 21:00:39',NULL);

/*Table structure for table `tb_page` */

DROP TABLE IF EXISTS `tb_page`;

CREATE TABLE `tb_page` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '页面id',
  `page_name` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面名',
  `page_label` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '页面标签',
  `page_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '页面封面',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=906 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='页面';

/*Data for the table `tb_page` */

insert  into `tb_page`(`id`,`page_name`,`page_label`,`page_cover`,`create_time`,`update_time`) values 
(1,'首页','home','http://121.89.232.237:83/config/9c62294b7cd7e56bb0c3b65436641c97.jpg','2021-08-07 10:32:36','2022-08-16 20:13:53'),
(2,'归档','archive','https://static.talkxj.com/config/643f28683e1c59a80ccfc9cb19735a9c.jpg','2021-08-07 10:32:36','2021-10-04 15:43:14'),
(3,'分类','category','https://static.talkxj.com/config/83be0017d7f1a29441e33083e7706936.jpg','2021-08-07 10:32:36','2021-10-04 15:43:31'),
(4,'标签','tag','https://static.talkxj.com/config/a6f141372509365891081d755da963a1.png','2021-08-07 10:32:36','2021-10-04 15:43:38'),
(5,'相册','album','https://static.talkxj.com/config/1ecb6fc94e38c38713000efe37492e73.png','2021-08-07 10:32:36','2021-12-27 12:23:12'),
(6,'友链','link','https://static.talkxj.com/config/9034edddec5b8e8542c2e61b0da1c1da.jpg','2021-08-07 10:32:36','2021-10-04 15:44:02'),
(7,'关于','about','https://static.talkxj.com/config/2a56d15dd742ff8ac238a512d9a472a1.jpg','2021-08-07 10:32:36','2021-10-04 15:44:08'),
(8,'留言','message','https://static.talkxj.com/config/acfeab8379508233fa7e4febf90c2f2e.png','2021-08-07 10:32:36','2021-10-04 16:11:45'),
(9,'个人中心','user','https://static.talkxj.com/config/ebae4c93de1b286a8d50aa62612caa59.jpeg','2021-08-07 10:32:36','2021-10-04 15:45:17'),
(10,'文章列表','articleList','https://static.talkxj.com/config/924d65cc8312e6cdad2160eb8fce6831.jpg','2021-08-10 15:36:19','2021-10-04 15:45:45'),
(904,'说说','talk','https://static.talkxj.com/config/a741b0656a9a3db2e2ba5c2f4140eb6c.jpg','2022-01-23 00:51:24','2022-01-23 03:01:21'),
(905,'发帖','post','https://static.talkxj.com/config/a741b0656a9a3db2e2ba5c2f4140eb6c.jpg','2022-08-15 01:39:24','2022-08-15 01:39:29');

/*Table structure for table `tb_photo` */

DROP TABLE IF EXISTS `tb_photo`;

CREATE TABLE `tb_photo` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_id` int NOT NULL COMMENT '相册id',
  `photo_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片名',
  `photo_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '照片描述',
  `photo_src` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '照片地址',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='照片';

/*Data for the table `tb_photo` */

insert  into `tb_photo`(`id`,`album_id`,`photo_name`,`photo_desc`,`photo_src`,`is_delete`,`create_time`,`update_time`) values 
(29,8,'1557550574690418690',NULL,'http://121.89.232.237:83/photos/64790699421bf1371204611ec2547304.jpg',1,'2022-08-11 10:12:50','2022-08-16 21:01:52'),
(30,8,'1559525482119086081',NULL,'http://121.89.232.237:83/photos/43cc72003632d0b3a930026b4ebd1de4.jpg',0,'2022-08-16 21:00:24',NULL);

/*Table structure for table `tb_photo_album` */

DROP TABLE IF EXISTS `tb_photo_album`;

CREATE TABLE `tb_photo_album` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `album_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册名',
  `album_desc` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册描述',
  `album_cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '相册封面',
  `is_delete` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否删除',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态值 1公开 2私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC COMMENT='相册';

/*Data for the table `tb_photo_album` */

insert  into `tb_photo_album`(`id`,`album_name`,`album_desc`,`album_cover`,`is_delete`,`status`,`create_time`,`update_time`) values 
(8,'测试相册','上传','http://121.89.232.237:83/photos/10b54ce151f1fd6ce0a21e09b2d2b28f.jpg',0,1,'2022-08-11 10:12:42','2022-08-16 21:01:19');

/*Table structure for table `tb_resource` */

DROP TABLE IF EXISTS `tb_resource`;

CREATE TABLE `tb_resource` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `resource_name` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '资源名',
  `url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '权限路径',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '请求方式',
  `parent_id` int DEFAULT NULL COMMENT '父权限id',
  `is_anonymous` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否匿名访问 0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=289 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_resource` */

insert  into `tb_resource`(`id`,`resource_name`,`url`,`request_method`,`parent_id`,`is_anonymous`,`create_time`,`update_time`) values 
(165,'分类模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(166,'博客信息模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(167,'友链模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(168,'文章模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(169,'日志模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(170,'标签模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(171,'照片模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(172,'用户信息模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(173,'用户账号模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(174,'留言模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(175,'相册模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(176,'菜单模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(177,'角色模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(178,'评论模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(179,'资源模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(180,'页面模块',NULL,NULL,NULL,0,'2021-08-11 21:04:21',NULL),
(181,'查看博客信息','/','GET',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:29'),
(182,'查看关于我信息','/about','GET',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:29'),
(183,'查看后台信息','/admin','GET',166,0,'2021-08-11 21:04:22',NULL),
(184,'修改关于我信息','/admin/about','PUT',166,0,'2021-08-11 21:04:22',NULL),
(185,'查看后台文章','/admin/articles','GET',168,0,'2021-08-11 21:04:22',NULL),
(186,'添加或修改文章','/admin/articles','POST',168,0,'2021-08-11 21:04:22',NULL),
(187,'恢复或删除文章','/admin/articles','PUT',168,0,'2021-08-11 21:04:22',NULL),
(188,'物理删除文章','/admin/articles','DELETE',168,0,'2021-08-11 21:04:22',NULL),
(189,'上传文章图片','/admin/articles/images','POST',168,0,'2021-08-11 21:04:22',NULL),
(190,'修改文章置顶','/admin/articles/top','PUT',168,0,'2021-08-11 21:04:22',NULL),
(191,'根据id查看后台文章','/admin/articles/*','GET',168,0,'2021-08-11 21:04:22',NULL),
(192,'查看后台分类列表','/admin/categories','GET',165,0,'2021-08-11 21:04:22',NULL),
(193,'添加或修改分类','/admin/categories','POST',165,0,'2021-08-11 21:04:22',NULL),
(194,'删除分类','/admin/categories','DELETE',165,0,'2021-08-11 21:04:22',NULL),
(195,'搜索文章分类','/admin/categories/search','GET',165,0,'2021-08-11 21:04:22',NULL),
(196,'查询后台评论','/admin/comments','GET',178,0,'2021-08-11 21:04:22',NULL),
(197,'删除评论','/admin/comments','DELETE',178,0,'2021-08-11 21:04:22',NULL),
(198,'审核评论','/admin/comments/review','PUT',178,0,'2021-08-11 21:04:22',NULL),
(199,'查看后台友链列表','/admin/links','GET',167,0,'2021-08-11 21:04:22',NULL),
(200,'保存或修改友链','/admin/links','POST',167,0,'2021-08-11 21:04:22',NULL),
(201,'删除友链','/admin/links','DELETE',167,0,'2021-08-11 21:04:22',NULL),
(202,'查看菜单列表','/admin/menus','GET',176,0,'2021-08-11 21:04:22',NULL),
(203,'新增或修改菜单','/admin/menus','POST',176,0,'2021-08-11 21:04:22',NULL),
(204,'删除菜单','/admin/menus/*','DELETE',176,0,'2021-08-11 21:04:22',NULL),
(205,'查看后台留言列表','/admin/messages','GET',174,0,'2021-08-11 21:04:22',NULL),
(206,'删除留言','/admin/messages','DELETE',174,0,'2021-08-11 21:04:22',NULL),
(207,'审核留言','/admin/messages/review','PUT',174,0,'2021-08-11 21:04:22',NULL),
(208,'查看操作日志','/admin/operation/logs','GET',169,0,'2021-08-11 21:04:22',NULL),
(209,'删除操作日志','/admin/operation/logs','DELETE',169,0,'2021-08-11 21:04:22',NULL),
(210,'获取页面列表','/admin/pages','GET',180,0,'2021-08-11 21:04:22',NULL),
(211,'保存或更新页面','/admin/pages','POST',180,0,'2021-08-11 21:04:22',NULL),
(212,'删除页面','/admin/pages/*','DELETE',180,0,'2021-08-11 21:04:22',NULL),
(213,'根据相册id获取照片列表','/admin/photos','GET',171,0,'2021-08-11 21:04:22',NULL),
(214,'保存照片','/admin/photos','POST',171,0,'2021-08-11 21:04:22',NULL),
(215,'更新照片信息','/admin/photos','PUT',171,0,'2021-08-11 21:04:22',NULL),
(216,'删除照片','/admin/photos','DELETE',171,0,'2021-08-11 21:04:22',NULL),
(217,'移动照片相册','/admin/photos/album','PUT',171,0,'2021-08-11 21:04:22',NULL),
(218,'查看后台相册列表','/admin/photos/albums','GET',175,0,'2021-08-11 21:04:22',NULL),
(219,'保存或更新相册','/admin/photos/albums','POST',175,0,'2021-08-11 21:04:22',NULL),
(220,'上传相册封面','/admin/photos/albums/cover','POST',175,0,'2021-08-11 21:04:22',NULL),
(221,'获取后台相册列表信息','/admin/photos/albums/info','GET',175,0,'2021-08-11 21:04:22',NULL),
(222,'根据id删除相册','/admin/photos/albums/*','DELETE',175,0,'2021-08-11 21:04:22',NULL),
(223,'根据id获取后台相册信息','/admin/photos/albums/*/info','GET',175,0,'2021-08-11 21:04:22',NULL),
(224,'更新照片删除状态','/admin/photos/delete','PUT',171,0,'2021-08-11 21:04:22',NULL),
(225,'查看资源列表','/admin/resources','GET',179,0,'2021-08-11 21:04:22',NULL),
(226,'新增或修改资源','/admin/resources','POST',179,0,'2021-08-11 21:04:22',NULL),
(227,'导入swagger接口','/admin/resources/import/swagger','GET',179,0,'2021-08-11 21:04:22',NULL),
(228,'删除资源','/admin/resources/*','DELETE',179,0,'2021-08-11 21:04:22',NULL),
(229,'保存或更新角色','/admin/role','POST',177,0,'2021-08-11 21:04:22',NULL),
(230,'查看角色菜单选项','/admin/role/menus','GET',176,0,'2021-08-11 21:04:22',NULL),
(231,'查看角色资源选项','/admin/role/resources','GET',179,0,'2021-08-11 21:04:22',NULL),
(232,'查询角色列表','/admin/roles','GET',177,0,'2021-08-11 21:04:22',NULL),
(233,'删除角色','/admin/roles','DELETE',177,0,'2021-08-11 21:04:22',NULL),
(234,'查询后台标签列表','/admin/tags','GET',170,0,'2021-08-11 21:04:22',NULL),
(235,'添加或修改标签','/admin/tags','POST',170,0,'2021-08-11 21:04:22',NULL),
(236,'删除标签','/admin/tags','DELETE',170,0,'2021-08-11 21:04:22',NULL),
(237,'搜索文章标签','/admin/tags/search','GET',170,0,'2021-08-11 21:04:22',NULL),
(238,'查看当前用户菜单','/admin/user/menus','GET',176,0,'2021-08-11 21:04:22',NULL),
(239,'查询后台用户列表','/admin/users','GET',173,0,'2021-08-11 21:04:22',NULL),
(240,'修改用户禁用状态','/admin/users/disable','PUT',172,0,'2021-08-11 21:04:22',NULL),
(241,'查看在线用户','/admin/users/online','GET',172,0,'2021-08-11 21:04:22',NULL),
(242,'修改管理员密码','/admin/users/password','PUT',173,0,'2021-08-11 21:04:22',NULL),
(243,'查询用户角色选项','/admin/users/role','GET',177,0,'2021-08-11 21:04:22',NULL),
(244,'修改用户角色','/admin/users/role','PUT',172,0,'2021-08-11 21:04:22',NULL),
(245,'下线用户','/admin/users/*/online','DELETE',172,0,'2021-08-11 21:04:22',NULL),
(246,'获取网站配置','/admin/website/config','GET',166,0,'2021-08-11 21:04:22',NULL),
(247,'更新网站配置','/admin/website/config','PUT',166,0,'2021-08-11 21:04:22',NULL),
(248,'根据相册id查看照片列表','/albums/*/photos','GET',171,1,'2021-08-11 21:04:22','2021-08-11 21:06:35'),
(249,'查看首页文章','/articles','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:45'),
(250,'查看文章归档','/articles/archives','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:47'),
(251,'根据条件查询文章','/articles/condition','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:47'),
(252,'搜索文章','/articles/search','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:48'),
(253,'根据id查看文章','/articles/*','GET',168,1,'2021-08-11 21:04:22','2021-08-11 21:05:49'),
(254,'点赞文章','/articles/*/like','POST',168,0,'2021-08-11 21:04:22',NULL),
(255,'查看分类列表','/categories','GET',165,1,'2021-08-11 21:04:22','2021-08-11 21:05:26'),
(256,'查询评论','/comments','GET',178,1,'2021-08-11 21:04:22','2021-08-11 21:07:33'),
(257,'添加评论','/comments','POST',178,0,'2021-08-11 21:04:22','2021-08-11 21:10:05'),
(258,'评论点赞','/comments/*/like','POST',178,0,'2021-08-11 21:04:22',NULL),
(259,'查询评论下的回复','/comments/*/replies','GET',178,1,'2021-08-11 21:04:22','2021-08-11 21:07:30'),
(260,'查看友链列表','/links','GET',167,1,'2021-08-11 21:04:22','2021-08-11 21:05:41'),
(261,'查看留言列表','/messages','GET',174,1,'2021-08-11 21:04:22','2021-08-11 21:07:14'),
(262,'添加留言','/messages','POST',174,1,'2021-08-11 21:04:22','2021-08-11 21:07:15'),
(263,'获取相册列表','/photos/albums','GET',175,1,'2021-08-11 21:04:22','2021-08-11 21:07:20'),
(264,'用户注册','/register','POST',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:01'),
(265,'查询标签列表','/tags','GET',170,1,'2021-08-11 21:04:22','2021-08-11 21:06:30'),
(267,'更新用户头像','/users/avatar','POST',172,0,'2021-08-11 21:04:22',NULL),
(268,'发送邮箱验证码','/users/code','GET',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:02'),
(269,'绑定用户邮箱','/users/email','POST',172,0,'2021-08-11 21:04:22',NULL),
(270,'更新用户信息','/users/info','PUT',172,0,'2021-08-11 21:04:22',NULL),
(271,'qq登录','/users/oauth/qq','POST',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:06'),
(272,'微博登录','/users/oauth/weibo','POST',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:06'),
(273,'修改密码','/users/password','PUT',173,1,'2021-08-11 21:04:22','2021-08-11 21:07:09'),
(274,'上传语音','/voice','POST',166,1,'2021-08-11 21:04:22','2021-08-11 21:05:33'),
(275,'上传访客信息','/report','POST',166,1,'2021-08-24 00:32:05','2021-08-24 00:32:07'),
(276,'获取用户区域分布','/admin/users/area','GET',173,0,'2021-08-24 00:32:35','2021-09-24 16:25:34'),
(278,'说说模块',NULL,NULL,NULL,0,'2022-01-24 01:29:13',NULL),
(279,'查看首页说说','/home/talks','GET',278,1,'2022-01-24 01:29:29','2022-01-24 01:31:56'),
(280,'查看说说列表','/talks','GET',278,1,'2022-01-24 01:29:52','2022-01-24 01:31:56'),
(281,'根据id查看说说','/talks/*','GET',278,1,'2022-01-24 01:30:10','2022-01-24 01:31:57'),
(282,'点赞说说','/talks/*/like','POST',278,0,'2022-01-24 01:30:30',NULL),
(283,'上传说说图片','/admin/talks/images','POST',278,0,'2022-01-24 01:30:46',NULL),
(284,'保存或修改说说','/admin/talks','POST',278,0,'2022-01-24 01:31:04',NULL),
(285,'删除说说','/admin/talks','DELETE',278,0,'2022-01-24 01:31:22',NULL),
(286,'查看后台说说','/admin/talks','GET',278,0,'2022-01-24 01:31:38',NULL),
(287,'根据id查看后台说说','/admin/talks/*','GET',278,0,'2022-01-24 01:31:53','2022-01-24 01:33:14'),
(288,'发帖',NULL,NULL,NULL,0,'2022-08-15 09:59:26',NULL);

/*Table structure for table `tb_role` */

DROP TABLE IF EXISTS `tb_role`;

CREATE TABLE `tb_role` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键id',
  `role_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色名',
  `role_label` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '角色描述',
  `is_disable` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否禁用  0否 1是',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_role` */

insert  into `tb_role`(`id`,`role_name`,`role_label`,`is_disable`,`create_time`,`update_time`) values 
(1,'管理员','admin',0,'2021-03-22 14:10:21','2022-01-24 01:32:26'),
(2,'用户','user',0,'2021-03-22 14:25:25','2022-09-04 14:49:58'),
(3,'测试','test',0,'2021-03-22 14:42:23','2022-01-24 01:32:59');

/*Table structure for table `tb_role_menu` */

DROP TABLE IF EXISTS `tb_role_menu`;

CREATE TABLE `tb_role_menu` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '主键',
  `role_id` int DEFAULT NULL COMMENT '角色id',
  `menu_id` int DEFAULT NULL COMMENT '菜单id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2528 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_role_menu` */

insert  into `tb_role_menu`(`id`,`role_id`,`menu_id`) values 
(1397,8,1),
(1398,8,2),
(1399,8,6),
(1400,8,7),
(1401,8,8),
(1402,8,9),
(1403,8,10),
(1404,8,3),
(1405,8,11),
(1406,8,12),
(1407,8,202),
(1408,8,13),
(1409,8,14),
(1410,8,201),
(1411,8,4),
(1412,8,16),
(1413,8,15),
(1414,8,17),
(1415,8,18),
(1416,8,19),
(1417,8,20),
(1418,8,5),
(1595,9,1),
(1596,9,2),
(1597,9,6),
(1598,9,7),
(1599,9,8),
(1600,9,9),
(1601,9,10),
(1602,9,3),
(1603,9,11),
(1604,9,12),
(1605,9,202),
(1606,9,13),
(1607,9,14),
(1608,9,201),
(1609,9,4),
(1610,9,16),
(1611,9,15),
(1612,9,17),
(1613,9,18),
(1614,9,19),
(1615,9,20),
(1616,9,5),
(1639,13,2),
(1640,13,6),
(1641,13,7),
(1642,13,8),
(1643,13,9),
(1644,13,10),
(1645,13,3),
(1646,13,11),
(1647,13,12),
(2366,14,1),
(2367,14,2),
(2461,1,1),
(2462,1,2),
(2463,1,6),
(2464,1,7),
(2465,1,8),
(2466,1,9),
(2467,1,10),
(2468,1,3),
(2469,1,11),
(2470,1,12),
(2471,1,202),
(2472,1,13),
(2473,1,201),
(2474,1,213),
(2475,1,14),
(2476,1,15),
(2477,1,16),
(2478,1,4),
(2479,1,214),
(2480,1,209),
(2481,1,17),
(2482,1,18),
(2483,1,205),
(2484,1,206),
(2485,1,208),
(2486,1,210),
(2487,1,215),
(2488,1,216),
(2489,1,217),
(2490,1,218),
(2491,1,19),
(2492,1,20),
(2493,1,5),
(2494,3,1),
(2495,3,2),
(2496,3,6),
(2497,3,7),
(2498,3,8),
(2499,3,9),
(2500,3,10),
(2501,3,3),
(2502,3,11),
(2503,3,12),
(2504,3,202),
(2505,3,13),
(2506,3,201),
(2507,3,213),
(2508,3,14),
(2509,3,15),
(2510,3,16),
(2511,3,4),
(2512,3,214),
(2513,3,209),
(2514,3,17),
(2515,3,18),
(2516,3,205),
(2517,3,206),
(2518,3,208),
(2519,3,210),
(2520,3,215),
(2521,3,216),
(2522,3,217),
(2523,3,218),
(2524,3,19),
(2525,3,20),
(2526,3,5),
(2527,4,1);

/*Table structure for table `tb_role_resource` */

DROP TABLE IF EXISTS `tb_role_resource`;

CREATE TABLE `tb_role_resource` (
  `id` int NOT NULL AUTO_INCREMENT,
  `role_id` int DEFAULT NULL COMMENT '角色id',
  `resource_id` int DEFAULT NULL COMMENT '权限id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4894 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_role_resource` */

insert  into `tb_role_resource`(`id`,`role_id`,`resource_id`) values 
(4750,14,238),
(4758,1,165),
(4759,1,192),
(4760,1,193),
(4761,1,194),
(4762,1,195),
(4763,1,166),
(4764,1,183),
(4765,1,184),
(4766,1,246),
(4767,1,247),
(4768,1,167),
(4769,1,199),
(4770,1,200),
(4771,1,201),
(4772,1,168),
(4773,1,185),
(4774,1,186),
(4775,1,187),
(4776,1,188),
(4777,1,189),
(4778,1,190),
(4779,1,191),
(4780,1,254),
(4781,1,169),
(4782,1,208),
(4783,1,209),
(4784,1,170),
(4785,1,234),
(4786,1,235),
(4787,1,236),
(4788,1,237),
(4789,1,171),
(4790,1,213),
(4791,1,214),
(4792,1,215),
(4793,1,216),
(4794,1,217),
(4795,1,224),
(4796,1,172),
(4797,1,240),
(4798,1,241),
(4799,1,244),
(4800,1,245),
(4801,1,267),
(4802,1,269),
(4803,1,270),
(4804,1,173),
(4805,1,239),
(4806,1,242),
(4807,1,276),
(4808,1,174),
(4809,1,205),
(4810,1,206),
(4811,1,207),
(4812,1,175),
(4813,1,218),
(4814,1,219),
(4815,1,220),
(4816,1,221),
(4817,1,222),
(4818,1,223),
(4819,1,176),
(4820,1,202),
(4821,1,203),
(4822,1,204),
(4823,1,230),
(4824,1,238),
(4825,1,177),
(4826,1,229),
(4827,1,232),
(4828,1,233),
(4829,1,243),
(4830,1,178),
(4831,1,196),
(4832,1,197),
(4833,1,198),
(4834,1,257),
(4835,1,258),
(4836,1,179),
(4837,1,225),
(4838,1,226),
(4839,1,227),
(4840,1,228),
(4841,1,231),
(4842,1,180),
(4843,1,210),
(4844,1,211),
(4845,1,212),
(4846,1,278),
(4847,1,282),
(4848,1,283),
(4849,1,284),
(4850,1,285),
(4851,1,286),
(4852,1,287),
(4853,3,192),
(4854,3,195),
(4855,3,183),
(4856,3,246),
(4857,3,199),
(4858,3,185),
(4859,3,191),
(4860,3,254),
(4861,3,208),
(4862,3,234),
(4863,3,237),
(4864,3,213),
(4865,3,241),
(4866,3,239),
(4867,3,276),
(4868,3,205),
(4869,3,218),
(4870,3,221),
(4871,3,223),
(4872,3,202),
(4873,3,230),
(4874,3,238),
(4875,3,232),
(4876,3,243),
(4877,3,196),
(4878,3,257),
(4879,3,258),
(4880,3,225),
(4881,3,231),
(4882,3,210),
(4883,3,282),
(4884,3,286),
(4885,3,287),
(4886,2,254),
(4887,2,267),
(4888,2,269),
(4889,2,270),
(4890,2,257),
(4891,2,258),
(4892,2,282),
(4893,2,288);

/*Table structure for table `tb_tag` */

DROP TABLE IF EXISTS `tb_tag`;

CREATE TABLE `tb_tag` (
  `id` int NOT NULL AUTO_INCREMENT,
  `tag_name` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '标签名',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_tag` */

insert  into `tb_tag`(`id`,`tag_name`,`create_time`,`update_time`) values 
(29,'测试标签','2022-01-24 23:33:57',NULL),
(30,'MySQL','2022-08-30 12:35:52',NULL),
(31,'缓存','2022-08-30 12:42:36',NULL),
(32,'数据结构与算法','2022-08-30 12:51:08',NULL),
(33,'手译','2022-08-30 13:01:40',NULL),
(34,'计算机网络','2022-08-30 18:50:52',NULL),
(35,'学习','2022-08-30 18:51:30',NULL),
(36,'408','2022-08-30 18:51:30',NULL),
(37,'技术栈','2022-08-31 08:05:48',NULL);

/*Table structure for table `tb_talk` */

DROP TABLE IF EXISTS `tb_talk`;

CREATE TABLE `tb_talk` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '说说id',
  `user_id` int NOT NULL COMMENT '用户id',
  `content` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '说说内容',
  `images` varchar(2500) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '图片',
  `is_top` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶',
  `status` tinyint(1) NOT NULL DEFAULT '1' COMMENT '状态 1.公开 2.私密',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=54 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_talk` */

insert  into `tb_talk`(`id`,`user_id`,`content`,`images`,`is_top`,`status`,`create_time`,`update_time`) values 
(49,1,'测试说说<img src=\"https://static.talkxj.com/emoji/goutou.jpg\" width=\"24\" height=\"24\" alt=\"[狗头]\" style=\"margin: 0 1px;vertical-align: text-bottom\">',NULL,0,1,'2022-01-24 23:34:59',NULL),
(51,1,'今天上学<img src=\"https://static.talkxj.com/emoji/goutou.jpg\" alt=\"[狗头]\" style=\"margin: 0 1px;vertical-align: text-bottom\" width=\"24\" height=\"24\"><img src=\"https://static.talkxj.com/emoji/miaoa.jpg\" alt=\"[妙啊]\" style=\"margin: 0 1px;vertical-align: text-bottom\" width=\"24\" height=\"24\"><br>',NULL,0,1,'2022-08-30 12:32:19','2022-08-30 12:33:26'),
(52,1,'不知道为什么服务器数据库又炸了，现在恢复了 无语<img src=\"https://static.talkxj.com/emoji/wy.jpg\" alt=\"[无语]\" style=\"margin: 0 1px;vertical-align: text-bottom\" width=\"24\" height=\"24\"><br>',NULL,0,1,'2022-09-01 08:13:33',NULL);

/*Table structure for table `tb_unique_view` */

DROP TABLE IF EXISTS `tb_unique_view`;

CREATE TABLE `tb_unique_view` (
  `id` int NOT NULL AUTO_INCREMENT,
  `views_count` int NOT NULL COMMENT '访问量',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=570 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_unique_view` */

insert  into `tb_unique_view`(`id`,`views_count`,`create_time`,`update_time`) values 
(534,2,'2022-08-11 00:00:00',NULL),
(535,1,'2022-08-12 00:00:00',NULL),
(536,0,'2022-08-13 00:00:00',NULL),
(537,0,'2022-08-14 00:00:00',NULL),
(538,3,'2022-08-15 00:00:00',NULL),
(539,4,'2022-08-16 00:00:00',NULL),
(540,4,'2022-08-22 00:00:00',NULL),
(541,2,'2022-08-23 00:00:00',NULL),
(542,2,'2022-08-24 00:00:00',NULL),
(543,2,'2022-08-25 00:00:00',NULL),
(544,2,'2022-08-26 00:00:00',NULL),
(545,2,'2022-08-27 00:00:00',NULL),
(546,0,'2022-08-28 00:00:00',NULL),
(547,1,'2022-08-29 00:00:00',NULL),
(548,17,'2022-08-30 00:00:00',NULL),
(549,5,'2022-08-31 00:00:00',NULL),
(550,2,'2022-09-01 00:00:00',NULL),
(551,5,'2022-09-02 00:00:00',NULL),
(552,1,'2022-09-03 00:00:00',NULL),
(553,3,'2022-09-13 00:00:00',NULL),
(554,2,'2022-09-14 00:00:00',NULL),
(555,1,'2022-09-15 00:00:00',NULL),
(556,4,'2022-09-16 00:00:00',NULL),
(557,1,'2022-09-17 00:00:00',NULL),
(558,3,'2022-09-18 00:00:00',NULL),
(559,2,'2022-09-19 00:00:00',NULL),
(560,3,'2022-09-20 00:00:00',NULL),
(561,5,'2022-09-22 00:00:00',NULL),
(562,3,'2022-09-23 00:00:00',NULL),
(563,4,'2022-09-24 00:00:00',NULL),
(564,2,'2022-09-25 00:00:00',NULL),
(565,2,'2022-09-26 00:00:00',NULL),
(566,5,'2022-09-27 00:00:00',NULL),
(567,1,'2022-09-28 00:00:00',NULL),
(568,1,'2022-09-29 00:00:00',NULL),
(569,3,'2022-09-30 00:00:00',NULL);

/*Table structure for table `tb_user_auth` */

DROP TABLE IF EXISTS `tb_user_auth`;

CREATE TABLE `tb_user_auth` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_info_id` int NOT NULL COMMENT '用户信息id',
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户名',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '密码',
  `login_type` tinyint(1) NOT NULL COMMENT '登录类型',
  `ip_address` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '用户登录ip',
  `ip_source` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT 'ip来源',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  `last_login_time` datetime DEFAULT NULL COMMENT '上次登录时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE KEY `username` (`username`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=999 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_user_auth` */

insert  into `tb_user_auth`(`id`,`user_info_id`,`username`,`password`,`login_type`,`ip_address`,`ip_source`,`create_time`,`update_time`,`last_login_time`) values 
(1,1,'admin@qq.com','$2a$10$AkxkZaqcxEXdiNE1nrgW1.ms3aS9C5ImXMf8swkWUJuFGMqDl.TPW',1,'14.28.167.10','广东省深圳市 电信','2021-08-12 15:43:18','2022-10-01 20:51:39','2022-10-01 20:51:39'),
(995,1005,'xiaainy@163.com','$2a$10$K7KQJ8mED4NKLvaNlAOx5ey4NbcU1CUDrEJnL9zCWNIvnbjrhwOnK',1,'61.222.202.239','台湾省','2022-01-27 10:58:11','2022-01-27 10:58:12','2022-01-27 10:58:12'),
(996,1006,'1234@ww.com','$2a$10$AYj8hOlGD/AFpS4uqa8HH.7fVOWgCZkeCwRfCV7mGacBQ5QkXnEdi',1,'119.136.153.127','广东省深圳市 电信','2022-08-11 10:43:44','2022-08-11 10:44:18','2022-08-11 10:44:18'),
(997,1007,'1657208016@qq.com','$2a$10$.dSwhPCreo8m/rtlbp.VMuRhu01Er34pKLHZNm6pVWInn2SDVTMQW',1,'183.39.158.29','广东省深圳市 电信','2022-08-11 10:46:54','2022-09-04 14:46:01','2022-09-04 14:46:01'),
(998,1008,'2806050726@qq.com','$2a$10$1j9sNSsb6l3c5buhoEn1n.nu9PjpNH58vZ/atF0lUZNjWbirgnsha',1,'120.230.65.241','广东省佛山市 移动','2022-08-16 21:33:55','2022-08-16 21:33:55','2022-08-16 21:33:55');

/*Table structure for table `tb_user_info` */

DROP TABLE IF EXISTS `tb_user_info`;

CREATE TABLE `tb_user_info` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '用户ID',
  `email` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '邮箱号',
  `nickname` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL COMMENT '用户昵称',
  `avatar` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '用户头像',
  `intro` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '用户简介',
  `web_site` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '个人网站',
  `is_disable` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否禁用',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1009 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_user_info` */

insert  into `tb_user_info`(`id`,`email`,`nickname`,`avatar`,`intro`,`web_site`,`is_disable`,`create_time`,`update_time`) values 
(1,'admin@qq.com','管理员','http://121.89.232.237:83/avatar/2e07d8ab808c489f7893ef738626153e.jpg','admin@qq.com',NULL,0,'2021-08-12 15:43:17','2022-08-16 20:34:52'),
(1005,'xiaainy@163.com','用户1486533968342859778','https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg',NULL,NULL,0,'2022-01-27 10:58:11',NULL),
(1006,'1234@ww.com','nihao(*´▽｀)ノノ','https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg','哈哈哈',NULL,0,'2022-08-11 10:43:43','2022-08-11 10:44:37'),
(1007,'1657208016@qq.com','kk','https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg','kk',NULL,0,'2022-08-11 10:46:54','2022-09-04 09:53:25'),
(1008,'2806050726@qq.com','用户1559533913861308418','http://121.89.232.237:83/avatar/e2cb9cdd3e837e7d52b64447d59730a3.jpg',NULL,NULL,0,'2022-08-16 21:33:54','2022-08-16 21:36:18');

/*Table structure for table `tb_user_role` */

DROP TABLE IF EXISTS `tb_user_role`;

CREATE TABLE `tb_user_role` (
  `id` int NOT NULL AUTO_INCREMENT,
  `user_id` int DEFAULT NULL COMMENT '用户id',
  `role_id` int DEFAULT NULL COMMENT '角色id',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1010 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_user_role` */

insert  into `tb_user_role`(`id`,`user_id`,`role_id`) values 
(1001,1,1),
(1002,1005,2),
(1003,1006,2),
(1005,1008,2),
(1009,1007,3);

/*Table structure for table `tb_website_config` */

DROP TABLE IF EXISTS `tb_website_config`;

CREATE TABLE `tb_website_config` (
  `id` int NOT NULL AUTO_INCREMENT,
  `config` varchar(2000) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL COMMENT '配置信息',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime DEFAULT NULL COMMENT '更新时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci ROW_FORMAT=DYNAMIC;

/*Data for the table `tb_website_config` */

insert  into `tb_website_config`(`id`,`config`,`create_time`,`update_time`) values 
(1,'{\"alipayQRCode\":\"https://static.talkxj.com/photos/13d83d77cc1f7e4e0437d7feaf56879f.png\",\"articleCover\":\"http://121.89.232.237:83/config/c844873141e57989de49dc759bfa514c.jpg\",\"gitee\":\"https://gitee.com/kkhead\",\"github\":\"https://github.com/yiKkai\",\"isChatRoom\":1,\"isCommentReview\":0,\"isEmailNotice\":1,\"isMessageReview\":0,\"isMusicPlayer\":1,\"isReward\":1,\"qq\":\"2646049809\",\"socialLoginList\":[\"qq\",\"weibo\"],\"socialUrlList\":[\"qq\",\"github\",\"gitee\"],\"touristAvatar\":\"https://static.talkxj.com/photos/0bca52afdb2b9998132355d716390c9f.png\",\"userAvatar\":\"https://static.talkxj.com/config/2cd793c8744199053323546875655f32.jpg\",\"websiteAuthor\":\"yikai\",\"websiteAvatar\":\"http://121.89.232.237:83/config/2e07d8ab808c489f7893ef738626153e.jpg\",\"websiteCreateTime\":\"2022-08-11\",\"websiteIntro\":\"开同学的blog~ 喜欢写一些贼有意思的东东^^\",\"websiteName\":\"开同学的Blog\",\"websiteNotice\":\"开同学的blog~ 喜欢写一些贼有意思的东东^^\",\"websiteRecordNo\":\"yikai\",\"websocketUrl\":\"121.89.232.237:8080/websocket\",\"weiXinQRCode\":\"https://static.talkxj.com/photos/4f767ef84e55ab9ad42b2d20e51deca1.png\"}','2021-08-09 19:37:30','2022-08-30 22:39:42');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
